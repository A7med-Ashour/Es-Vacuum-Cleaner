

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Aug 22 20:59:51 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
    66                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x7E,2
    85  0000                     
    86                           ; Version 2.05
    87                           ; Generated 20/12/2018 GMT
    88                           ; 
    89                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC16F877A Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001D                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  0081                     	;# 
   156  0085                     	;# 
   157  0086                     	;# 
   158  0087                     	;# 
   159  0088                     	;# 
   160  0089                     	;# 
   161  008C                     	;# 
   162  008D                     	;# 
   163  008E                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0094                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180  0000                     	;# 
   181  0001                     	;# 
   182  0002                     	;# 
   183  0003                     	;# 
   184  0004                     	;# 
   185  0005                     	;# 
   186  0006                     	;# 
   187  0007                     	;# 
   188  0008                     	;# 
   189  0009                     	;# 
   190  000A                     	;# 
   191  000B                     	;# 
   192  000C                     	;# 
   193  000D                     	;# 
   194  000E                     	;# 
   195  000E                     	;# 
   196  000F                     	;# 
   197  0010                     	;# 
   198  0011                     	;# 
   199  0012                     	;# 
   200  0013                     	;# 
   201  0014                     	;# 
   202  0015                     	;# 
   203  0015                     	;# 
   204  0016                     	;# 
   205  0017                     	;# 
   206  0018                     	;# 
   207  0019                     	;# 
   208  001A                     	;# 
   209  001B                     	;# 
   210  001B                     	;# 
   211  001C                     	;# 
   212  001D                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  0081                     	;# 
   216  0085                     	;# 
   217  0086                     	;# 
   218  0087                     	;# 
   219  0088                     	;# 
   220  0089                     	;# 
   221  008C                     	;# 
   222  008D                     	;# 
   223  008E                     	;# 
   224  0091                     	;# 
   225  0092                     	;# 
   226  0093                     	;# 
   227  0094                     	;# 
   228  0098                     	;# 
   229  0099                     	;# 
   230  009C                     	;# 
   231  009D                     	;# 
   232  009E                     	;# 
   233  009F                     	;# 
   234  010C                     	;# 
   235  010D                     	;# 
   236  010E                     	;# 
   237  010F                     	;# 
   238  018C                     	;# 
   239  018D                     	;# 
   240  0000                     	;# 
   241  0001                     	;# 
   242  0002                     	;# 
   243  0003                     	;# 
   244  0004                     	;# 
   245  0005                     	;# 
   246  0006                     	;# 
   247  0007                     	;# 
   248  0008                     	;# 
   249  0009                     	;# 
   250  000A                     	;# 
   251  000B                     	;# 
   252  000C                     	;# 
   253  000D                     	;# 
   254  000E                     	;# 
   255  000E                     	;# 
   256  000F                     	;# 
   257  0010                     	;# 
   258  0011                     	;# 
   259  0012                     	;# 
   260  0013                     	;# 
   261  0014                     	;# 
   262  0015                     	;# 
   263  0015                     	;# 
   264  0016                     	;# 
   265  0017                     	;# 
   266  0018                     	;# 
   267  0019                     	;# 
   268  001A                     	;# 
   269  001B                     	;# 
   270  001B                     	;# 
   271  001C                     	;# 
   272  001D                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  0081                     	;# 
   276  0085                     	;# 
   277  0086                     	;# 
   278  0087                     	;# 
   279  0088                     	;# 
   280  0089                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  008E                     	;# 
   284  0091                     	;# 
   285  0092                     	;# 
   286  0093                     	;# 
   287  0094                     	;# 
   288  0098                     	;# 
   289  0099                     	;# 
   290  009C                     	;# 
   291  009D                     	;# 
   292  009E                     	;# 
   293  009F                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  018C                     	;# 
   299  018D                     	;# 
   300  0000                     	;# 
   301  0001                     	;# 
   302  0002                     	;# 
   303  0003                     	;# 
   304  0004                     	;# 
   305  0005                     	;# 
   306  0006                     	;# 
   307  0007                     	;# 
   308  0008                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0088                     	;# 
   340  0089                     	;# 
   341  008C                     	;# 
   342  008D                     	;# 
   343  008E                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0093                     	;# 
   347  0094                     	;# 
   348  0098                     	;# 
   349  0099                     	;# 
   350  009C                     	;# 
   351  009D                     	;# 
   352  009E                     	;# 
   353  009F                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  018C                     	;# 
   359  018D                     	;# 
   360  0000                     	;# 
   361  0001                     	;# 
   362  0002                     	;# 
   363  0003                     	;# 
   364  0004                     	;# 
   365  0005                     	;# 
   366  0006                     	;# 
   367  0007                     	;# 
   368  0008                     	;# 
   369  0009                     	;# 
   370  000A                     	;# 
   371  000B                     	;# 
   372  000C                     	;# 
   373  000D                     	;# 
   374  000E                     	;# 
   375  000E                     	;# 
   376  000F                     	;# 
   377  0010                     	;# 
   378  0011                     	;# 
   379  0012                     	;# 
   380  0013                     	;# 
   381  0014                     	;# 
   382  0015                     	;# 
   383  0015                     	;# 
   384  0016                     	;# 
   385  0017                     	;# 
   386  0018                     	;# 
   387  0019                     	;# 
   388  001A                     	;# 
   389  001B                     	;# 
   390  001B                     	;# 
   391  001C                     	;# 
   392  001D                     	;# 
   393  001E                     	;# 
   394  001F                     	;# 
   395  0081                     	;# 
   396  0085                     	;# 
   397  0086                     	;# 
   398  0087                     	;# 
   399  0088                     	;# 
   400  0089                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  0091                     	;# 
   405  0092                     	;# 
   406  0093                     	;# 
   407  0094                     	;# 
   408  0098                     	;# 
   409  0099                     	;# 
   410  009C                     	;# 
   411  009D                     	;# 
   412  009E                     	;# 
   413  009F                     	;# 
   414  010C                     	;# 
   415  010D                     	;# 
   416  010E                     	;# 
   417  010F                     	;# 
   418  018C                     	;# 
   419  018D                     	;# 
   420  0000                     	;# 
   421  0001                     	;# 
   422  0002                     	;# 
   423  0003                     	;# 
   424  0004                     	;# 
   425  0005                     	;# 
   426  0006                     	;# 
   427  0007                     	;# 
   428  0008                     	;# 
   429  0009                     	;# 
   430  000A                     	;# 
   431  000B                     	;# 
   432  000C                     	;# 
   433  000D                     	;# 
   434  000E                     	;# 
   435  000E                     	;# 
   436  000F                     	;# 
   437  0010                     	;# 
   438  0011                     	;# 
   439  0012                     	;# 
   440  0013                     	;# 
   441  0014                     	;# 
   442  0015                     	;# 
   443  0015                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001B                     	;# 
   451  001C                     	;# 
   452  001D                     	;# 
   453  001E                     	;# 
   454  001F                     	;# 
   455  0081                     	;# 
   456  0085                     	;# 
   457  0086                     	;# 
   458  0087                     	;# 
   459  0088                     	;# 
   460  0089                     	;# 
   461  008C                     	;# 
   462  008D                     	;# 
   463  008E                     	;# 
   464  0091                     	;# 
   465  0092                     	;# 
   466  0093                     	;# 
   467  0094                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  009F                     	;# 
   474  010C                     	;# 
   475  010D                     	;# 
   476  010E                     	;# 
   477  010F                     	;# 
   478  018C                     	;# 
   479  018D                     	;# 
   480  0000                     	;# 
   481  0001                     	;# 
   482  0002                     	;# 
   483  0003                     	;# 
   484  0004                     	;# 
   485  0005                     	;# 
   486  0006                     	;# 
   487  0007                     	;# 
   488  0008                     	;# 
   489  0009                     	;# 
   490  000A                     	;# 
   491  000B                     	;# 
   492  000C                     	;# 
   493  000D                     	;# 
   494  000E                     	;# 
   495  000E                     	;# 
   496  000F                     	;# 
   497  0010                     	;# 
   498  0011                     	;# 
   499  0012                     	;# 
   500  0013                     	;# 
   501  0014                     	;# 
   502  0015                     	;# 
   503  0015                     	;# 
   504  0016                     	;# 
   505  0017                     	;# 
   506  0018                     	;# 
   507  0019                     	;# 
   508  001A                     	;# 
   509  001B                     	;# 
   510  001B                     	;# 
   511  001C                     	;# 
   512  001D                     	;# 
   513  001E                     	;# 
   514  001F                     	;# 
   515  0081                     	;# 
   516  0085                     	;# 
   517  0086                     	;# 
   518  0087                     	;# 
   519  0088                     	;# 
   520  0089                     	;# 
   521  008C                     	;# 
   522  008D                     	;# 
   523  008E                     	;# 
   524  0091                     	;# 
   525  0092                     	;# 
   526  0093                     	;# 
   527  0094                     	;# 
   528  0098                     	;# 
   529  0099                     	;# 
   530  009C                     	;# 
   531  009D                     	;# 
   532  009E                     	;# 
   533  009F                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  010F                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  0000                     	;# 
   541  0001                     	;# 
   542  0002                     	;# 
   543  0003                     	;# 
   544  0004                     	;# 
   545  0005                     	;# 
   546  0006                     	;# 
   547  0007                     	;# 
   548  0008                     	;# 
   549  0009                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0015                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001B                     	;# 
   571  001C                     	;# 
   572  001D                     	;# 
   573  001E                     	;# 
   574  001F                     	;# 
   575  0081                     	;# 
   576  0085                     	;# 
   577  0086                     	;# 
   578  0087                     	;# 
   579  0088                     	;# 
   580  0089                     	;# 
   581  008C                     	;# 
   582  008D                     	;# 
   583  008E                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0094                     	;# 
   588  0098                     	;# 
   589  0099                     	;# 
   590  009C                     	;# 
   591  009D                     	;# 
   592  009E                     	;# 
   593  009F                     	;# 
   594  010C                     	;# 
   595  010D                     	;# 
   596  010E                     	;# 
   597  010F                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  000E                     	;# 
   616  000F                     	;# 
   617  0010                     	;# 
   618  0011                     	;# 
   619  0012                     	;# 
   620  0013                     	;# 
   621  0014                     	;# 
   622  0015                     	;# 
   623  0015                     	;# 
   624  0016                     	;# 
   625  0017                     	;# 
   626  0018                     	;# 
   627  0019                     	;# 
   628  001A                     	;# 
   629  001B                     	;# 
   630  001B                     	;# 
   631  001C                     	;# 
   632  001D                     	;# 
   633  001E                     	;# 
   634  001F                     	;# 
   635  0081                     	;# 
   636  0085                     	;# 
   637  0086                     	;# 
   638  0087                     	;# 
   639  0088                     	;# 
   640  0089                     	;# 
   641  008C                     	;# 
   642  008D                     	;# 
   643  008E                     	;# 
   644  0091                     	;# 
   645  0092                     	;# 
   646  0093                     	;# 
   647  0094                     	;# 
   648  0098                     	;# 
   649  0099                     	;# 
   650  009C                     	;# 
   651  009D                     	;# 
   652  009E                     	;# 
   653  009F                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  010F                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000D                     	;# 
   674  000E                     	;# 
   675  000E                     	;# 
   676  000F                     	;# 
   677  0010                     	;# 
   678  0011                     	;# 
   679  0012                     	;# 
   680  0013                     	;# 
   681  0014                     	;# 
   682  0015                     	;# 
   683  0015                     	;# 
   684  0016                     	;# 
   685  0017                     	;# 
   686  0018                     	;# 
   687  0019                     	;# 
   688  001A                     	;# 
   689  001B                     	;# 
   690  001B                     	;# 
   691  001C                     	;# 
   692  001D                     	;# 
   693  001E                     	;# 
   694  001F                     	;# 
   695  0081                     	;# 
   696  0085                     	;# 
   697  0086                     	;# 
   698  0087                     	;# 
   699  0088                     	;# 
   700  0089                     	;# 
   701  008C                     	;# 
   702  008D                     	;# 
   703  008E                     	;# 
   704  0091                     	;# 
   705  0092                     	;# 
   706  0093                     	;# 
   707  0094                     	;# 
   708  0098                     	;# 
   709  0099                     	;# 
   710  009C                     	;# 
   711  009D                     	;# 
   712  009E                     	;# 
   713  009F                     	;# 
   714  010C                     	;# 
   715  010D                     	;# 
   716  010E                     	;# 
   717  010F                     	;# 
   718  018C                     	;# 
   719  018D                     	;# 
   720                           
   721                           	psect	idataBANK1
   722  1618                     __pidataBANK1:	
   723                           
   724                           ;initializer for SSD_schematic_init@F931
   725  1618  3488               	retlw	136
   726  1619  3400               	retlw	0
   727  161A  3408               	retlw	8
   728  161B  3400               	retlw	0
   729  161C  3486               	retlw	134
   730  161D  3400               	retlw	0
   731  161E  3406               	retlw	6
   732  161F  3400               	retlw	0
   733  1620  3406               	retlw	6
   734  1621  3400               	retlw	0
   735  1622  340A               	retlw	10
   736                           
   737                           ;initializer for _DSP_speed_patterns
   738  1623  3408               	retlw	8
   739  1624  3400               	retlw	0
   740  1625  3400               	retlw	0
   741  1626  3408               	retlw	8
   742  1627  3448               	retlw	72
   743  1628  3400               	retlw	0
   744  1629  3408               	retlw	8
   745  162A  3448               	retlw	72
   746  162B  3449               	retlw	73
   747                           
   748                           ;initializer for _MO_AngelVal
   749  162C  348C               	retlw	140
   750  162D  3400               	retlw	0
   751  162E  345A               	retlw	90
   752  162F  3400               	retlw	0
   753  1630  340A               	retlw	10
   754  1631  3400               	retlw	0
   755  1632  34AA               	retlw	170
   756  1633  3400               	retlw	0
   757                           
   758                           ;initializer for LED_create@F909
   759  1634  3486               	retlw	134
   760  1635  3400               	retlw	0
   761  1636  3406               	retlw	6
   762  1637  3400               	retlw	0
   763  1638  3403               	retlw	3
   764  1639  3400               	retlw	0
   765                           
   766                           ;initializer for MO_reduceHARM@RH_flag
   767  163A  3401               	retlw	1
   768                           
   769                           ;initializer for sw_dust_handler@step
   770  163B  3402               	retlw	2
   771                           
   772                           	psect	idataBANK2
   773  134F                     __pidataBANK2:	
   774                           
   775                           ;initializer for _ssd_decoder
   776  134F  343F               	retlw	63
   777  1350  3406               	retlw	6
   778  1351  345B               	retlw	91
   779  1352  344F               	retlw	79
   780  1353  3466               	retlw	102
   781  1354  346D               	retlw	109
   782  1355  347D               	retlw	125
   783  1356  3407               	retlw	7
   784  1357  347F               	retlw	127
   785  1358  346F               	retlw	111
   786  1359  3400               	retlw	0
   787                           
   788                           	psect	idataBANK3
   789  1458                     __pidataBANK3:	
   790                           
   791                           ;initializer for SSD_schematic_init@F935
   792  1458  3488               	retlw	136
   793  1459  3400               	retlw	0
   794  145A  3408               	retlw	8
   795  145B  3400               	retlw	0
   796  145C  3486               	retlw	134
   797  145D  3400               	retlw	0
   798  145E  3406               	retlw	6
   799  145F  3400               	retlw	0
   800  1460  3404               	retlw	4
   801  1461  3400               	retlw	0
   802  1462  340A               	retlw	10
   803                           
   804                           ;initializer for SSD_schematic_init@F933
   805  1463  3488               	retlw	136
   806  1464  3400               	retlw	0
   807  1465  3408               	retlw	8
   808  1466  3400               	retlw	0
   809  1467  3486               	retlw	134
   810  1468  3400               	retlw	0
   811  1469  3406               	retlw	6
   812  146A  3400               	retlw	0
   813  146B  3405               	retlw	5
   814  146C  3400               	retlw	0
   815  146D  340A               	retlw	10
   816  0460                     _TMR1IE	set	1120
   817                           
   818                           ; #config settings
   819  0000                     
   820                           	psect	cinit
   821  0011                     start_initialization:	
   822  0011                     __initialization:	
   823                           
   824                           ; Initialize objects allocated to BANK3
   825  0011  1783               	bsf	3,7	;select IRP bank2
   826  0012  30E8               	movlw	low (__pdataBANK3+22)
   827  0013  00FD               	movwf	btemp+-1
   828  0014  3014               	movlw	high __pidataBANK3
   829  0015  00FE               	movwf	btemp
   830  0016  3058               	movlw	low __pidataBANK3
   831  0017  00FF               	movwf	btemp+1
   832  0018  30D2               	movlw	low __pdataBANK3
   833  0019  0084               	movwf	4
   834  001A  160A  118A  237F  120A  118A  	fcall	init_ram0
   835                           
   836                           ; Initialize objects allocated to BANK2
   837  001F  301B               	movlw	low (__pdataBANK2+11)
   838  0020  00FD               	movwf	btemp+-1
   839  0021  3013               	movlw	high __pidataBANK2
   840  0022  00FE               	movwf	btemp
   841  0023  304F               	movlw	low __pidataBANK2
   842  0024  00FF               	movwf	btemp+1
   843  0025  3010               	movlw	low __pdataBANK2
   844  0026  0084               	movwf	4
   845  0027  160A  118A  237F  120A  118A  	fcall	init_ram0
   846                           
   847                           ; Initialize objects allocated to BANK1
   848  002C  1383               	bcf	3,7	;select IRP bank0
   849  002D  30C4               	movlw	low (__pdataBANK1+36)
   850  002E  00FD               	movwf	btemp+-1
   851  002F  3016               	movlw	high __pidataBANK1
   852  0030  00FE               	movwf	btemp
   853  0031  3018               	movlw	low __pidataBANK1
   854  0032  00FF               	movwf	btemp+1
   855  0033  30A0               	movlw	low __pdataBANK1
   856  0034  0084               	movwf	4
   857  0035  160A  118A  237F  120A  118A  	fcall	init_ram0
   858                           
   859                           ; Clear objects allocated to BANK3
   860  003A  1783               	bsf	3,7	;select IRP bank2
   861  003B  3090               	movlw	low __pbssBANK3
   862  003C  0084               	movwf	4
   863  003D  30D2               	movlw	low (__pbssBANK3+66)
   864  003E  160A  118A  2332  120A  118A  	fcall	clear_ram0
   865                           
   866                           ; Clear objects allocated to BANK1
   867  0043  1383               	bcf	3,7	;select IRP bank0
   868  0044  30C4               	movlw	low __pbssBANK1
   869  0045  0084               	movwf	4
   870  0046  30DF               	movlw	low (__pbssBANK1+27)
   871  0047  160A  118A  2332   	fcall	clear_ram0
   872                           
   873                           ; Clear objects allocated to COMMON
   874  004A  01FA               	clrf	__pbssCOMMON& (0+127)
   875  004B  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   876  004C  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
   877  004D  01FD               	clrf	(__pbssCOMMON+3)& (0+127)
   878  004E                     end_of_initialization:	
   879                           ;End of C runtime variable initialization code
   880                           
   881  004E                     __end_of__initialization:	
   882  004E  0183               	clrf	3
   883  004F  160A  118A  2EB9   	ljmp	_main	;jump to C main() function
   884                           
   885                           	psect	bssCOMMON
   886  007A                     __pbssCOMMON:	
   887  007A                     _MO_isStable:	
   888  007A                     	ds	1
   889  007B                     _VC_current_speed:	
   890  007B                     	ds	1
   891  007C                     _current_ssd:	
   892  007C                     	ds	1
   893  007D                     _DSP_speed:	
   894  007D                     	ds	1
   895                           
   896                           	psect	bssBANK1
   897  00C4                     __pbssBANK1:	
   898  00C4                     _LedDB:	
   899  00C4                     	ds	6
   900  00CA                     _errno:	
   901  00CA                     	ds	2
   902  00CC                     _MO_SingleAngelTime:	
   903  00CC                     	ds	2
   904  00CE                     _MO_targetAngel:	
   905  00CE                     	ds	2
   906  00D0                     _MO_currentAngel:	
   907  00D0                     	ds	2
   908  00D2                     _T0_OneCountTime:	
   909  00D2                     	ds	2
   910  00D4                     _T0_PreScaller:	
   911  00D4                     	ds	2
   912  00D6                     MO_reduceHARM@RH_counter:	
   913  00D6                     	ds	1
   914  00D7                     MO_softSwitch@ss_counter:	
   915  00D7                     	ds	1
   916  00D8                     MO_update@MO_counter:	
   917  00D8                     	ds	1
   918  00D9                     LED_update@LED_counter:	
   919  00D9                     	ds	1
   920  00DA                     DSP_update@DSP_counter:	
   921  00DA                     	ds	1
   922  00DB                     VC_update@vc_counter:	
   923  00DB                     	ds	1
   924  00DC                     switch_update@sw_update_counter:	
   925  00DC                     	ds	1
   926  00DD                     SSD_update@ssd_update_counter:	
   927  00DD                     	ds	1
   928  00DE                     _Schedular_State:	
   929  00DE                     	ds	1
   930                           
   931                           	psect	dataBANK1
   932  00A0                     __pdataBANK1:	
   933  00A0                     SSD_schematic_init@F931:	
   934  00A0                     	ds	11
   935  00AB                     _DSP_speed_patterns:	
   936  00AB                     	ds	9
   937  00B4                     _MO_AngelVal:	
   938  00B4                     	ds	8
   939  00BC                     LED_create@F909:	
   940  00BC                     	ds	6
   941  00C2                     MO_reduceHARM@RH_flag:	
   942  00C2                     	ds	1
   943  00C3                     sw_dust_handler@step:	
   944  00C3                     	ds	1
   945                           
   946                           	psect	bssBANK3
   947  0190                     __pbssBANK3:	
   948  0190                     _switches_data:	
   949  0190                     	ds	33
   950  01B1                     _ssd_data:	
   951  01B1                     	ds	33
   952                           
   953                           	psect	dataBANK3
   954  01D2                     __pdataBANK3:	
   955  01D2                     SSD_schematic_init@F935:	
   956  01D2                     	ds	11
   957  01DD                     SSD_schematic_init@F933:	
   958  01DD                     	ds	11
   959                           
   960                           	psect	dataBANK2
   961  0110                     __pdataBANK2:	
   962  0110                     _ssd_decoder:	
   963  0110                     	ds	11
   964                           
   965                           	psect	inittext
   966  137B                     init_fetch0:	
   967                           ;	Called with low address in FSR and high address in W
   968                           
   969  137B  087E               	movf	126,w
   970  137C  008A               	movwf	10
   971  137D  087F               	movf	127,w
   972  137E  0082               	movwf	2
   973  137F                     init_ram0:	
   974                           ;Called with:
   975                           ;	high address of idata address in btemp 
   976                           ;	low address of idata address in btemp+1 
   977                           ;	low address of data in FSR
   978                           ;	high address + 1 of data in btemp-1
   979                           
   980  137F  237B  160A  118A   	fcall	init_fetch0
   981  1382  0080               	movwf	0
   982  1383  0A84               	incf	4,f
   983  1384  0804               	movf	4,w
   984  1385  067D               	xorwf	125,w
   985  1386  1903               	btfsc	3,2
   986  1387  3400               	retlw	0
   987  1388  0AFF               	incf	127,f
   988  1389  1903               	btfsc	3,2
   989  138A  0AFE               	incf	126,f
   990  138B  2B7F               	goto	init_ram0
   991                           
   992                           	psect	clrtext
   993  1332                     clear_ram0:	
   994                           ;	Called with FSR containing the base address, and
   995                           ;	W with the last address+1
   996                           
   997  1332  0064               	clrwdt	;clear the watchdog before getting into this loop
   998  1333                     clrloop0:	
   999  1333  0180               	clrf	0	;clear RAM location pointed to by FSR
  1000  1334  0A84               	incf	4,f	;increment pointer
  1001  1335  0604               	xorwf	4,w	;XOR with final address
  1002  1336  1903               	btfsc	3,2	;have we reached the end yet?
  1003  1337  3400               	retlw	0	;all done for this memory range, return
  1004  1338  0604               	xorwf	4,w	;XOR again to restore value
  1005  1339  2B33               	goto	clrloop0	;do the next byte
  1006                           
  1007                           	psect	cstackBANK1
  1008  00DF                     __pcstackBANK1:	
  1009  00DF                     ??_timer0_init:	
  1010                           
  1011                           ; 1 bytes @ 0x0
  1012  00DF                     	ds	2
  1013  00E1                     _timer0_init$1518:	
  1014                           
  1015                           ; 4 bytes @ 0x2
  1016  00E1                     	ds	4
  1017  00E5                     _timer0_init$1519:	
  1018                           
  1019                           ; 4 bytes @ 0x6
  1020  00E5                     	ds	4
  1021  00E9                     timer0_init@p:	
  1022                           
  1023                           ; 1 bytes @ 0xA
  1024  00E9                     	ds	1
  1025                           
  1026                           	psect	cstackCOMMON
  1027  0070                     __pcstackCOMMON:	
  1028  0070                     ?_sw_init:	
  1029  0070                     ?_VC_init:	
  1030                           ; 1 bytes @ 0x0
  1031                           
  1032  0070                     ?_DSP_init:	
  1033                           ; 1 bytes @ 0x0
  1034                           
  1035  0070                     ?_MO_init:	
  1036                           ; 1 bytes @ 0x0
  1037                           
  1038  0070                     ?_INDICATOR_init:	
  1039                           ; 1 bytes @ 0x0
  1040                           
  1041  0070                     ?_OS_init:	
  1042                           ; 1 bytes @ 0x0
  1043                           
  1044  0070                     ?_OS_schedular:	
  1045                           ; 1 bytes @ 0x0
  1046                           
  1047  0070                     ?_timer0_reload:	
  1048                           ; 1 bytes @ 0x0
  1049                           
  1050  0070                     ?_T0_timer_mode_state:	
  1051                           ; 1 bytes @ 0x0
  1052                           
  1053  0070                     ?_MO_update:	
  1054                           ; 1 bytes @ 0x0
  1055                           
  1056  0070                     ?_SSD_update:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_switch_update:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_VC_update:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?_DSP_update:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?_MO_fire:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ?_SSD_schematic_init:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     ?_SSD_off:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     ?_SSD_on:	
  1078                           ; 1 bytes @ 0x0
  1079                           
  1080  0070                     ?_switches_Schematic_init:	
  1081                           ; 1 bytes @ 0x0
  1082                           
  1083  0070                     ?_timer0_set_prescaller:	
  1084                           ; 1 bytes @ 0x0
  1085                           
  1086  0070                     ?_timer0_set_mode:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     ?_timer0_ovf_setState:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092  0070                     ?_T0_counter_mode_state:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095  0070                     ?_sw_plus_handler:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0070                     ?_sw_minus_handler:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0070                     ?_sw_dust_handler:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0070                     ?_MO_setTargetAngel:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0070                     ?_VC_SpeedIncrease:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?_VC_SpeedDecrease:	
  1111                           ; 1 bytes @ 0x0
  1112                           
  1113  0070                     ?_LED_init:	
  1114                           ; 1 bytes @ 0x0
  1115                           
  1116  0070                     ?_LED_update:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ?_LED_create:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ?_LED_show:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ?_TMR1_setState:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ?_MO_fire_update:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ?_MO_softSwitch:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_MO_reduceHARM:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ?_main:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_OS_ISR:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ?_SSD_init:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_switch_init:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_switch_getState:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_SW_getPressedTime:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_VC_getSpeed:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?i1_timer0_reload:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ??i1_timer0_reload:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?i1_TMR1_setState:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ??i1_TMR1_setState:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170                           
  1171                           ; 1 bytes @ 0x0
  1172  0070                     	ds	1
  1173  0071                     i1timer0_reload@val:	
  1174                           
  1175                           ; 1 bytes @ 0x1
  1176  0071                     	ds	1
  1177  0072                     i1TMR1_setState@s:	
  1178                           
  1179                           ; 1 bytes @ 0x2
  1180  0072                     	ds	1
  1181  0073                     ??_MO_fire:	
  1182                           
  1183                           ; 1 bytes @ 0x3
  1184  0073                     	ds	1
  1185  0074                     ??_OS_ISR:	
  1186                           
  1187                           ; 1 bytes @ 0x4
  1188  0074                     	ds	6
  1189                           
  1190                           	psect	cstackBANK0
  1191  0020                     __pcstackBANK0:	
  1192  0020                     ?___fleq:	
  1193  0020                     ??_VC_init:	
  1194                           ; 1 bit 
  1195                           
  1196  0020                     ??_MO_init:	
  1197                           ; 1 bytes @ 0x0
  1198                           
  1199  0020                     ??_INDICATOR_init:	
  1200                           ; 1 bytes @ 0x0
  1201                           
  1202  0020                     ??_timer0_reload:	
  1203                           ; 1 bytes @ 0x0
  1204                           
  1205  0020                     ??_T0_timer_mode_state:	
  1206                           ; 1 bytes @ 0x0
  1207                           
  1208  0020                     ??_SSD_schematic_init:	
  1209                           ; 1 bytes @ 0x0
  1210                           
  1211  0020                     ??_switches_Schematic_init:	
  1212                           ; 1 bytes @ 0x0
  1213                           
  1214  0020                     ??_timer0_set_prescaller:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217  0020                     ??_timer0_set_mode:	
  1218                           ; 1 bytes @ 0x0
  1219                           
  1220  0020                     ??_timer0_ovf_setState:	
  1221                           ; 1 bytes @ 0x0
  1222                           
  1223  0020                     ??_T0_counter_mode_state:	
  1224                           ; 1 bytes @ 0x0
  1225                           
  1226  0020                     ??_MO_setTargetAngel:	
  1227                           ; 1 bytes @ 0x0
  1228                           
  1229  0020                     ??_VC_SpeedIncrease:	
  1230                           ; 1 bytes @ 0x0
  1231                           
  1232  0020                     ??_VC_SpeedDecrease:	
  1233                           ; 1 bytes @ 0x0
  1234                           
  1235  0020                     ??_LED_create:	
  1236                           ; 1 bytes @ 0x0
  1237                           
  1238  0020                     ??_TMR1_setState:	
  1239                           ; 1 bytes @ 0x0
  1240                           
  1241  0020                     ??_MO_softSwitch:	
  1242                           ; 1 bytes @ 0x0
  1243                           
  1244  0020                     ??_MO_reduceHARM:	
  1245                           ; 1 bytes @ 0x0
  1246                           
  1247  0020                     ?_TMR1_init:	
  1248                           ; 1 bytes @ 0x0
  1249                           
  1250  0020                     ??_VC_getSpeed:	
  1251                           ; 1 bytes @ 0x0
  1252                           
  1253  0020                     ?___bmul:	
  1254                           ; 1 bytes @ 0x0
  1255                           
  1256  0020                     ?___wmul:	
  1257                           ; 1 bytes @ 0x0
  1258                           
  1259  0020                     ?___lwmod:	
  1260                           ; 2 bytes @ 0x0
  1261                           
  1262  0020                     ?___fladd:	
  1263                           ; 2 bytes @ 0x0
  1264                           
  1265  0020                     ?___xxtofl:	
  1266                           ; 4 bytes @ 0x0
  1267                           
  1268  0020                     TMR1_init@m:	
  1269                           ; 4 bytes @ 0x0
  1270                           
  1271  0020                     ___bmul@multiplicand:	
  1272                           ; 1 bytes @ 0x0
  1273                           
  1274  0020                     ___wmul@multiplier:	
  1275                           ; 1 bytes @ 0x0
  1276                           
  1277  0020                     ___lwmod@divisor:	
  1278                           ; 2 bytes @ 0x0
  1279                           
  1280  0020                     ___fleq@ff1:	
  1281                           ; 2 bytes @ 0x0
  1282                           
  1283  0020                     ___fladd@b:	
  1284                           ; 4 bytes @ 0x0
  1285                           
  1286  0020                     ___xxtofl@val:	
  1287                           ; 4 bytes @ 0x0
  1288                           
  1289  0020                     LED_create@910:	
  1290                           ; 4 bytes @ 0x0
  1291                           
  1292                           
  1293                           ; 6 bytes @ 0x0
  1294  0020                     	ds	1
  1295  0021                     ??___bmul:	
  1296  0021                     timer0_reload@val:	
  1297                           ; 1 bytes @ 0x1
  1298                           
  1299  0021                     VC_getSpeed@ps:	
  1300                           ; 1 bytes @ 0x1
  1301                           
  1302  0021                     MO_setTargetAngel@angel:	
  1303                           ; 1 bytes @ 0x1
  1304                           
  1305  0021                     TMR1_init@s:	
  1306                           ; 1 bytes @ 0x1
  1307                           
  1308                           
  1309                           ; 1 bytes @ 0x1
  1310  0021                     	ds	1
  1311  0022                     ??_TMR1_init:	
  1312  0022                     T0_timer_mode_state@s:	
  1313                           ; 1 bytes @ 0x2
  1314                           
  1315  0022                     T0_counter_mode_state@s:	
  1316                           ; 1 bytes @ 0x2
  1317                           
  1318  0022                     timer0_set_prescaller@p:	
  1319                           ; 1 bytes @ 0x2
  1320                           
  1321  0022                     timer0_set_mode@m:	
  1322                           ; 1 bytes @ 0x2
  1323                           
  1324  0022                     timer0_ovf_setState@o:	
  1325                           ; 1 bytes @ 0x2
  1326                           
  1327  0022                     TMR1_setState@s:	
  1328                           ; 1 bytes @ 0x2
  1329                           
  1330  0022                     ___bmul@product:	
  1331                           ; 1 bytes @ 0x2
  1332                           
  1333  0022                     _VC_SpeedDecrease$501:	
  1334                           ; 1 bytes @ 0x2
  1335                           
  1336  0022                     ___wmul@multiplicand:	
  1337                           ; 2 bytes @ 0x2
  1338                           
  1339  0022                     ___lwmod@dividend:	
  1340                           ; 2 bytes @ 0x2
  1341                           
  1342                           
  1343                           ; 2 bytes @ 0x2
  1344  0022                     	ds	1
  1345  0023                     ___bmul@multiplier:	
  1346  0023                     _VC_SpeedIncrease$499:	
  1347                           ; 1 bytes @ 0x3
  1348                           
  1349                           
  1350                           ; 2 bytes @ 0x3
  1351  0023                     	ds	1
  1352  0024                     ??_switch_update:	
  1353  0024                     ?_SSD_display:	
  1354                           ; 1 bytes @ 0x4
  1355                           
  1356  0024                     ??_SSD_off:	
  1357                           ; 1 bytes @ 0x4
  1358                           
  1359  0024                     ??_SSD_on:	
  1360                           ; 1 bytes @ 0x4
  1361                           
  1362  0024                     ?_LED_setState:	
  1363                           ; 1 bytes @ 0x4
  1364                           
  1365  0024                     ??_LED_show:	
  1366                           ; 1 bytes @ 0x4
  1367                           
  1368  0024                     ?_SSD_setVal:	
  1369                           ; 1 bytes @ 0x4
  1370                           
  1371  0024                     ??_switch_init:	
  1372                           ; 1 bytes @ 0x4
  1373                           
  1374  0024                     ??_switch_getState:	
  1375                           ; 1 bytes @ 0x4
  1376                           
  1377  0024                     ??_SW_getPressedTime:	
  1378                           ; 1 bytes @ 0x4
  1379                           
  1380  0024                     ??___wmul:	
  1381                           ; 1 bytes @ 0x4
  1382                           
  1383  0024                     ??___lwmod:	
  1384                           ; 1 bytes @ 0x4
  1385                           
  1386  0024                     ??___xxtofl:	
  1387                           ; 1 bytes @ 0x4
  1388                           
  1389  0024                     SSD_setVal@val:	
  1390                           ; 1 bytes @ 0x4
  1391                           
  1392  0024                     SSD_display@data:	
  1393                           ; 1 bytes @ 0x4
  1394                           
  1395  0024                     LED_setState@state:	
  1396                           ; 1 bytes @ 0x4
  1397                           
  1398  0024                     TMR1_init@p:	
  1399                           ; 1 bytes @ 0x4
  1400                           
  1401  0024                     ___wmul@product:	
  1402                           ; 1 bytes @ 0x4
  1403                           
  1404  0024                     ___fleq@ff2:	
  1405                           ; 2 bytes @ 0x4
  1406                           
  1407  0024                     ___fladd@a:	
  1408                           ; 4 bytes @ 0x4
  1409                           
  1410  0024                     SSD_schematic_init@932:	
  1411                           ; 4 bytes @ 0x4
  1412                           
  1413                           
  1414                           ; 11 bytes @ 0x4
  1415  0024                     	ds	1
  1416  0025                     ??_SSD_display:	
  1417  0025                     ??_LED_setState:	
  1418                           ; 1 bytes @ 0x5
  1419                           
  1420  0025                     ??_SSD_setVal:	
  1421                           ; 1 bytes @ 0x5
  1422                           
  1423  0025                     SW_getPressedTime@sw:	
  1424                           ; 1 bytes @ 0x5
  1425                           
  1426  0025                     ___lwmod@counter:	
  1427                           ; 1 bytes @ 0x5
  1428                           
  1429                           
  1430                           ; 1 bytes @ 0x5
  1431  0025                     	ds	1
  1432  0026                     ?_TMR1_reload:	
  1433  0026                     switch_getState@sw:	
  1434                           ; 1 bytes @ 0x6
  1435                           
  1436  0026                     TMR1_reload@val:	
  1437                           ; 1 bytes @ 0x6
  1438                           
  1439                           
  1440                           ; 2 bytes @ 0x6
  1441  0026                     	ds	1
  1442  0027                     SSD_setVal@ssd:	
  1443  0027                     switch_getState@ret:	
  1444                           ; 1 bytes @ 0x7
  1445                           
  1446  0027                     LED_setState@led:	
  1447                           ; 1 bytes @ 0x7
  1448                           
  1449                           
  1450                           ; 1 bytes @ 0x7
  1451  0027                     	ds	1
  1452  0028                     ??_sw_plus_handler:	
  1453  0028                     ??_sw_minus_handler:	
  1454                           ; 1 bytes @ 0x8
  1455                           
  1456  0028                     ??_sw_dust_handler:	
  1457                           ; 1 bytes @ 0x8
  1458                           
  1459  0028                     ??_TMR1_reload:	
  1460                           ; 1 bytes @ 0x8
  1461                           
  1462  0028                     ??___fleq:	
  1463                           ; 1 bytes @ 0x8
  1464                           
  1465  0028                     ??___fladd:	
  1466                           ; 1 bytes @ 0x8
  1467                           
  1468  0028                     ___xxtofl@sign:	
  1469                           ; 1 bytes @ 0x8
  1470                           
  1471                           
  1472                           ; 1 bytes @ 0x8
  1473  0028                     	ds	1
  1474  0029                     ??_MO_update:	
  1475  0029                     ??_VC_update:	
  1476                           ; 1 bytes @ 0x9
  1477                           
  1478  0029                     ??_MO_fire_update:	
  1479                           ; 1 bytes @ 0x9
  1480                           
  1481  0029                     SSD_display@ssd:	
  1482                           ; 1 bytes @ 0x9
  1483                           
  1484  0029                     ___xxtofl@exp:	
  1485                           ; 1 bytes @ 0x9
  1486                           
  1487                           
  1488                           ; 1 bytes @ 0x9
  1489  0029                     	ds	1
  1490  002A                     ___xxtofl@arg:	
  1491                           
  1492                           ; 4 bytes @ 0xA
  1493  002A                     	ds	1
  1494  002B                     switch_update@sample_index:	
  1495  002B                     VC_update@sw_index:	
  1496                           ; 1 bytes @ 0xB
  1497                           
  1498                           
  1499                           ; 1 bytes @ 0xB
  1500  002B                     	ds	1
  1501  002C                     ?_frexp:	
  1502  002C                     switch_update@sw_index:	
  1503                           ; 4 bytes @ 0xC
  1504                           
  1505  002C                     frexp@value:	
  1506                           ; 1 bytes @ 0xC
  1507                           
  1508                           
  1509                           ; 4 bytes @ 0xC
  1510  002C                     	ds	2
  1511  002E                     ?___fldiv:	
  1512  002E                     ___fldiv@a:	
  1513                           ; 4 bytes @ 0xE
  1514                           
  1515                           
  1516                           ; 4 bytes @ 0xE
  1517  002E                     	ds	1
  1518  002F                     SSD_schematic_init@934:	
  1519                           
  1520                           ; 11 bytes @ 0xF
  1521  002F                     	ds	1
  1522  0030                     SSD_on@ssd:	
  1523  0030                     SSD_off@ssd:	
  1524                           ; 1 bytes @ 0x10
  1525                           
  1526  0030                     switch_init@index:	
  1527                           ; 1 bytes @ 0x10
  1528                           
  1529  0030                     ___fladd@signs:	
  1530                           ; 1 bytes @ 0x10
  1531                           
  1532  0030                     frexp@eptr:	
  1533                           ; 1 bytes @ 0x10
  1534                           
  1535                           
  1536                           ; 1 bytes @ 0x10
  1537  0030                     	ds	1
  1538  0031                     ??_SSD_update:	
  1539  0031                     ??_frexp:	
  1540                           ; 1 bytes @ 0x11
  1541                           
  1542  0031                     switch_init@sw:	
  1543                           ; 1 bytes @ 0x11
  1544                           
  1545  0031                     LED_show@led:	
  1546                           ; 1 bytes @ 0x11
  1547                           
  1548  0031                     ___fladd@aexp:	
  1549                           ; 1 bytes @ 0x11
  1550                           
  1551                           
  1552                           ; 1 bytes @ 0x11
  1553  0031                     	ds	1
  1554  0032                     ??_sw_init:	
  1555  0032                     ??_LED_init:	
  1556                           ; 1 bytes @ 0x12
  1557                           
  1558  0032                     ??_LED_update:	
  1559                           ; 1 bytes @ 0x12
  1560                           
  1561  0032                     ___fladd@bexp:	
  1562                           ; 1 bytes @ 0x12
  1563                           
  1564  0032                     ___fldiv@b:	
  1565                           ; 1 bytes @ 0x12
  1566                           
  1567                           
  1568                           ; 4 bytes @ 0x12
  1569  0032                     	ds	1
  1570  0033                     LED_update@index:	
  1571  0033                     ___fladd@grs:	
  1572                           ; 1 bytes @ 0x13
  1573                           
  1574                           
  1575                           ; 1 bytes @ 0x13
  1576  0033                     	ds	1
  1577  0034                     ??_DSP_update:	
  1578  0034                     _SSD_update$1965:	
  1579                           ; 1 bytes @ 0x14
  1580                           
  1581                           
  1582                           ; 1 bytes @ 0x14
  1583  0034                     	ds	1
  1584  0035                     SSD_update@index:	
  1585                           
  1586                           ; 1 bytes @ 0x15
  1587  0035                     	ds	1
  1588  0036                     ??___fldiv:	
  1589  0036                     DSP_update@led_state:	
  1590                           ; 1 bytes @ 0x16
  1591                           
  1592                           
  1593                           ; 1 bytes @ 0x16
  1594  0036                     	ds	1
  1595  0037                     _DSP_update$1966:	
  1596                           
  1597                           ; 1 bytes @ 0x17
  1598  0037                     	ds	1
  1599  0038                     ??_OS_schedular:	
  1600                           
  1601                           ; 1 bytes @ 0x18
  1602  0038                     	ds	2
  1603  003A                     SSD_schematic_init@936:	
  1604                           
  1605                           ; 11 bytes @ 0x1A
  1606  003A                     	ds	1
  1607  003B                     ___fldiv@rem:	
  1608                           
  1609                           ; 4 bytes @ 0x1B
  1610  003B                     	ds	3
  1611  003E                     LED_init@led:	
  1612                           
  1613                           ; 1 bytes @ 0x1E
  1614  003E                     	ds	1
  1615  003F                     ___fldiv@sign:	
  1616                           
  1617                           ; 1 bytes @ 0x1F
  1618  003F                     	ds	1
  1619  0040                     ___fldiv@new_exp:	
  1620                           
  1621                           ; 2 bytes @ 0x20
  1622  0040                     	ds	2
  1623  0042                     ___fldiv@grs:	
  1624                           
  1625                           ; 4 bytes @ 0x22
  1626  0042                     	ds	3
  1627  0045                     ??_SSD_init:	
  1628                           
  1629                           ; 1 bytes @ 0x25
  1630  0045                     	ds	1
  1631  0046                     ___fldiv@bexp:	
  1632                           
  1633                           ; 1 bytes @ 0x26
  1634  0046                     	ds	1
  1635  0047                     ___fldiv@aexp:	
  1636                           
  1637                           ; 1 bytes @ 0x27
  1638  0047                     	ds	1
  1639  0048                     ?___fltol:	
  1640  0048                     ___fltol@f1:	
  1641                           ; 4 bytes @ 0x28
  1642                           
  1643                           
  1644                           ; 4 bytes @ 0x28
  1645  0048                     	ds	4
  1646  004C                     ??___fltol:	
  1647                           
  1648                           ; 1 bytes @ 0x2C
  1649  004C                     	ds	5
  1650  0051                     ___fltol@sign1:	
  1651                           
  1652                           ; 1 bytes @ 0x31
  1653  0051                     	ds	1
  1654  0052                     ___fltol@exp1:	
  1655                           
  1656                           ; 1 bytes @ 0x32
  1657  0052                     	ds	1
  1658  0053                     ?_trunc:	
  1659  0053                     SSD_init@ssd:	
  1660                           ; 4 bytes @ 0x33
  1661                           
  1662  0053                     trunc@x:	
  1663                           ; 1 bytes @ 0x33
  1664                           
  1665                           
  1666                           ; 4 bytes @ 0x33
  1667  0053                     	ds	1
  1668  0054                     ??_DSP_init:	
  1669                           
  1670                           ; 1 bytes @ 0x34
  1671  0054                     	ds	3
  1672  0057                     ??_trunc:	
  1673                           
  1674                           ; 1 bytes @ 0x37
  1675  0057                     	ds	1
  1676  0058                     trunc@i:	
  1677                           
  1678                           ; 4 bytes @ 0x38
  1679  0058                     	ds	4
  1680  005C                     trunc@expon:	
  1681                           
  1682                           ; 2 bytes @ 0x3C
  1683  005C                     	ds	2
  1684  005E                     ?___flsub:	
  1685  005E                     ___flsub@a:	
  1686                           ; 4 bytes @ 0x3E
  1687                           
  1688                           
  1689                           ; 4 bytes @ 0x3E
  1690  005E                     	ds	4
  1691  0062                     ___flsub@b:	
  1692                           
  1693                           ; 4 bytes @ 0x42
  1694  0062                     	ds	4
  1695  0066                     ??___flsub:	
  1696  0066                     ?_round:	
  1697                           ; 1 bytes @ 0x46
  1698                           
  1699  0066                     round@x:	
  1700                           ; 4 bytes @ 0x46
  1701                           
  1702                           
  1703                           ; 4 bytes @ 0x46
  1704  0066                     	ds	4
  1705  006A                     ??_round:	
  1706  006A                     round@f:	
  1707                           ; 1 bytes @ 0x4A
  1708                           
  1709                           
  1710                           ; 4 bytes @ 0x4A
  1711  006A                     	ds	4
  1712  006E                     ?_timer0_init:	
  1713  006E                     timer0_init@m:	
  1714                           ; 1 bytes @ 0x4E
  1715                           
  1716                           
  1717                           ; 1 bytes @ 0x4E
  1718  006E                     	ds	1
  1719  006F                     timer0_init@o:	
  1720                           
  1721                           ; 1 bytes @ 0x4F
  1722  006F                     	ds	1
  1723  0070                     ??_OS_init:	
  1724  0070                     ??_main:	
  1725                           ; 1 bytes @ 0x50
  1726                           
  1727                           
  1728                           	psect	maintext
  1729  16B9                     __pmaintext:	
  1730                           ; 1 bytes @ 0x50
  1731 ;;
  1732 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1733 ;;
  1734 ;; *************** function _main *****************
  1735 ;; Defined at:
  1736 ;;		line 37 in file "MAIN_VACCUM.c"
  1737 ;; Parameters:    Size  Location     Type
  1738 ;;		None
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;		None
  1741 ;; Return value:  Size  Location     Type
  1742 ;;                  1    wreg      void 
  1743 ;; Registers used:
  1744 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1745 ;; Tracked objects:
  1746 ;;		On entry : B00/0
  1747 ;;		On exit  : 0/0
  1748 ;;		Unchanged: 0/0
  1749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1750 ;;      Params:         0       0       0       0       0
  1751 ;;      Locals:         0       0       0       0       0
  1752 ;;      Temps:          0       0       0       0       0
  1753 ;;      Totals:         0       0       0       0       0
  1754 ;;Total ram usage:        0 bytes
  1755 ;; Hardware stack levels required when called:    9
  1756 ;; This function calls:
  1757 ;;		_DSP_init
  1758 ;;		_INDICATOR_init
  1759 ;;		_MO_init
  1760 ;;		_OS_init
  1761 ;;		_OS_schedular
  1762 ;;		_VC_init
  1763 ;;		_sw_init
  1764 ;; This function is called by:
  1765 ;;		Startup code after reset
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           
  1770                           ;psect for function _main
  1771  16B9                     _main:	
  1772                           
  1773                           ;MAIN_VACCUM.c: 41:     sw_init();
  1774                           
  1775                           ;incstack = 0
  1776 ;; hardware stack exceeded
  1777                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1778  16B9  160A  118A  236A  160A  118A  	fcall	_sw_init
  1779                           
  1780                           ;MAIN_VACCUM.c: 42:     VC_init();
  1781  16BE  120A  118A  27F9  160A  118A  	fcall	_VC_init
  1782                           
  1783                           ;MAIN_VACCUM.c: 43:     DSP_init();
  1784  16C3  160A  118A  246E  160A  118A  	fcall	_DSP_init
  1785                           
  1786                           ;MAIN_VACCUM.c: 44:     MO_init();
  1787  16C8  160A  118A  25F5  160A  118A  	fcall	_MO_init
  1788                           
  1789                           ;MAIN_VACCUM.c: 45:     INDICATOR_init();
  1790  16CD  160A  118A  23B1  160A  118A  	fcall	_INDICATOR_init
  1791                           
  1792                           ;MAIN_VACCUM.c: 46:     OS_init();
  1793  16D2  160A  118A  23D7  160A  118A  	fcall	_OS_init
  1794  16D7                     l3555:	
  1795  16D7  1683               	bsf	3,5	;RP0=1, select bank1
  1796  16D8  1303               	bcf	3,6	;RP1=0, select bank1
  1797  16D9  085E               	movf	_Schedular_State^(0+128),w
  1798  16DA  1903               	btfsc	3,2
  1799  16DB  2ED7               	goto	l3555
  1800                           
  1801                           ;MAIN_VACCUM.c: 51:         OS_schedular();
  1802  16DC  160A  118A  2485  160A  118A  	fcall	_OS_schedular
  1803                           
  1804                           ;MAIN_VACCUM.c: 52:         Schedular_State = (0);
  1805  16E1  1683               	bsf	3,5	;RP0=1, select bank1
  1806  16E2  1303               	bcf	3,6	;RP1=0, select bank1
  1807  16E3  01DE               	clrf	_Schedular_State^(0+128)
  1808  16E4  2ED7               	goto	l3555
  1809  16E5                     __end_of_main:	
  1810                           
  1811                           	psect	text1
  1812  136A                     __ptext1:	
  1813 ;; *************** function _sw_init *****************
  1814 ;; Defined at:
  1815 ;;		line 58 in file "SWITCH.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1829 ;;      Params:         0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0
  1831 ;;      Temps:          0       0       0       0       0
  1832 ;;      Totals:         0       0       0       0       0
  1833 ;;Total ram usage:        0 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    5
  1836 ;; This function calls:
  1837 ;;		_switch_init
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function _sw_init
  1845  136A                     _sw_init:	
  1846                           
  1847                           ;SWITCH.c: 60:     switch_init(sw_plus);
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _sw_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1851  136A  3000               	movlw	0
  1852  136B  120A  158A  2661  160A  118A  	fcall	_switch_init
  1853                           
  1854                           ;SWITCH.c: 61:     switch_init(sw_minus);
  1855  1370  3001               	movlw	1
  1856  1371  120A  158A  2661  160A  118A  	fcall	_switch_init
  1857                           
  1858                           ;SWITCH.c: 62:     switch_init(sw_dust);
  1859  1376  3002               	movlw	2
  1860  1377  120A  158A  2661   	fcall	_switch_init
  1861  137A  0008               	return
  1862  137B                     __end_of_sw_init:	
  1863                           
  1864                           	psect	text2
  1865  0E61                     __ptext2:	
  1866 ;; *************** function _switch_init *****************
  1867 ;; Defined at:
  1868 ;;		line 34 in file "SWITCH.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  sw              1    wreg     enum E868
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  sw              1   17[BANK0 ] enum E868
  1873 ;;  index           1   16[BANK0 ] unsigned char 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      void 
  1876 ;; Registers used:
  1877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1883 ;;      Params:         0       0       0       0       0
  1884 ;;      Locals:         0       2       0       0       0
  1885 ;;      Temps:          0      12       0       0       0
  1886 ;;      Totals:         0      14       0       0       0
  1887 ;;Total ram usage:       14 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    4
  1890 ;; This function calls:
  1891 ;;		___bmul
  1892 ;;		_switches_Schematic_init
  1893 ;; This function is called by:
  1894 ;;		_sw_init
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           
  1899                           ;psect for function _switch_init
  1900  0E61                     _switch_init:	
  1901                           
  1902                           ;incstack = 0
  1903                           ; Regs used in _switch_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1904                           ;switch_init@sw stored from wreg
  1905  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0E63  00B1               	movwf	switch_init@sw
  1908                           
  1909                           ;SWITCH.c: 38:     switches_Schematic_init();
  1910  0E64  160A  118A  263C  120A  158A  	fcall	_switches_Schematic_init
  1911                           
  1912                           ;SWITCH.c: 41:     ((*(switches_data[sw].ctrl_reg)) = ((*(switches_data[sw].ctrl_reg) & 
      +                          (~(1 << switches_data[sw].pin_number))) | (((1)) << switches_data[sw].pin_number)));
  1913  0E69  3001               	movlw	1
  1914  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
  1915  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
  1916  0E6C  00A4               	movwf	??_switch_init
  1917  0E6D  300B               	movlw	11
  1918  0E6E  00A5               	movwf	??_switch_init+1
  1919  0E6F  0825               	movf	??_switch_init+1,w
  1920  0E70  00A0               	movwf	___bmul@multiplicand
  1921  0E71  0831               	movf	switch_init@sw,w
  1922  0E72  160A  118A  239E  120A  158A  	fcall	___bmul
  1923  0E77  3E94               	addlw	(low ((_switches_data| (0+256)+4)))& (0+255)
  1924  0E78  0084               	movwf	4
  1925  0E79  1783               	bsf	3,7	;select IRP bank3
  1926  0E7A  0A00               	incf	0,w
  1927  0E7B  1283               	bcf	3,5	;RP0=0, select bank0
  1928  0E7C  1303               	bcf	3,6	;RP1=0, select bank0
  1929  0E7D  2E80               	goto	u3764
  1930  0E7E                     u3765:	
  1931  0E7E  1003               	clrc
  1932  0E7F  0DA4               	rlf	??_switch_init,f
  1933  0E80                     u3764:	
  1934  0E80  3EFF               	addlw	-1
  1935  0E81  1D03               	skipz
  1936  0E82  2E7E               	goto	u3765
  1937  0E83  300B               	movlw	11
  1938  0E84  00A6               	movwf	??_switch_init+2
  1939  0E85  0826               	movf	??_switch_init+2,w
  1940  0E86  00A0               	movwf	___bmul@multiplicand
  1941  0E87  0831               	movf	switch_init@sw,w
  1942  0E88  160A  118A  239E  120A  158A  	fcall	___bmul
  1943  0E8D  3E90               	addlw	(low (_switches_data| (0+256)))& (0+255)
  1944  0E8E  0084               	movwf	4
  1945  0E8F  1783               	bsf	3,7	;select IRP bank3
  1946  0E90  0800               	movf	0,w
  1947  0E91  1283               	bcf	3,5	;RP0=0, select bank0
  1948  0E92  1303               	bcf	3,6	;RP1=0, select bank0
  1949  0E93  00A7               	movwf	??_switch_init+3
  1950  0E94  0A84               	incf	4,f
  1951  0E95  0800               	movf	0,w
  1952  0E96  00A8               	movwf	??_switch_init+4
  1953  0E97  0827               	movf	??_switch_init+3,w
  1954  0E98  0084               	movwf	4
  1955  0E99  1783               	bsf	3,7
  1956  0E9A  1C28               	btfss	??_switch_init+4,0
  1957  0E9B  1383               	bcf	3,7
  1958  0E9C  0800               	movf	0,w
  1959  0E9D  00A9               	movwf	??_switch_init+5
  1960  0E9E  3001               	movlw	1
  1961  0E9F  00AA               	movwf	??_switch_init+6
  1962  0EA0  300B               	movlw	11
  1963  0EA1  00AB               	movwf	??_switch_init+7
  1964  0EA2  082B               	movf	??_switch_init+7,w
  1965  0EA3  00A0               	movwf	___bmul@multiplicand
  1966  0EA4  0831               	movf	switch_init@sw,w
  1967  0EA5  160A  118A  239E  120A  158A  	fcall	___bmul
  1968  0EAA  3E94               	addlw	(low ((_switches_data| (0+256)+4)))& (0+255)
  1969  0EAB  0084               	movwf	4
  1970  0EAC  1783               	bsf	3,7	;select IRP bank3
  1971  0EAD  0A00               	incf	0,w
  1972  0EAE  1283               	bcf	3,5	;RP0=0, select bank0
  1973  0EAF  1303               	bcf	3,6	;RP1=0, select bank0
  1974  0EB0  2EB3               	goto	u3774
  1975  0EB1                     u3775:	
  1976  0EB1  1003               	clrc
  1977  0EB2  0DAA               	rlf	??_switch_init+6,f
  1978  0EB3                     u3774:	
  1979  0EB3  3EFF               	addlw	-1
  1980  0EB4  1D03               	skipz
  1981  0EB5  2EB1               	goto	u3775
  1982  0EB6  082A               	movf	??_switch_init+6,w
  1983  0EB7  3AFF               	xorlw	255
  1984  0EB8  0529               	andwf	??_switch_init+5,w
  1985  0EB9  0424               	iorwf	??_switch_init,w
  1986  0EBA  00AC               	movwf	??_switch_init+8
  1987  0EBB  300B               	movlw	11
  1988  0EBC  00AD               	movwf	??_switch_init+9
  1989  0EBD  082D               	movf	??_switch_init+9,w
  1990  0EBE  00A0               	movwf	___bmul@multiplicand
  1991  0EBF  0831               	movf	switch_init@sw,w
  1992  0EC0  160A  118A  239E  120A  158A  	fcall	___bmul
  1993  0EC5  3E90               	addlw	(low (_switches_data| (0+256)))& (0+255)
  1994  0EC6  0084               	movwf	4
  1995  0EC7  1783               	bsf	3,7	;select IRP bank3
  1996  0EC8  0800               	movf	0,w
  1997  0EC9  1283               	bcf	3,5	;RP0=0, select bank0
  1998  0ECA  1303               	bcf	3,6	;RP1=0, select bank0
  1999  0ECB  00AE               	movwf	??_switch_init+10
  2000  0ECC  0A84               	incf	4,f
  2001  0ECD  0800               	movf	0,w
  2002  0ECE  00AF               	movwf	??_switch_init+11
  2003  0ECF  082E               	movf	??_switch_init+10,w
  2004  0ED0  0084               	movwf	4
  2005  0ED1  1783               	bsf	3,7
  2006  0ED2  1C2F               	btfss	??_switch_init+11,0
  2007  0ED3  1383               	bcf	3,7
  2008  0ED4  082C               	movf	??_switch_init+8,w
  2009  0ED5  0080               	movwf	0
  2010                           
  2011                           ;SWITCH.c: 45:     for (index = 0; index < (2);index++){
  2012  0ED6  01B0               	clrf	switch_init@index
  2013  0ED7                     l3487:	
  2014                           
  2015                           ;SWITCH.c: 47:         switches_data[sw].samples[index] = ((1));
  2016  0ED7  300B               	movlw	11
  2017  0ED8  00A4               	movwf	??_switch_init
  2018  0ED9  0824               	movf	??_switch_init,w
  2019  0EDA  00A0               	movwf	___bmul@multiplicand
  2020  0EDB  0831               	movf	switch_init@sw,w
  2021  0EDC  160A  118A  239E  120A  158A  	fcall	___bmul
  2022  0EE1  3E95               	addlw	(low ((_switches_data| (0+256)+5)))& (0+255)
  2023  0EE2  1283               	bcf	3,5	;RP0=0, select bank0
  2024  0EE3  1303               	bcf	3,6	;RP1=0, select bank0
  2025  0EE4  0730               	addwf	switch_init@index,w
  2026  0EE5  00A5               	movwf	??_switch_init+1
  2027  0EE6  0825               	movf	??_switch_init+1,w
  2028  0EE7  0084               	movwf	4
  2029  0EE8  1783               	bsf	3,7	;select IRP bank3
  2030  0EE9  0180               	clrf	0
  2031  0EEA  0A80               	incf	0,f
  2032                           
  2033                           ;SWITCH.c: 48:     }
  2034  0EEB  3001               	movlw	1
  2035  0EEC  00A4               	movwf	??_switch_init
  2036  0EED  0824               	movf	??_switch_init,w
  2037  0EEE  07B0               	addwf	switch_init@index,f
  2038  0EEF  3002               	movlw	2
  2039  0EF0  0230               	subwf	switch_init@index,w
  2040  0EF1  1C03               	skipc
  2041  0EF2  2ED7               	goto	l3487
  2042                           
  2043                           ;SWITCH.c: 50:     switches_data[sw].state = sw_released;
  2044  0EF3  300B               	movlw	11
  2045  0EF4  00A4               	movwf	??_switch_init
  2046  0EF5  0824               	movf	??_switch_init,w
  2047  0EF6  00A0               	movwf	___bmul@multiplicand
  2048  0EF7  0831               	movf	switch_init@sw,w
  2049  0EF8  160A  118A  239E  120A  158A  	fcall	___bmul
  2050  0EFD  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2051  0EFE  0084               	movwf	4
  2052  0EFF  1783               	bsf	3,7	;select IRP bank3
  2053  0F00  0180               	clrf	0
  2054                           
  2055                           ;SWITCH.c: 54:     switches_data[sw].pressed_time = (0);
  2056  0F01  300B               	movlw	11
  2057  0F02  1283               	bcf	3,5	;RP0=0, select bank0
  2058  0F03  1303               	bcf	3,6	;RP1=0, select bank0
  2059  0F04  00A4               	movwf	??_switch_init
  2060  0F05  0824               	movf	??_switch_init,w
  2061  0F06  00A0               	movwf	___bmul@multiplicand
  2062  0F07  0831               	movf	switch_init@sw,w
  2063  0F08  160A  118A  239E  120A  158A  	fcall	___bmul
  2064  0F0D  3E9A               	addlw	(low ((_switches_data| (0+256)+10)))& (0+255)
  2065  0F0E  0084               	movwf	4
  2066  0F0F  1783               	bsf	3,7	;select IRP bank3
  2067  0F10  0180               	clrf	0
  2068                           
  2069                           ;SWITCH.c: 55:     switches_data[sw].pressed_counter = (0);
  2070  0F11  300B               	movlw	11
  2071  0F12  1283               	bcf	3,5	;RP0=0, select bank0
  2072  0F13  1303               	bcf	3,6	;RP1=0, select bank0
  2073  0F14  00A4               	movwf	??_switch_init
  2074  0F15  0824               	movf	??_switch_init,w
  2075  0F16  00A0               	movwf	___bmul@multiplicand
  2076  0F17  0831               	movf	switch_init@sw,w
  2077  0F18  160A  118A  239E   	fcall	___bmul
  2078  0F1B  3E98               	addlw	(low ((_switches_data| (0+256)+8)))& (0+255)
  2079  0F1C  0084               	movwf	4
  2080  0F1D  1783               	bsf	3,7	;select IRP bank3
  2081  0F1E  0180               	clrf	0
  2082  0F1F  0A84               	incf	4,f
  2083  0F20  0180               	clrf	0
  2084  0F21  0008               	return
  2085  0F22                     __end_of_switch_init:	
  2086                           
  2087                           	psect	text3
  2088  163C                     __ptext3:	
  2089 ;; *************** function _switches_Schematic_init *****************
  2090 ;; Defined at:
  2091 ;;		line 153 in file "SWITCH.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2105 ;;      Params:         0       0       0       0       0
  2106 ;;      Locals:         0       0       0       0       0
  2107 ;;      Temps:          0       1       0       0       0
  2108 ;;      Totals:         0       1       0       0       0
  2109 ;;Total ram usage:        1 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    3
  2112 ;; This function calls:
  2113 ;;		Nothing
  2114 ;; This function is called by:
  2115 ;;		_switch_init
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           
  2120                           ;psect for function _switches_Schematic_init
  2121  163C                     _switches_Schematic_init:	
  2122                           
  2123                           ;SWITCH.c: 157:     switches_data[sw_plus].ctrl_reg = &(((*((volatile tRegister *)(0x86)
      +                          )).Reg));
  2124                           
  2125                           ;incstack = 0
  2126                           ; Regs used in _switches_Schematic_init: [wreg+status,2]
  2127  163C  3000               	movlw	0
  2128  163D  1683               	bsf	3,5	;RP0=1, select bank3
  2129  163E  1703               	bsf	3,6	;RP1=1, select bank3
  2130  163F  0091               	movwf	(_switches_data+1)^(0+384)
  2131  1640  3086               	movlw	134
  2132  1641  0090               	movwf	_switches_data^(0+384)
  2133                           
  2134                           ;SWITCH.c: 158:     switches_data[sw_plus].data_reg = &(((*((volatile tRegister *)(0x06)
      +                          )).Reg));
  2135  1642  3000               	movlw	0
  2136  1643  0093               	movwf	((low ((_switches_data| (0+256)+2))+1))^(0+128)
  2137  1644  3006               	movlw	6
  2138  1645  0092               	movwf	(low ((_switches_data| (0+256)+2)))^(0+128)
  2139                           
  2140                           ;SWITCH.c: 159:     switches_data[sw_plus].pin_number = ((0));
  2141  1646  0194               	clrf	(_switches_data^(0+384)+4)
  2142                           
  2143                           ;SWITCH.c: 163:     switches_data[sw_minus].ctrl_reg = &(((*((volatile tRegister *)(0x86
      +                          ))).Reg));
  2144  1647  3000               	movlw	0
  2145  1648  009C               	movwf	((low ((_switches_data| (0+256)+11))+1))^(0+128)
  2146  1649  3086               	movlw	134
  2147  164A  009B               	movwf	(low ((_switches_data| (0+256)+11)))^(0+128)
  2148                           
  2149                           ;SWITCH.c: 164:     switches_data[sw_minus].data_reg = &(((*((volatile tRegister *)(0x06
      +                          ))).Reg));
  2150  164B  3000               	movlw	0
  2151  164C  009E               	movwf	((low ((_switches_data| (0+256)+13))+1))^(0+128)
  2152  164D  3006               	movlw	6
  2153  164E  009D               	movwf	(low ((_switches_data| (0+256)+13)))^(0+128)
  2154                           
  2155                           ;SWITCH.c: 165:     switches_data[sw_minus].pin_number = ((1));
  2156  164F  019F               	clrf	(_switches_data^(0+384)+15)
  2157  1650  0A9F               	incf	(_switches_data^(0+384)+15),f
  2158                           
  2159                           ;SWITCH.c: 169:     switches_data[sw_dust].ctrl_reg = &(((*((volatile tRegister *)(0x86)
      +                          )).Reg));
  2160  1651  3000               	movlw	0
  2161  1652  00A7               	movwf	((low ((_switches_data| (0+256)+22))+1))^(0+128)
  2162  1653  3086               	movlw	134
  2163  1654  00A6               	movwf	(low ((_switches_data| (0+256)+22)))^(0+128)
  2164                           
  2165                           ;SWITCH.c: 170:     switches_data[sw_dust].data_reg = &(((*((volatile tRegister *)(0x06)
      +                          )).Reg));
  2166  1655  3000               	movlw	0
  2167  1656  00A9               	movwf	((low ((_switches_data| (0+256)+24))+1))^(0+128)
  2168  1657  3006               	movlw	6
  2169  1658  00A8               	movwf	(low ((_switches_data| (0+256)+24)))^(0+128)
  2170                           
  2171                           ;SWITCH.c: 171:     switches_data[sw_dust].pin_number = ((2));
  2172  1659  3002               	movlw	2
  2173  165A  1283               	bcf	3,5	;RP0=0, select bank0
  2174  165B  1303               	bcf	3,6	;RP1=0, select bank0
  2175  165C  00A0               	movwf	??_switches_Schematic_init
  2176  165D  0820               	movf	??_switches_Schematic_init,w
  2177  165E  1683               	bsf	3,5	;RP0=1, select bank3
  2178  165F  1703               	bsf	3,6	;RP1=1, select bank3
  2179  1660  00AA               	movwf	(_switches_data^(0+384)+26)
  2180  1661  0008               	return
  2181  1662                     __end_of_switches_Schematic_init:	
  2182                           
  2183                           	psect	text4
  2184  07F9                     __ptext4:	
  2185 ;; *************** function _VC_init *****************
  2186 ;; Defined at:
  2187 ;;		line 39 in file "VACCUM.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		None
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2201 ;;      Params:         0       0       0       0       0
  2202 ;;      Locals:         0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0
  2204 ;;      Totals:         0       0       0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    3
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function _VC_init
  2217  07F9                     _VC_init:	
  2218                           
  2219                           ;VACCUM.c: 43:     VC_current_speed = MID_SPEED;
  2220                           
  2221                           ;incstack = 0
  2222                           ; Regs used in _VC_init: []
  2223  07F9  01FB               	clrf	_VC_current_speed
  2224  07FA  0AFB               	incf	_VC_current_speed,f
  2225  07FB  0008               	return
  2226  07FC                     __end_of_VC_init:	
  2227                           
  2228                           	psect	text5
  2229  1485                     __ptext5:	
  2230 ;; *************** function _OS_schedular *****************
  2231 ;; Defined at:
  2232 ;;		line 74 in file "MAIN_VACCUM.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         0       0       0       0       0
  2247 ;;      Locals:         0       0       0       0       0
  2248 ;;      Temps:          0       0       0       0       0
  2249 ;;      Totals:         0       0       0       0       0
  2250 ;;Total ram usage:        0 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    7
  2253 ;; This function calls:
  2254 ;;		_DSP_update
  2255 ;;		_MO_update
  2256 ;;		_SSD_update
  2257 ;;		_VC_update
  2258 ;;		_switch_update
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _OS_schedular
  2266  1485                     _OS_schedular:	
  2267                           
  2268                           ;MAIN_VACCUM.c: 76:     MO_update();
  2269                           
  2270                           ;incstack = 0
  2271                           ; Regs used in _OS_schedular: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2272  1485  160A  118A  2504  160A  118A  	fcall	_MO_update
  2273                           
  2274                           ;MAIN_VACCUM.c: 77:     SSD_update();
  2275  148A  120A  158A  21B4  160A  118A  	fcall	_SSD_update
  2276                           
  2277                           ;MAIN_VACCUM.c: 78:     switch_update();
  2278  148F  120A  118A  2052  160A  118A  	fcall	_switch_update
  2279                           
  2280                           ;MAIN_VACCUM.c: 79:     VC_update();
  2281  1494  120A  158A  2023  160A  118A  	fcall	_VC_update
  2282                           
  2283                           ;MAIN_VACCUM.c: 80:     DSP_update();
  2284  1499  120A  118A  276A   	fcall	_DSP_update
  2285  149C  0008               	return
  2286  149D                     __end_of_OS_schedular:	
  2287                           
  2288                           	psect	text6
  2289  0052                     __ptext6:	
  2290 ;; *************** function _switch_update *****************
  2291 ;; Defined at:
  2292 ;;		line 78 in file "SWITCH.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;		None
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  sw_index        1   12[BANK0 ] unsigned char 
  2297 ;;  sample_index    1   11[BANK0 ] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;                  1    wreg      void 
  2300 ;; Registers used:
  2301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/0
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2307 ;;      Params:         0       0       0       0       0
  2308 ;;      Locals:         0       2       0       0       0
  2309 ;;      Temps:          0       7       0       0       0
  2310 ;;      Totals:         0       9       0       0       0
  2311 ;;Total ram usage:        9 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    4
  2314 ;; This function calls:
  2315 ;;		___bmul
  2316 ;; This function is called by:
  2317 ;;		_OS_schedular
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           
  2322                           ;psect for function _switch_update
  2323  0052                     _switch_update:	
  2324                           
  2325                           ;SWITCH.c: 82:     tByte sample_index = (0);
  2326                           
  2327                           ;incstack = 0
  2328                           ; Regs used in _switch_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2329  0052  1283               	bcf	3,5	;RP0=0, select bank0
  2330  0053  1303               	bcf	3,6	;RP1=0, select bank0
  2331  0054  01AB               	clrf	switch_update@sample_index
  2332                           
  2333                           ;SWITCH.c: 84:     sw_update_counter = sw_update_counter + (10);
  2334  0055  1683               	bsf	3,5	;RP0=1, select bank1
  2335  0056  1303               	bcf	3,6	;RP1=0, select bank1
  2336  0057  085C               	movf	switch_update@sw_update_counter^(0+128),w
  2337  0058  3E0A               	addlw	10
  2338  0059  1283               	bcf	3,5	;RP0=0, select bank0
  2339  005A  1303               	bcf	3,6	;RP1=0, select bank0
  2340  005B  00A4               	movwf	??_switch_update
  2341  005C  0824               	movf	??_switch_update,w
  2342  005D  1683               	bsf	3,5	;RP0=1, select bank1
  2343  005E  1303               	bcf	3,6	;RP1=0, select bank1
  2344  005F  00DC               	movwf	switch_update@sw_update_counter^(0+128)
  2345                           
  2346                           ;SWITCH.c: 88:     if(sw_update_counter == (20)){
  2347  0060  3014               	movlw	20
  2348  0061  065C               	xorwf	switch_update@sw_update_counter^(0+128),w
  2349  0062  1D03               	btfss	3,2
  2350  0063  0008               	return
  2351                           
  2352                           ;SWITCH.c: 90:         sw_update_counter = (0);
  2353  0064  01DC               	clrf	switch_update@sw_update_counter^(0+128)
  2354                           
  2355                           ;SWITCH.c: 92:         for(sw_index = sw_plus; sw_index < (3); sw_index++){
  2356  0065  1283               	bcf	3,5	;RP0=0, select bank0
  2357  0066  1303               	bcf	3,6	;RP1=0, select bank0
  2358  0067  01AC               	clrf	switch_update@sw_index
  2359  0068                     l3351:	
  2360                           
  2361                           ;SWITCH.c: 95:             for(sample_index = 0; sample_index < (2) - 1; sample_index++)
      +                          {
  2362  0068  01AB               	clrf	switch_update@sample_index
  2363  0069                     l3357:	
  2364                           
  2365                           ;SWITCH.c: 96:                 switches_data[sw_index].samples[sample_index] = switches_
      +                          data[sw_index].samples[sample_index + 1];
  2366  0069  300B               	movlw	11
  2367  006A  00A4               	movwf	??_switch_update
  2368  006B  0824               	movf	??_switch_update,w
  2369  006C  00A0               	movwf	___bmul@multiplicand
  2370  006D  082C               	movf	switch_update@sw_index,w
  2371  006E  160A  118A  239E  120A  118A  	fcall	___bmul
  2372  0073  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2373  0074  1283               	bcf	3,5	;RP0=0, select bank0
  2374  0075  1303               	bcf	3,6	;RP1=0, select bank0
  2375  0076  072B               	addwf	switch_update@sample_index,w
  2376  0077  00A5               	movwf	??_switch_update+1
  2377  0078  0825               	movf	??_switch_update+1,w
  2378  0079  0084               	movwf	4
  2379  007A  1783               	bsf	3,7	;select IRP bank3
  2380  007B  0800               	movf	0,w
  2381  007C  00A6               	movwf	??_switch_update+2
  2382  007D  300B               	movlw	11
  2383  007E  00A7               	movwf	??_switch_update+3
  2384  007F  0827               	movf	??_switch_update+3,w
  2385  0080  00A0               	movwf	___bmul@multiplicand
  2386  0081  082C               	movf	switch_update@sw_index,w
  2387  0082  160A  118A  239E  120A  118A  	fcall	___bmul
  2388  0087  3E95               	addlw	(low ((_switches_data| (0+256)+5)))& (0+255)
  2389  0088  1283               	bcf	3,5	;RP0=0, select bank0
  2390  0089  1303               	bcf	3,6	;RP1=0, select bank0
  2391  008A  072B               	addwf	switch_update@sample_index,w
  2392  008B  00A8               	movwf	??_switch_update+4
  2393  008C  0828               	movf	??_switch_update+4,w
  2394  008D  0084               	movwf	4
  2395  008E  0826               	movf	??_switch_update+2,w
  2396  008F  1783               	bsf	3,7	;select IRP bank3
  2397  0090  0080               	movwf	0
  2398                           
  2399                           ;SWITCH.c: 97:             }
  2400  0091  3001               	movlw	1
  2401  0092  00A4               	movwf	??_switch_update
  2402  0093  0824               	movf	??_switch_update,w
  2403  0094  07AB               	addwf	switch_update@sample_index,f
  2404  0095  082B               	movf	switch_update@sample_index,w
  2405  0096  1903               	btfsc	3,2
  2406  0097  2869               	goto	l3357
  2407                           
  2408                           ;SWITCH.c: 100:             switches_data[sw_index].samples[(2) - 1] = ((*(switches_data
      +                          [sw_index].data_reg) >> switches_data[sw_index].pin_number) & (1));
  2409  0098  300B               	movlw	11
  2410  0099  00A4               	movwf	??_switch_update
  2411  009A  0824               	movf	??_switch_update,w
  2412  009B  00A0               	movwf	___bmul@multiplicand
  2413  009C  082C               	movf	switch_update@sw_index,w
  2414  009D  160A  118A  239E  120A  118A  	fcall	___bmul
  2415  00A2  3E92               	addlw	(low ((_switches_data| (0+256)+2)))& (0+255)
  2416  00A3  0084               	movwf	4
  2417  00A4  1783               	bsf	3,7	;select IRP bank3
  2418  00A5  0800               	movf	0,w
  2419  00A6  1283               	bcf	3,5	;RP0=0, select bank0
  2420  00A7  1303               	bcf	3,6	;RP1=0, select bank0
  2421  00A8  00A5               	movwf	??_switch_update+1
  2422  00A9  0A84               	incf	4,f
  2423  00AA  0800               	movf	0,w
  2424  00AB  00A6               	movwf	??_switch_update+2
  2425  00AC  0825               	movf	??_switch_update+1,w
  2426  00AD  0084               	movwf	4
  2427  00AE  1783               	bsf	3,7
  2428  00AF  1C26               	btfss	??_switch_update+2,0
  2429  00B0  1383               	bcf	3,7
  2430  00B1  0800               	movf	0,w
  2431  00B2  00A7               	movwf	??_switch_update+3
  2432  00B3  300B               	movlw	11
  2433  00B4  00A8               	movwf	??_switch_update+4
  2434  00B5  0828               	movf	??_switch_update+4,w
  2435  00B6  00A0               	movwf	___bmul@multiplicand
  2436  00B7  082C               	movf	switch_update@sw_index,w
  2437  00B8  160A  118A  239E  120A  118A  	fcall	___bmul
  2438  00BD  3E94               	addlw	(low ((_switches_data| (0+256)+4)))& (0+255)
  2439  00BE  0084               	movwf	4
  2440  00BF  1783               	bsf	3,7	;select IRP bank3
  2441  00C0  0A00               	incf	0,w
  2442  00C1  1283               	bcf	3,5	;RP0=0, select bank0
  2443  00C2  1303               	bcf	3,6	;RP1=0, select bank0
  2444  00C3  28C6               	goto	u3514
  2445  00C4                     u3515:	
  2446  00C4  1003               	clrc
  2447  00C5  0CA7               	rrf	??_switch_update+3,f
  2448  00C6                     u3514:	
  2449  00C6  3EFF               	addlw	-1
  2450  00C7  1D03               	skipz
  2451  00C8  28C4               	goto	u3515
  2452  00C9  0827               	movf	??_switch_update+3,w
  2453  00CA  3901               	andlw	1
  2454  00CB  00A9               	movwf	??_switch_update+5
  2455  00CC  300B               	movlw	11
  2456  00CD  00AA               	movwf	??_switch_update+6
  2457  00CE  082A               	movf	??_switch_update+6,w
  2458  00CF  00A0               	movwf	___bmul@multiplicand
  2459  00D0  082C               	movf	switch_update@sw_index,w
  2460  00D1  160A  118A  239E  120A  118A  	fcall	___bmul
  2461  00D6  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2462  00D7  0084               	movwf	4
  2463  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  2464  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  2465  00DA  0829               	movf	??_switch_update+5,w
  2466  00DB  1783               	bsf	3,7	;select IRP bank3
  2467  00DC  0080               	movwf	0
  2468                           
  2469                           ;SWITCH.c: 105:             if(switches_data[sw_index].state == sw_released &&
  2470  00DD  300B               	movlw	11
  2471  00DE  00A4               	movwf	??_switch_update
  2472  00DF  0824               	movf	??_switch_update,w
  2473  00E0  00A0               	movwf	___bmul@multiplicand
  2474  00E1  082C               	movf	switch_update@sw_index,w
  2475  00E2  160A  118A  239E  120A  118A  	fcall	___bmul
  2476  00E7  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2477  00E8  0084               	movwf	4
  2478  00E9  1783               	bsf	3,7	;select IRP bank3
  2479  00EA  0800               	movf	0,w
  2480  00EB  1D03               	btfss	3,2
  2481  00EC  2923               	goto	l3371
  2482  00ED  300B               	movlw	11
  2483  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  2484  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  2485  00F0  00A4               	movwf	??_switch_update
  2486  00F1  0824               	movf	??_switch_update,w
  2487  00F2  00A0               	movwf	___bmul@multiplicand
  2488  00F3  082C               	movf	switch_update@sw_index,w
  2489  00F4  160A  118A  239E  120A  118A  	fcall	___bmul
  2490  00F9  3E95               	addlw	(low ((_switches_data| (0+256)+5)))& (0+255)
  2491  00FA  0084               	movwf	4
  2492  00FB  1783               	bsf	3,7	;select IRP bank3
  2493  00FC  0800               	movf	0,w
  2494  00FD  1D03               	btfss	3,2
  2495  00FE  2923               	goto	l3371
  2496  00FF  300B               	movlw	11
  2497  0100  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0101  1303               	bcf	3,6	;RP1=0, select bank0
  2499  0102  00A4               	movwf	??_switch_update
  2500  0103  0824               	movf	??_switch_update,w
  2501  0104  00A0               	movwf	___bmul@multiplicand
  2502  0105  082C               	movf	switch_update@sw_index,w
  2503  0106  160A  118A  239E  120A  118A  	fcall	___bmul
  2504  010B  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2505  010C  0084               	movwf	4
  2506  010D  1783               	bsf	3,7	;select IRP bank3
  2507  010E  0800               	movf	0,w
  2508  010F  1D03               	btfss	3,2
  2509  0110  2923               	goto	l3371
  2510                           
  2511                           ;SWITCH.c: 109:             {;SWITCH.c: 110:                 switches_data[sw_index].sta
      +                          te = sw_prepressed;
  2512  0111  300B               	movlw	11
  2513  0112  1283               	bcf	3,5	;RP0=0, select bank0
  2514  0113  1303               	bcf	3,6	;RP1=0, select bank0
  2515  0114  00A4               	movwf	??_switch_update
  2516  0115  0824               	movf	??_switch_update,w
  2517  0116  00A0               	movwf	___bmul@multiplicand
  2518  0117  082C               	movf	switch_update@sw_index,w
  2519  0118  160A  118A  239E  120A  118A  	fcall	___bmul
  2520  011D  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2521  011E  0084               	movwf	4
  2522  011F  1783               	bsf	3,7	;select IRP bank3
  2523  0120  0180               	clrf	0
  2524  0121  0A80               	incf	0,f
  2525                           
  2526                           ;SWITCH.c: 111:             }
  2527  0122  2A8B               	goto	l3401
  2528  0123                     l3371:	
  2529  0123  300B               	movlw	11
  2530  0124  1283               	bcf	3,5	;RP0=0, select bank0
  2531  0125  1303               	bcf	3,6	;RP1=0, select bank0
  2532  0126  00A4               	movwf	??_switch_update
  2533  0127  0824               	movf	??_switch_update,w
  2534  0128  00A0               	movwf	___bmul@multiplicand
  2535  0129  082C               	movf	switch_update@sw_index,w
  2536  012A  160A  118A  239E  120A  118A  	fcall	___bmul
  2537  012F  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2538  0130  0084               	movwf	4
  2539  0131  1783               	bsf	3,7	;select IRP bank3
  2540  0132  0300               	decf	0,w
  2541  0133  1D03               	btfss	3,2
  2542  0134  295D               	goto	l3377
  2543  0135  300B               	movlw	11
  2544  0136  1283               	bcf	3,5	;RP0=0, select bank0
  2545  0137  1303               	bcf	3,6	;RP1=0, select bank0
  2546  0138  00A4               	movwf	??_switch_update
  2547  0139  0824               	movf	??_switch_update,w
  2548  013A  00A0               	movwf	___bmul@multiplicand
  2549  013B  082C               	movf	switch_update@sw_index,w
  2550  013C  160A  118A  239E  120A  118A  	fcall	___bmul
  2551  0141  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2552  0142  0084               	movwf	4
  2553  0143  1783               	bsf	3,7	;select IRP bank3
  2554  0144  0800               	movf	0,w
  2555  0145  1D03               	btfss	3,2
  2556  0146  295D               	goto	l3377
  2557                           
  2558                           ;SWITCH.c: 114:             {;SWITCH.c: 115:                 switches_data[sw_index].sta
      +                          te = sw_pressed;
  2559  0147  3002               	movlw	2
  2560  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2561  0149  1303               	bcf	3,6	;RP1=0, select bank0
  2562  014A  00A4               	movwf	??_switch_update
  2563  014B  300B               	movlw	11
  2564  014C  00A5               	movwf	??_switch_update+1
  2565  014D  0825               	movf	??_switch_update+1,w
  2566  014E  00A0               	movwf	___bmul@multiplicand
  2567  014F  082C               	movf	switch_update@sw_index,w
  2568  0150  160A  118A  239E  120A  118A  	fcall	___bmul
  2569  0155  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2570  0156  0084               	movwf	4
  2571  0157  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0158  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0159  0824               	movf	??_switch_update,w
  2574  015A  1783               	bsf	3,7	;select IRP bank3
  2575  015B  0080               	movwf	0
  2576                           
  2577                           ;SWITCH.c: 117:             }
  2578  015C  2A8B               	goto	l3401
  2579  015D                     l3377:	
  2580  015D  300B               	movlw	11
  2581  015E  1283               	bcf	3,5	;RP0=0, select bank0
  2582  015F  1303               	bcf	3,6	;RP1=0, select bank0
  2583  0160  00A4               	movwf	??_switch_update
  2584  0161  0824               	movf	??_switch_update,w
  2585  0162  00A0               	movwf	___bmul@multiplicand
  2586  0163  082C               	movf	switch_update@sw_index,w
  2587  0164  160A  118A  239E  120A  118A  	fcall	___bmul
  2588  0169  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2589  016A  0084               	movwf	4
  2590  016B  3002               	movlw	2
  2591  016C  1783               	bsf	3,7	;select IRP bank3
  2592  016D  0600               	xorwf	0,w
  2593  016E  1D03               	btfss	3,2
  2594  016F  29EC               	goto	l3387
  2595  0170  300B               	movlw	11
  2596  0171  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0172  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0173  00A4               	movwf	??_switch_update
  2599  0174  0824               	movf	??_switch_update,w
  2600  0175  00A0               	movwf	___bmul@multiplicand
  2601  0176  082C               	movf	switch_update@sw_index,w
  2602  0177  160A  118A  239E  120A  118A  	fcall	___bmul
  2603  017C  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2604  017D  0084               	movwf	4
  2605  017E  1783               	bsf	3,7	;select IRP bank3
  2606  017F  0800               	movf	0,w
  2607  0180  1D03               	btfss	3,2
  2608  0181  29EC               	goto	l3387
  2609                           
  2610                           ;SWITCH.c: 121:                 switches_data[sw_index].pressed_counter += (20);
  2611  0182  300B               	movlw	11
  2612  0183  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0184  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0185  00A4               	movwf	??_switch_update
  2615  0186  0824               	movf	??_switch_update,w
  2616  0187  00A0               	movwf	___bmul@multiplicand
  2617  0188  082C               	movf	switch_update@sw_index,w
  2618  0189  160A  118A  239E  120A  118A  	fcall	___bmul
  2619  018E  3E98               	addlw	(low ((_switches_data| (0+256)+8)))& (0+255)
  2620  018F  0084               	movwf	4
  2621  0190  3014               	movlw	20
  2622  0191  1783               	bsf	3,7	;select IRP bank3
  2623  0192  0780               	addwf	0,f
  2624  0193  0A84               	incf	4,f
  2625  0194  1803               	skipnc
  2626  0195  0A80               	incf	0,f
  2627                           
  2628                           ;SWITCH.c: 123:                 if(switches_data[sw_index].pressed_counter == (1000)){
  2629  0196  300B               	movlw	11
  2630  0197  1283               	bcf	3,5	;RP0=0, select bank0
  2631  0198  1303               	bcf	3,6	;RP1=0, select bank0
  2632  0199  00A4               	movwf	??_switch_update
  2633  019A  0824               	movf	??_switch_update,w
  2634  019B  00A0               	movwf	___bmul@multiplicand
  2635  019C  082C               	movf	switch_update@sw_index,w
  2636  019D  160A  118A  239E  120A  118A  	fcall	___bmul
  2637  01A2  3E98               	addlw	(low ((_switches_data| (0+256)+8)))& (0+255)
  2638  01A3  0084               	movwf	4
  2639  01A4  1783               	bsf	3,7	;select IRP bank3
  2640  01A5  0800               	movf	0,w
  2641  01A6  1283               	bcf	3,5	;RP0=0, select bank0
  2642  01A7  1303               	bcf	3,6	;RP1=0, select bank0
  2643  01A8  00A5               	movwf	??_switch_update+1
  2644  01A9  0A84               	incf	4,f
  2645  01AA  0800               	movf	0,w
  2646  01AB  00A6               	movwf	??_switch_update+2
  2647  01AC  30E8               	movlw	232
  2648  01AD  0625               	xorwf	??_switch_update+1,w
  2649  01AE  3003               	movlw	3
  2650  01AF  1903               	skipnz
  2651  01B0  0626               	xorwf	??_switch_update+2,w
  2652  01B1  1D03               	btfss	3,2
  2653  01B2  2A8B               	goto	l3401
  2654                           
  2655                           ;SWITCH.c: 124:                     switches_data[sw_index].pressed_counter = (0);
  2656  01B3  300B               	movlw	11
  2657  01B4  00A4               	movwf	??_switch_update
  2658  01B5  0824               	movf	??_switch_update,w
  2659  01B6  00A0               	movwf	___bmul@multiplicand
  2660  01B7  082C               	movf	switch_update@sw_index,w
  2661  01B8  160A  118A  239E  120A  118A  	fcall	___bmul
  2662  01BD  3E98               	addlw	(low ((_switches_data| (0+256)+8)))& (0+255)
  2663  01BE  0084               	movwf	4
  2664  01BF  1783               	bsf	3,7	;select IRP bank3
  2665  01C0  0180               	clrf	0
  2666  01C1  0A84               	incf	4,f
  2667  01C2  0180               	clrf	0
  2668                           
  2669                           ;SWITCH.c: 125:                     if(switches_data[sw_index].pressed_time < (60)) {swi
      +                          tches_data[sw_index].pressed_time++;}
  2670  01C3  300B               	movlw	11
  2671  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  2672  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  2673  01C6  00A4               	movwf	??_switch_update
  2674  01C7  0824               	movf	??_switch_update,w
  2675  01C8  00A0               	movwf	___bmul@multiplicand
  2676  01C9  082C               	movf	switch_update@sw_index,w
  2677  01CA  160A  118A  239E  120A  118A  	fcall	___bmul
  2678  01CF  3E9A               	addlw	(low ((_switches_data| (0+256)+10)))& (0+255)
  2679  01D0  0084               	movwf	4
  2680  01D1  303C               	movlw	60
  2681  01D2  1783               	bsf	3,7	;select IRP bank3
  2682  01D3  0200               	subwf	0,w
  2683  01D4  1803               	skipnc
  2684  01D5  2A8B               	goto	l3401
  2685  01D6  3001               	movlw	1
  2686  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  2687  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  2688  01D9  00A4               	movwf	??_switch_update
  2689  01DA  300B               	movlw	11
  2690  01DB  00A5               	movwf	??_switch_update+1
  2691  01DC  0825               	movf	??_switch_update+1,w
  2692  01DD  00A0               	movwf	___bmul@multiplicand
  2693  01DE  082C               	movf	switch_update@sw_index,w
  2694  01DF  160A  118A  239E  120A  118A  	fcall	___bmul
  2695  01E4  3E9A               	addlw	(low ((_switches_data| (0+256)+10)))& (0+255)
  2696  01E5  0084               	movwf	4
  2697  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  2698  01E7  1303               	bcf	3,6	;RP1=0, select bank0
  2699  01E8  0824               	movf	??_switch_update,w
  2700  01E9  1783               	bsf	3,7	;select IRP bank3
  2701  01EA  0780               	addwf	0,f
  2702  01EB  2A8B               	goto	l3401
  2703  01EC                     l3387:	
  2704  01EC  300B               	movlw	11
  2705  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  2706  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  2707  01EF  00A4               	movwf	??_switch_update
  2708  01F0  0824               	movf	??_switch_update,w
  2709  01F1  00A0               	movwf	___bmul@multiplicand
  2710  01F2  082C               	movf	switch_update@sw_index,w
  2711  01F3  160A  118A  239E  120A  118A  	fcall	___bmul
  2712  01F8  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2713  01F9  0084               	movwf	4
  2714  01FA  3002               	movlw	2
  2715  01FB  1783               	bsf	3,7	;select IRP bank3
  2716  01FC  0600               	xorwf	0,w
  2717  01FD  1D03               	btfss	3,2
  2718  01FE  2A56               	goto	l3395
  2719  01FF  300B               	movlw	11
  2720  0200  1283               	bcf	3,5	;RP0=0, select bank0
  2721  0201  1303               	bcf	3,6	;RP1=0, select bank0
  2722  0202  00A4               	movwf	??_switch_update
  2723  0203  0824               	movf	??_switch_update,w
  2724  0204  00A0               	movwf	___bmul@multiplicand
  2725  0205  082C               	movf	switch_update@sw_index,w
  2726  0206  160A  118A  239E  120A  118A  	fcall	___bmul
  2727  020B  3E95               	addlw	(low ((_switches_data| (0+256)+5)))& (0+255)
  2728  020C  0084               	movwf	4
  2729  020D  1783               	bsf	3,7	;select IRP bank3
  2730  020E  0300               	decf	0,w
  2731  020F  1D03               	btfss	3,2
  2732  0210  2A56               	goto	l3395
  2733  0211  300B               	movlw	11
  2734  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2735  0213  1303               	bcf	3,6	;RP1=0, select bank0
  2736  0214  00A4               	movwf	??_switch_update
  2737  0215  0824               	movf	??_switch_update,w
  2738  0216  00A0               	movwf	___bmul@multiplicand
  2739  0217  082C               	movf	switch_update@sw_index,w
  2740  0218  160A  118A  239E  120A  118A  	fcall	___bmul
  2741  021D  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2742  021E  0084               	movwf	4
  2743  021F  1783               	bsf	3,7	;select IRP bank3
  2744  0220  0300               	decf	0,w
  2745  0221  1D03               	btfss	3,2
  2746  0222  2A56               	goto	l3395
  2747                           
  2748                           ;SWITCH.c: 134:                    {;SWITCH.c: 135:                         switches_dat
      +                          a[sw_index].state = sw_prereleased;
  2749  0223  3003               	movlw	3
  2750  0224  1283               	bcf	3,5	;RP0=0, select bank0
  2751  0225  1303               	bcf	3,6	;RP1=0, select bank0
  2752  0226  00A4               	movwf	??_switch_update
  2753  0227  300B               	movlw	11
  2754  0228  00A5               	movwf	??_switch_update+1
  2755  0229  0825               	movf	??_switch_update+1,w
  2756  022A  00A0               	movwf	___bmul@multiplicand
  2757  022B  082C               	movf	switch_update@sw_index,w
  2758  022C  160A  118A  239E  120A  118A  	fcall	___bmul
  2759  0231  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2760  0232  0084               	movwf	4
  2761  0233  1283               	bcf	3,5	;RP0=0, select bank0
  2762  0234  1303               	bcf	3,6	;RP1=0, select bank0
  2763  0235  0824               	movf	??_switch_update,w
  2764  0236  1783               	bsf	3,7	;select IRP bank3
  2765  0237  0080               	movwf	0
  2766                           
  2767                           ;SWITCH.c: 137:                         switches_data[sw_index].pressed_counter = (0);
  2768  0238  300B               	movlw	11
  2769  0239  00A4               	movwf	??_switch_update
  2770  023A  0824               	movf	??_switch_update,w
  2771  023B  00A0               	movwf	___bmul@multiplicand
  2772  023C  082C               	movf	switch_update@sw_index,w
  2773  023D  160A  118A  239E  120A  118A  	fcall	___bmul
  2774  0242  3E98               	addlw	(low ((_switches_data| (0+256)+8)))& (0+255)
  2775  0243  0084               	movwf	4
  2776  0244  1783               	bsf	3,7	;select IRP bank3
  2777  0245  0180               	clrf	0
  2778  0246  0A84               	incf	4,f
  2779  0247  0180               	clrf	0
  2780                           
  2781                           ;SWITCH.c: 138:                         switches_data[sw_index].pressed_time = (0);
  2782  0248  300B               	movlw	11
  2783  0249  1283               	bcf	3,5	;RP0=0, select bank0
  2784  024A  1303               	bcf	3,6	;RP1=0, select bank0
  2785  024B  00A4               	movwf	??_switch_update
  2786  024C  0824               	movf	??_switch_update,w
  2787  024D  00A0               	movwf	___bmul@multiplicand
  2788  024E  082C               	movf	switch_update@sw_index,w
  2789  024F  160A  118A  239E  120A  118A  	fcall	___bmul
  2790  0254  3E9A               	addlw	(low ((_switches_data| (0+256)+10)))& (0+255)
  2791  0255  2A88               	goto	L1
  2792  0256                     l3395:	
  2793                           ;SWITCH.c: 139:                    }
  2794                           
  2795  0256  300B               	movlw	11
  2796  0257  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0258  1303               	bcf	3,6	;RP1=0, select bank0
  2798  0259  00A4               	movwf	??_switch_update
  2799  025A  0824               	movf	??_switch_update,w
  2800  025B  00A0               	movwf	___bmul@multiplicand
  2801  025C  082C               	movf	switch_update@sw_index,w
  2802  025D  160A  118A  239E  120A  118A  	fcall	___bmul
  2803  0262  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2804  0263  0084               	movwf	4
  2805  0264  3003               	movlw	3
  2806  0265  1783               	bsf	3,7	;select IRP bank3
  2807  0266  0600               	xorwf	0,w
  2808  0267  1D03               	btfss	3,2
  2809  0268  2A8B               	goto	l3401
  2810  0269  300B               	movlw	11
  2811  026A  1283               	bcf	3,5	;RP0=0, select bank0
  2812  026B  1303               	bcf	3,6	;RP1=0, select bank0
  2813  026C  00A4               	movwf	??_switch_update
  2814  026D  0824               	movf	??_switch_update,w
  2815  026E  00A0               	movwf	___bmul@multiplicand
  2816  026F  082C               	movf	switch_update@sw_index,w
  2817  0270  160A  118A  239E  120A  118A  	fcall	___bmul
  2818  0275  3E96               	addlw	(low ((_switches_data| (0+256)+6)))& (0+255)
  2819  0276  0084               	movwf	4
  2820  0277  1783               	bsf	3,7	;select IRP bank3
  2821  0278  0300               	decf	0,w
  2822  0279  1D03               	btfss	3,2
  2823  027A  2A8B               	goto	l3401
  2824                           
  2825                           ;SWITCH.c: 142:             {;SWITCH.c: 143:                 switches_data[sw_index].sta
      +                          te = sw_released;
  2826  027B  300B               	movlw	11
  2827  027C  1283               	bcf	3,5	;RP0=0, select bank0
  2828  027D  1303               	bcf	3,6	;RP1=0, select bank0
  2829  027E  00A4               	movwf	??_switch_update
  2830  027F  0824               	movf	??_switch_update,w
  2831  0280  00A0               	movwf	___bmul@multiplicand
  2832  0281  082C               	movf	switch_update@sw_index,w
  2833  0282  160A  118A  239E  120A  118A  	fcall	___bmul
  2834  0287  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  2835  0288                     L1:	
  2836  0288  0084               	movwf	4
  2837  0289  1783               	bsf	3,7	;select IRP bank3
  2838  028A  0180               	clrf	0
  2839  028B                     l3401:	
  2840                           ;SWITCH.c: 144:             }else { }
  2841                           
  2842                           
  2843                           ;SWITCH.c: 146:         }
  2844  028B  3001               	movlw	1
  2845  028C  1283               	bcf	3,5	;RP0=0, select bank0
  2846  028D  1303               	bcf	3,6	;RP1=0, select bank0
  2847  028E  00A4               	movwf	??_switch_update
  2848  028F  0824               	movf	??_switch_update,w
  2849  0290  07AC               	addwf	switch_update@sw_index,f
  2850  0291  3003               	movlw	3
  2851  0292  022C               	subwf	switch_update@sw_index,w
  2852  0293  1803               	btfsc	3,0
  2853  0294  0008               	return
  2854  0295  2868               	goto	l3351
  2855  0296                     __end_of_switch_update:	
  2856                           
  2857                           	psect	text7
  2858  0823                     __ptext7:	
  2859 ;; *************** function _VC_update *****************
  2860 ;; Defined at:
  2861 ;;		line 52 in file "VACCUM.c"
  2862 ;; Parameters:    Size  Location     Type
  2863 ;;		None
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  sw_index        1   11[BANK0 ] unsigned char 
  2866 ;; Return value:  Size  Location     Type
  2867 ;;                  1    wreg      void 
  2868 ;; Registers used:
  2869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2870 ;; Tracked objects:
  2871 ;;		On entry : 0/0
  2872 ;;		On exit  : 0/0
  2873 ;;		Unchanged: 0/0
  2874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2875 ;;      Params:         0       0       0       0       0
  2876 ;;      Locals:         0       1       0       0       0
  2877 ;;      Temps:          0       2       0       0       0
  2878 ;;      Totals:         0       3       0       0       0
  2879 ;;Total ram usage:        3 bytes
  2880 ;; Hardware stack levels used:    1
  2881 ;; Hardware stack levels required when called:    6
  2882 ;; This function calls:
  2883 ;;		_MO_setTargetAngel
  2884 ;;		_sw_dust_handler
  2885 ;;		_sw_minus_handler
  2886 ;;		_sw_plus_handler
  2887 ;; This function is called by:
  2888 ;;		_OS_schedular
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _VC_update
  2894  0823                     _VC_update:	
  2895                           
  2896                           ;VACCUM.c: 53:     static tByte vc_counter = (0);;VACCUM.c: 55:     vc_counter += (10);
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _VC_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2900  0823  300A               	movlw	10
  2901  0824  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0825  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0826  00A9               	movwf	??_VC_update
  2904  0827  0829               	movf	??_VC_update,w
  2905  0828  1683               	bsf	3,5	;RP0=1, select bank1
  2906  0829  1303               	bcf	3,6	;RP1=0, select bank1
  2907  082A  07DB               	addwf	VC_update@vc_counter^(0+128),f
  2908                           
  2909                           ;VACCUM.c: 57:     if(vc_counter != (20)){
  2910  082B  3014               	movlw	20
  2911  082C  065B               	xorwf	VC_update@vc_counter^(0+128),w
  2912  082D  1D03               	btfss	3,2
  2913  082E  0008               	return
  2914                           
  2915                           ;VACCUM.c: 61:     vc_counter = (0);
  2916  082F  01DB               	clrf	VC_update@vc_counter^(0+128)
  2917                           
  2918                           ;VACCUM.c: 63:     tByte sw_index;;VACCUM.c: 67:     for (sw_index = sw_plus; sw_index <
      +                           (3); sw_index++){
  2919  0830  1283               	bcf	3,5	;RP0=0, select bank0
  2920  0831  1303               	bcf	3,6	;RP1=0, select bank0
  2921  0832  01AB               	clrf	VC_update@sw_index
  2922  0833  284F               	goto	l3423
  2923  0834                     l3415:	
  2924                           
  2925                           ;VACCUM.c: 71:                 sw_plus_handler();
  2926  0834  160A  118A  2442  120A  158A  	fcall	_sw_plus_handler
  2927                           
  2928                           ;VACCUM.c: 72:                 break;
  2929  0839  2845               	goto	l3425
  2930  083A                     l3417:	
  2931                           
  2932                           ;VACCUM.c: 74:                 sw_minus_handler();
  2933  083A  160A  118A  242C  120A  158A  	fcall	_sw_minus_handler
  2934                           
  2935                           ;VACCUM.c: 75:                 break;
  2936  083F  2845               	goto	l3425
  2937  0840                     l3419:	
  2938                           
  2939                           ;VACCUM.c: 77:                 sw_dust_handler();
  2940  0840  160A  118A  274D  120A  158A  	fcall	_sw_dust_handler
  2941  0845                     l3425:	
  2942                           ;VACCUM.c: 78:                 break;
  2943                           
  2944                           
  2945                           ;VACCUM.c: 83:     }
  2946  0845  3001               	movlw	1
  2947  0846  1283               	bcf	3,5	;RP0=0, select bank0
  2948  0847  1303               	bcf	3,6	;RP1=0, select bank0
  2949  0848  00A9               	movwf	??_VC_update
  2950  0849  0829               	movf	??_VC_update,w
  2951  084A  07AB               	addwf	VC_update@sw_index,f
  2952  084B  3003               	movlw	3
  2953  084C  022B               	subwf	VC_update@sw_index,w
  2954  084D  1803               	btfsc	3,0
  2955  084E  2863               	goto	l3429
  2956  084F                     l3423:	
  2957  084F  082B               	movf	VC_update@sw_index,w
  2958  0850  00A9               	movwf	??_VC_update
  2959  0851  01AA               	clrf	??_VC_update+1
  2960                           
  2961                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2962                           ; Switch size 1, requested type "simple"
  2963                           ; Number of cases is 1, Range of values is 0 to 0
  2964                           ; switch strategies available:
  2965                           ; Name         Instructions Cycles
  2966                           ; simple_byte            4     3 (average)
  2967                           ; direct_byte           11     8 (fixed)
  2968                           ; jumptable            260     6 (fixed)
  2969                           ;	Chosen strategy is simple_byte
  2970  0852  082A               	movf	??_VC_update+1,w
  2971  0853  3A00               	xorlw	0	; case 0
  2972  0854  1903               	skipnz
  2973  0855  2857               	goto	l3939
  2974  0856  2845               	goto	l3425
  2975  0857                     l3939:	
  2976                           
  2977                           ; Switch size 1, requested type "simple"
  2978                           ; Number of cases is 3, Range of values is 0 to 2
  2979                           ; switch strategies available:
  2980                           ; Name         Instructions Cycles
  2981                           ; simple_byte           10     6 (average)
  2982                           ; direct_byte           17     8 (fixed)
  2983                           ; jumptable            260     6 (fixed)
  2984                           ;	Chosen strategy is simple_byte
  2985  0857  0829               	movf	??_VC_update,w
  2986  0858  3A00               	xorlw	0	; case 0
  2987  0859  1903               	skipnz
  2988  085A  2834               	goto	l3415
  2989  085B  3A01               	xorlw	1	; case 1
  2990  085C  1903               	skipnz
  2991  085D  283A               	goto	l3417
  2992  085E  3A03               	xorlw	3	; case 2
  2993  085F  1903               	skipnz
  2994  0860  2840               	goto	l3419
  2995  0861  2845               	goto	l3425
  2996  0862  2845               	goto	l3425
  2997  0863                     l3429:	
  2998                           
  2999                           ;VACCUM.c: 90:     MO_setTargetAngel(VC_current_speed);
  3000  0863  087B               	movf	_VC_current_speed,w
  3001  0864  160A  118A  238C   	fcall	_MO_setTargetAngel
  3002  0867  0008               	return
  3003  0868                     __end_of_VC_update:	
  3004                           
  3005                           	psect	text8
  3006  1442                     __ptext8:	
  3007 ;; *************** function _sw_plus_handler *****************
  3008 ;; Defined at:
  3009 ;;		line 95 in file "VACCUM.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      void 
  3016 ;; Registers used:
  3017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3023 ;;      Params:         0       0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    5
  3030 ;; This function calls:
  3031 ;;		_VC_SpeedIncrease
  3032 ;;		_switch_getState
  3033 ;; This function is called by:
  3034 ;;		_VC_update
  3035 ;; This function uses a non-reentrant model
  3036 ;;
  3037                           
  3038                           
  3039                           ;psect for function _sw_plus_handler
  3040  1442                     _sw_plus_handler:	
  3041                           
  3042                           ;VACCUM.c: 96:     if( (switch_getState(sw_plus) == sw_prepressed) && (switch_getState(s
      +                          w_dust) == sw_released) ){
  3043                           
  3044                           ;incstack = 0
  3045                           ; Regs used in _sw_plus_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3046  1442  3000               	movlw	0
  3047  1443  160A  118A  2416  160A  118A  	fcall	_switch_getState
  3048  1448  3A01               	xorlw	1
  3049  1449  1D03               	skipz
  3050  144A  0008               	return
  3051  144B  3002               	movlw	2
  3052  144C  160A  118A  2416  160A  118A  	fcall	_switch_getState
  3053  1451  3A00               	xorlw	0
  3054  1452  1D03               	skipz
  3055  1453  0008               	return
  3056                           
  3057                           ;VACCUM.c: 100:          VC_SpeedIncrease();
  3058  1454  160A  118A  25B4   	fcall	_VC_SpeedIncrease
  3059                           
  3060                           ;VACCUM.c: 102:     }else { }
  3061  1457  0008               	return
  3062  1458                     __end_of_sw_plus_handler:	
  3063                           
  3064                           	psect	text9
  3065  15B4                     __ptext9:	
  3066 ;; *************** function _VC_SpeedIncrease *****************
  3067 ;; Defined at:
  3068 ;;		line 134 in file "VACCUM.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		wreg, status,2, status,0
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3082 ;;      Params:         0       0       0       0       0
  3083 ;;      Locals:         0       2       0       0       0
  3084 ;;      Temps:          0       3       0       0       0
  3085 ;;      Totals:         0       5       0       0       0
  3086 ;;Total ram usage:        5 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    3
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_sw_plus_handler
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           
  3097                           ;psect for function _VC_SpeedIncrease
  3098  15B4                     _VC_SpeedIncrease:	
  3099                           
  3100                           ;VACCUM.c: 136:     VC_current_speed = (VC_current_speed < HIGH_SPEED) ? ++VC_current_sp
      +                          eed : VC_current_speed;
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in _VC_SpeedIncrease: [wreg+status,2+status,0]
  3104  15B4  3002               	movlw	2
  3105  15B5  027B               	subwf	_VC_current_speed,w
  3106  15B6  1C03               	skipc
  3107  15B7  2DC1               	goto	l2805
  3108  15B8  087B               	movf	_VC_current_speed,w
  3109  15B9  1283               	bcf	3,5	;RP0=0, select bank0
  3110  15BA  1303               	bcf	3,6	;RP1=0, select bank0
  3111  15BB  00A0               	movwf	??_VC_SpeedIncrease
  3112  15BC  01A1               	clrf	??_VC_SpeedIncrease+1
  3113  15BD  0820               	movf	??_VC_SpeedIncrease,w
  3114  15BE  00A3               	movwf	_VC_SpeedIncrease$499
  3115  15BF  0821               	movf	??_VC_SpeedIncrease+1,w
  3116  15C0  2DCD               	goto	L2
  3117  15C1                     l2805:	
  3118  15C1  3001               	movlw	1
  3119  15C2  1283               	bcf	3,5	;RP0=0, select bank0
  3120  15C3  1303               	bcf	3,6	;RP1=0, select bank0
  3121  15C4  00A0               	movwf	??_VC_SpeedIncrease
  3122  15C5  0820               	movf	??_VC_SpeedIncrease,w
  3123  15C6  07FB               	addwf	_VC_current_speed,f
  3124  15C7  087B               	movf	_VC_current_speed,w
  3125  15C8  00A1               	movwf	??_VC_SpeedIncrease+1
  3126  15C9  01A2               	clrf	??_VC_SpeedIncrease+2
  3127  15CA  0821               	movf	??_VC_SpeedIncrease+1,w
  3128  15CB  00A3               	movwf	_VC_SpeedIncrease$499
  3129  15CC  0822               	movf	??_VC_SpeedIncrease+2,w
  3130  15CD                     L2:	
  3131  15CD  00A4               	movwf	_VC_SpeedIncrease$499+1
  3132  15CE  0823               	movf	_VC_SpeedIncrease$499,w
  3133  15CF  00A0               	movwf	??_VC_SpeedIncrease
  3134  15D0  0820               	movf	??_VC_SpeedIncrease,w
  3135  15D1  00FB               	movwf	_VC_current_speed
  3136  15D2  0008               	return
  3137  15D3                     __end_of_VC_SpeedIncrease:	
  3138                           
  3139                           	psect	text10
  3140  142C                     __ptext10:	
  3141 ;; *************** function _sw_minus_handler *****************
  3142 ;; Defined at:
  3143 ;;		line 105 in file "VACCUM.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;		None
  3146 ;; Auto vars:     Size  Location     Type
  3147 ;;		None
  3148 ;; Return value:  Size  Location     Type
  3149 ;;                  1    wreg      void 
  3150 ;; Registers used:
  3151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3152 ;; Tracked objects:
  3153 ;;		On entry : 0/0
  3154 ;;		On exit  : 0/0
  3155 ;;		Unchanged: 0/0
  3156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3157 ;;      Params:         0       0       0       0       0
  3158 ;;      Locals:         0       0       0       0       0
  3159 ;;      Temps:          0       0       0       0       0
  3160 ;;      Totals:         0       0       0       0       0
  3161 ;;Total ram usage:        0 bytes
  3162 ;; Hardware stack levels used:    1
  3163 ;; Hardware stack levels required when called:    5
  3164 ;; This function calls:
  3165 ;;		_VC_SpeedDecrease
  3166 ;;		_switch_getState
  3167 ;; This function is called by:
  3168 ;;		_VC_update
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           
  3173                           ;psect for function _sw_minus_handler
  3174  142C                     _sw_minus_handler:	
  3175                           
  3176                           ;VACCUM.c: 106:      if( (switch_getState(sw_minus) == sw_prepressed) && (switch_getStat
      +                          e(sw_dust) == sw_released) ){
  3177                           
  3178                           ;incstack = 0
  3179                           ; Regs used in _sw_minus_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3180  142C  3001               	movlw	1
  3181  142D  160A  118A  2416  160A  118A  	fcall	_switch_getState
  3182  1432  3A01               	xorlw	1
  3183  1433  1D03               	skipz
  3184  1434  0008               	return
  3185  1435  3002               	movlw	2
  3186  1436  160A  118A  2416  160A  118A  	fcall	_switch_getState
  3187  143B  3A00               	xorlw	0
  3188  143C  1D03               	skipz
  3189  143D  0008               	return
  3190                           
  3191                           ;VACCUM.c: 110:         VC_SpeedDecrease();
  3192  143E  160A  118A  23C4   	fcall	_VC_SpeedDecrease
  3193                           
  3194                           ;VACCUM.c: 112:      }else{ }
  3195  1441  0008               	return
  3196  1442                     __end_of_sw_minus_handler:	
  3197                           
  3198                           	psect	text11
  3199  174D                     __ptext11:	
  3200 ;; *************** function _sw_dust_handler *****************
  3201 ;; Defined at:
  3202 ;;		line 115 in file "VACCUM.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;		None
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  1    wreg      void 
  3209 ;; Registers used:
  3210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3216 ;;      Params:         0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0
  3218 ;;      Temps:          0       1       0       0       0
  3219 ;;      Totals:         0       1       0       0       0
  3220 ;;Total ram usage:        1 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    5
  3223 ;; This function calls:
  3224 ;;		_SW_getPressedTime
  3225 ;;		_VC_SpeedDecrease
  3226 ;;		_switch_getState
  3227 ;; This function is called by:
  3228 ;;		_VC_update
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           
  3233                           ;psect for function _sw_dust_handler
  3234  174D                     _sw_dust_handler:	
  3235                           
  3236                           ;VACCUM.c: 117:     static tByte step = (2);;VACCUM.c: 119:     if (SW_getPressedTime(sw
      +                          _dust) == (30) && step == (2) )
  3237                           
  3238                           ;incstack = 0
  3239                           ; Regs used in _sw_dust_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3240  174D  3002               	movlw	2
  3241  174E  160A  118A  235A  160A  118A  	fcall	_SW_getPressedTime
  3242  1753  3A1E               	xorlw	30
  3243  1754  1D03               	skipz
  3244  1755  2F6A               	goto	l3035
  3245  1756  3002               	movlw	2
  3246  1757  1683               	bsf	3,5	;RP0=1, select bank1
  3247  1758  1303               	bcf	3,6	;RP1=0, select bank1
  3248  1759  0643               	xorwf	sw_dust_handler@step^(0+128),w
  3249  175A  1903               	btfsc	3,2
  3250  175B  2F62               	goto	l3031
  3251  175C  2F6A               	goto	l3035
  3252  175D                     l3037:	
  3253  175D  1683               	bsf	3,5	;RP0=1, select bank1
  3254  175E  1303               	bcf	3,6	;RP1=0, select bank1
  3255  175F  0343               	decf	sw_dust_handler@step^(0+128),w
  3256  1760  1D03               	btfss	3,2
  3257  1761  2F73               	goto	l3043
  3258  1762                     l3031:	
  3259                           
  3260                           ;VACCUM.c: 120:     {;VACCUM.c: 121:         VC_SpeedDecrease();
  3261  1762  160A  118A  23C4   	fcall	_VC_SpeedDecrease
  3262                           
  3263                           ;VACCUM.c: 122:         step--;
  3264  1765  3001               	movlw	1
  3265  1766  1683               	bsf	3,5	;RP0=1, select bank1
  3266  1767  1303               	bcf	3,6	;RP1=0, select bank1
  3267  1768  02C3               	subwf	sw_dust_handler@step^(0+128),f
  3268                           
  3269                           ;VACCUM.c: 124:     }else if ( SW_getPressedTime(sw_dust) == (60) && step == (1) ){
  3270  1769  0008               	return
  3271  176A                     l3035:	
  3272  176A  3002               	movlw	2
  3273  176B  160A  118A  235A  160A  118A  	fcall	_SW_getPressedTime
  3274  1770  3A3C               	xorlw	60
  3275  1771  1903               	btfsc	3,2
  3276  1772  2F5D               	goto	l3037
  3277  1773                     l3043:	
  3278  1773  3002               	movlw	2
  3279  1774  160A  118A  2416  160A  118A  	fcall	_switch_getState
  3280  1779  3A00               	xorlw	0
  3281  177A  1D03               	skipz
  3282  177B  0008               	return
  3283                           
  3284                           ;VACCUM.c: 130:         step = 2;
  3285  177C  3002               	movlw	2
  3286  177D  1283               	bcf	3,5	;RP0=0, select bank0
  3287  177E  1303               	bcf	3,6	;RP1=0, select bank0
  3288  177F  00A8               	movwf	??_sw_dust_handler
  3289  1780  0828               	movf	??_sw_dust_handler,w
  3290  1781  1683               	bsf	3,5	;RP0=1, select bank1
  3291  1782  1303               	bcf	3,6	;RP1=0, select bank1
  3292  1783  00C3               	movwf	sw_dust_handler@step^(0+128)
  3293                           
  3294                           ;VACCUM.c: 131:     }else { }
  3295  1784  0008               	return
  3296  1785                     __end_of_sw_dust_handler:	
  3297                           
  3298                           	psect	text12
  3299  13C4                     __ptext12:	
  3300 ;; *************** function _VC_SpeedDecrease *****************
  3301 ;; Defined at:
  3302 ;;		line 139 in file "VACCUM.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;		None
  3305 ;; Auto vars:     Size  Location     Type
  3306 ;;		None
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3316 ;;      Params:         0       0       0       0       0
  3317 ;;      Locals:         0       2       0       0       0
  3318 ;;      Temps:          0       2       0       0       0
  3319 ;;      Totals:         0       4       0       0       0
  3320 ;;Total ram usage:        4 bytes
  3321 ;; Hardware stack levels used:    1
  3322 ;; Hardware stack levels required when called:    3
  3323 ;; This function calls:
  3324 ;;		Nothing
  3325 ;; This function is called by:
  3326 ;;		_sw_minus_handler
  3327 ;;		_sw_dust_handler
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _VC_SpeedDecrease
  3333  13C4                     _VC_SpeedDecrease:	
  3334                           
  3335                           ;VACCUM.c: 141:     VC_current_speed = (VC_current_speed > LOW_SPEED) ? --VC_current_spe
      +                          ed : VC_current_speed;
  3336                           
  3337                           ;incstack = 0
  3338                           ; Regs used in _VC_SpeedDecrease: [wreg+status,2+status,0]
  3339  13C4  087B               	movf	_VC_current_speed,w
  3340  13C5  1903               	btfsc	3,2
  3341  13C6  2BC9               	goto	L3
  3342  13C7  3001               	movlw	1
  3343  13C8  02FB               	subwf	_VC_current_speed,f
  3344  13C9                     L3:	
  3345  13C9  087B               	movf	_VC_current_speed,w
  3346  13CA  1283               	bcf	3,5	;RP0=0, select bank0
  3347  13CB  1303               	bcf	3,6	;RP1=0, select bank0
  3348  13CC  00A0               	movwf	??_VC_SpeedDecrease
  3349  13CD  01A1               	clrf	??_VC_SpeedDecrease+1
  3350  13CE  0820               	movf	??_VC_SpeedDecrease,w
  3351  13CF  00A2               	movwf	_VC_SpeedDecrease$501
  3352  13D0  0821               	movf	??_VC_SpeedDecrease+1,w
  3353  13D1  00A3               	movwf	_VC_SpeedDecrease$501+1
  3354  13D2  0822               	movf	_VC_SpeedDecrease$501,w
  3355  13D3  00A0               	movwf	??_VC_SpeedDecrease
  3356  13D4  0820               	movf	??_VC_SpeedDecrease,w
  3357  13D5  00FB               	movwf	_VC_current_speed
  3358  13D6  0008               	return
  3359  13D7                     __end_of_VC_SpeedDecrease:	
  3360                           
  3361                           	psect	text13
  3362  135A                     __ptext13:	
  3363 ;; *************** function _SW_getPressedTime *****************
  3364 ;; Defined at:
  3365 ;;		line 175 in file "SWITCH.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  sw              1    wreg     enum E868
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  sw              1    5[BANK0 ] enum E868
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      unsigned char 
  3372 ;; Registers used:
  3373 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3379 ;;      Params:         0       0       0       0       0
  3380 ;;      Locals:         0       1       0       0       0
  3381 ;;      Temps:          0       1       0       0       0
  3382 ;;      Totals:         0       2       0       0       0
  3383 ;;Total ram usage:        2 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    4
  3386 ;; This function calls:
  3387 ;;		___bmul
  3388 ;; This function is called by:
  3389 ;;		_sw_dust_handler
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           
  3394                           ;psect for function _SW_getPressedTime
  3395  135A                     _SW_getPressedTime:	
  3396                           
  3397                           ;incstack = 0
  3398                           ; Regs used in _SW_getPressedTime: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3399                           ;SW_getPressedTime@sw stored from wreg
  3400  135A  1283               	bcf	3,5	;RP0=0, select bank0
  3401  135B  1303               	bcf	3,6	;RP1=0, select bank0
  3402  135C  00A5               	movwf	SW_getPressedTime@sw
  3403                           
  3404                           ;SWITCH.c: 176:     return switches_data[sw].pressed_time;
  3405  135D  300B               	movlw	11
  3406  135E  00A4               	movwf	??_SW_getPressedTime
  3407  135F  0824               	movf	??_SW_getPressedTime,w
  3408  1360  00A0               	movwf	___bmul@multiplicand
  3409  1361  0825               	movf	SW_getPressedTime@sw,w
  3410  1362  160A  118A  239E   	fcall	___bmul
  3411  1365  3E9A               	addlw	(low ((_switches_data| (0+256)+10)))& (0+255)
  3412  1366  0084               	movwf	4
  3413  1367  1783               	bsf	3,7	;select IRP bank3
  3414  1368  0800               	movf	0,w
  3415  1369  0008               	return
  3416  136A                     __end_of_SW_getPressedTime:	
  3417                           
  3418                           	psect	text14
  3419  138C                     __ptext14:	
  3420 ;; *************** function _MO_setTargetAngel *****************
  3421 ;; Defined at:
  3422 ;;		line 77 in file "MOTOR.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;  angel           1    wreg     enum E2
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;  angel           1    1[BANK0 ] enum E2
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3436 ;;      Params:         0       0       0       0       0
  3437 ;;      Locals:         0       1       0       0       0
  3438 ;;      Temps:          0       1       0       0       0
  3439 ;;      Totals:         0       2       0       0       0
  3440 ;;Total ram usage:        2 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    3
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_VC_update
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           
  3451                           ;psect for function _MO_setTargetAngel
  3452  138C                     _MO_setTargetAngel:	
  3453                           
  3454                           ;incstack = 0
  3455                           ; Regs used in _MO_setTargetAngel: [wreg-fsr0h+status,2+status,0]
  3456                           ;MO_setTargetAngel@angel stored from wreg
  3457  138C  1283               	bcf	3,5	;RP0=0, select bank0
  3458  138D  1303               	bcf	3,6	;RP1=0, select bank0
  3459  138E  00A1               	movwf	MO_setTargetAngel@angel
  3460                           
  3461                           ;MOTOR.c: 81:     MO_targetAngel = MO_AngelVal[angel];
  3462  138F  0821               	movf	MO_setTargetAngel@angel,w
  3463  1390  00A0               	movwf	??_MO_setTargetAngel
  3464  1391  0720               	addwf	??_MO_setTargetAngel,w
  3465  1392  3EB4               	addlw	(low (_MO_AngelVal| 0))& (0+255)
  3466  1393  0084               	movwf	4
  3467  1394  1383               	bcf	3,7	;select IRP bank1
  3468  1395  0800               	movf	0,w
  3469  1396  1683               	bsf	3,5	;RP0=1, select bank1
  3470  1397  1303               	bcf	3,6	;RP1=0, select bank1
  3471  1398  00CE               	movwf	_MO_targetAngel^(0+128)
  3472  1399  0A84               	incf	4,f
  3473  139A  0800               	movf	0,w
  3474  139B  00CF               	movwf	(_MO_targetAngel+1)^(0+128)
  3475                           
  3476                           ;MOTOR.c: 83:     MO_isStable = (0);
  3477  139C  01FA               	clrf	_MO_isStable
  3478  139D  0008               	return
  3479  139E                     __end_of_MO_setTargetAngel:	
  3480                           
  3481                           	psect	text15
  3482  09B4                     __ptext15:	
  3483 ;; *************** function _SSD_update *****************
  3484 ;; Defined at:
  3485 ;;		line 68 in file "SSD.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;  index           1   21[BANK0 ] unsigned char 
  3490 ;; Return value:  Size  Location     Type
  3491 ;;                  1    wreg      void 
  3492 ;; Registers used:
  3493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3499 ;;      Params:         0       0       0       0       0
  3500 ;;      Locals:         0       2       0       0       0
  3501 ;;      Temps:          0       3       0       0       0
  3502 ;;      Totals:         0       5       0       0       0
  3503 ;;Total ram usage:        5 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    5
  3506 ;; This function calls:
  3507 ;;		_SSD_display
  3508 ;;		_SSD_off
  3509 ;;		_SSD_on
  3510 ;;		___bmul
  3511 ;;		___lwmod
  3512 ;; This function is called by:
  3513 ;;		_OS_schedular
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           
  3518                           ;psect for function _SSD_update
  3519  09B4                     _SSD_update:	
  3520                           
  3521                           ;SSD.c: 69:     static tByte ssd_update_counter = 0;;SSD.c: 71:     ssd_update_counter +
      +                          = (10);
  3522                           
  3523                           ;incstack = 0
  3524                           ; Regs used in _SSD_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3525  09B4  300A               	movlw	10
  3526  09B5  1283               	bcf	3,5	;RP0=0, select bank0
  3527  09B6  1303               	bcf	3,6	;RP1=0, select bank0
  3528  09B7  00B1               	movwf	??_SSD_update
  3529  09B8  0831               	movf	??_SSD_update,w
  3530  09B9  1683               	bsf	3,5	;RP0=1, select bank1
  3531  09BA  1303               	bcf	3,6	;RP1=0, select bank1
  3532  09BB  07DD               	addwf	SSD_update@ssd_update_counter^(0+128),f
  3533                           
  3534                           ;SSD.c: 73:     if (ssd_update_counter == (10)){
  3535  09BC  300A               	movlw	10
  3536  09BD  065D               	xorwf	SSD_update@ssd_update_counter^(0+128),w
  3537  09BE  1D03               	btfss	3,2
  3538  09BF  0008               	return
  3539                           
  3540                           ;SSD.c: 74:         ssd_update_counter = 0;
  3541  09C0  01DD               	clrf	SSD_update@ssd_update_counter^(0+128)
  3542                           
  3543                           ;SSD.c: 76:          tByte index = 0;
  3544  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  3545  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  3546  09C3  01B5               	clrf	SSD_update@index
  3547                           
  3548                           ;SSD.c: 80:         for(index = SSD_LOW; index < (3); index++){
  3549  09C4  01B5               	clrf	SSD_update@index
  3550  09C5                     l3327:	
  3551                           
  3552                           ;SSD.c: 81:             SSD_off(index);
  3553  09C5  0835               	movf	SSD_update@index,w
  3554  09C6  120A  158A  22E5  120A  158A  	fcall	_SSD_off
  3555                           
  3556                           ;SSD.c: 82:         }
  3557  09CB  3001               	movlw	1
  3558  09CC  1283               	bcf	3,5	;RP0=0, select bank0
  3559  09CD  1303               	bcf	3,6	;RP1=0, select bank0
  3560  09CE  00B1               	movwf	??_SSD_update
  3561  09CF  0831               	movf	??_SSD_update,w
  3562  09D0  07B5               	addwf	SSD_update@index,f
  3563  09D1  3003               	movlw	3
  3564  09D2  0235               	subwf	SSD_update@index,w
  3565  09D3  1C03               	skipc
  3566  09D4  29C5               	goto	l3327
  3567                           
  3568                           ;SSD.c: 86:       SSD_display(current_ssd,ssd_data[current_ssd].val);
  3569  09D5  300B               	movlw	11
  3570  09D6  00B1               	movwf	??_SSD_update
  3571  09D7  0831               	movf	??_SSD_update,w
  3572  09D8  00A0               	movwf	___bmul@multiplicand
  3573  09D9  087C               	movf	_current_ssd,w
  3574  09DA  160A  118A  239E  120A  158A  	fcall	___bmul
  3575  09DF  3EBA               	addlw	(low ((_ssd_data| (0+256)+9)))& (0+255)
  3576  09E0  0084               	movwf	4
  3577  09E1  1783               	bsf	3,7	;select IRP bank3
  3578  09E2  0800               	movf	0,w
  3579  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  3580  09E4  1303               	bcf	3,6	;RP1=0, select bank0
  3581  09E5  00B2               	movwf	??_SSD_update+1
  3582  09E6  0832               	movf	??_SSD_update+1,w
  3583  09E7  00B4               	movwf	_SSD_update$1965
  3584                           
  3585                           ;SSD.c: 86:       SSD_display(current_ssd,ssd_data[current_ssd].val);
  3586  09E8  0834               	movf	_SSD_update$1965,w
  3587  09E9  00B1               	movwf	??_SSD_update
  3588  09EA  0831               	movf	??_SSD_update,w
  3589  09EB  00A4               	movwf	SSD_display@data
  3590  09EC  087C               	movf	_current_ssd,w
  3591  09ED  160A  118A  2576  120A  158A  	fcall	_SSD_display
  3592                           
  3593                           ;SSD.c: 91:         SSD_on(current_ssd);
  3594  09F2  087C               	movf	_current_ssd,w
  3595  09F3  120A  158A  2352  120A  158A  	fcall	_SSD_on
  3596                           
  3597                           ;SSD.c: 95:         current_ssd++;
  3598  09F8  3001               	movlw	1
  3599  09F9  1283               	bcf	3,5	;RP0=0, select bank0
  3600  09FA  1303               	bcf	3,6	;RP1=0, select bank0
  3601  09FB  00B1               	movwf	??_SSD_update
  3602  09FC  0831               	movf	??_SSD_update,w
  3603  09FD  07FC               	addwf	_current_ssd,f
  3604                           
  3605                           ;SSD.c: 96:         current_ssd = current_ssd % (3);
  3606  09FE  3003               	movlw	3
  3607  09FF  00A0               	movwf	___lwmod@divisor
  3608  0A00  3000               	movlw	0
  3609  0A01  00A1               	movwf	___lwmod@divisor+1
  3610  0A02  087C               	movf	_current_ssd,w
  3611  0A03  00B1               	movwf	??_SSD_update
  3612  0A04  01B2               	clrf	??_SSD_update+1
  3613  0A05  0831               	movf	??_SSD_update,w
  3614  0A06  00A2               	movwf	___lwmod@dividend
  3615  0A07  0832               	movf	??_SSD_update+1,w
  3616  0A08  00A3               	movwf	___lwmod@dividend+1
  3617  0A09  160A  118A  2719   	fcall	___lwmod
  3618  0A0C  1283               	bcf	3,5	;RP0=0, select bank0
  3619  0A0D  1303               	bcf	3,6	;RP1=0, select bank0
  3620  0A0E  0820               	movf	?___lwmod,w
  3621  0A0F  00B3               	movwf	??_SSD_update+2
  3622  0A10  0833               	movf	??_SSD_update+2,w
  3623  0A11  00FC               	movwf	_current_ssd
  3624                           
  3625                           ;SSD.c: 98:     }else {
  3626  0A12  0008               	return
  3627  0A13                     __end_of_SSD_update:	
  3628                           
  3629                           	psect	text16
  3630  1719                     __ptext16:	
  3631 ;; *************** function ___lwmod *****************
  3632 ;; Defined at:
  3633 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;  divisor         2    0[BANK0 ] unsigned int 
  3636 ;;  dividend        2    2[BANK0 ] unsigned int 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  counter         1    5[BANK0 ] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  2    0[BANK0 ] unsigned int 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3648 ;;      Params:         0       4       0       0       0
  3649 ;;      Locals:         0       1       0       0       0
  3650 ;;      Temps:          0       1       0       0       0
  3651 ;;      Totals:         0       6       0       0       0
  3652 ;;Total ram usage:        6 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    3
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_SSD_update
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           
  3663                           ;psect for function ___lwmod
  3664  1719                     ___lwmod:	
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3668  1719  1283               	bcf	3,5	;RP0=0, select bank0
  3669  171A  1303               	bcf	3,6	;RP1=0, select bank0
  3670  171B  0820               	movf	___lwmod@divisor,w
  3671  171C  0421               	iorwf	___lwmod@divisor+1,w
  3672  171D  1903               	btfsc	3,2
  3673  171E  2F48               	goto	l3137
  3674  171F  01A5               	clrf	___lwmod@counter
  3675  1720  0AA5               	incf	___lwmod@counter,f
  3676  1721                     l3127:	
  3677  1721  1BA1               	btfsc	___lwmod@divisor+1,7
  3678  1722  2F2F               	goto	l3129
  3679  1723  3001               	movlw	1
  3680  1724                     u3125:	
  3681  1724  1003               	clrc
  3682  1725  0DA0               	rlf	___lwmod@divisor,f
  3683  1726  0DA1               	rlf	___lwmod@divisor+1,f
  3684  1727  3EFF               	addlw	-1
  3685  1728  1D03               	skipz
  3686  1729  2F24               	goto	u3125
  3687  172A  3001               	movlw	1
  3688  172B  00A4               	movwf	??___lwmod
  3689  172C  0824               	movf	??___lwmod,w
  3690  172D  07A5               	addwf	___lwmod@counter,f
  3691  172E  2F21               	goto	l3127
  3692  172F                     l3129:	
  3693  172F  0821               	movf	___lwmod@divisor+1,w
  3694  1730  0223               	subwf	___lwmod@dividend+1,w
  3695  1731  1D03               	skipz
  3696  1732  2F35               	goto	u3145
  3697  1733  0820               	movf	___lwmod@divisor,w
  3698  1734  0222               	subwf	___lwmod@dividend,w
  3699  1735                     u3145:	
  3700  1735  1C03               	skipc
  3701  1736  2F3D               	goto	l3133
  3702  1737  0820               	movf	___lwmod@divisor,w
  3703  1738  02A2               	subwf	___lwmod@dividend,f
  3704  1739  0821               	movf	___lwmod@divisor+1,w
  3705  173A  1C03               	skipc
  3706  173B  03A3               	decf	___lwmod@dividend+1,f
  3707  173C  02A3               	subwf	___lwmod@dividend+1,f
  3708  173D                     l3133:	
  3709  173D  3001               	movlw	1
  3710  173E                     u3155:	
  3711  173E  1003               	clrc
  3712  173F  0CA1               	rrf	___lwmod@divisor+1,f
  3713  1740  0CA0               	rrf	___lwmod@divisor,f
  3714  1741  3EFF               	addlw	-1
  3715  1742  1D03               	skipz
  3716  1743  2F3E               	goto	u3155
  3717  1744  3001               	movlw	1
  3718  1745  02A5               	subwf	___lwmod@counter,f
  3719  1746  1D03               	btfss	3,2
  3720  1747  2F2F               	goto	l3129
  3721  1748                     l3137:	
  3722  1748  0823               	movf	___lwmod@dividend+1,w
  3723  1749  00A1               	movwf	?___lwmod+1
  3724  174A  0822               	movf	___lwmod@dividend,w
  3725  174B  00A0               	movwf	?___lwmod
  3726  174C  0008               	return
  3727  174D                     __end_of___lwmod:	
  3728                           
  3729                           	psect	text17
  3730  0B52                     __ptext17:	
  3731 ;; *************** function _SSD_on *****************
  3732 ;; Defined at:
  3733 ;;		line 120 in file "SSD.c"
  3734 ;; Parameters:    Size  Location     Type
  3735 ;;  ssd             1    wreg     enum E881
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;  ssd             1   16[BANK0 ] enum E881
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  1    wreg      void 
  3740 ;; Registers used:
  3741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3747 ;;      Params:         0       0       0       0       0
  3748 ;;      Locals:         0       1       0       0       0
  3749 ;;      Temps:          0      12       0       0       0
  3750 ;;      Totals:         0      13       0       0       0
  3751 ;;Total ram usage:       13 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    4
  3754 ;; This function calls:
  3755 ;;		___bmul
  3756 ;; This function is called by:
  3757 ;;		_SSD_update
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           
  3762                           ;psect for function _SSD_on
  3763  0B52                     _SSD_on:	
  3764                           
  3765                           ;incstack = 0
  3766                           ; Regs used in _SSD_on: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3767                           ;SSD_on@ssd stored from wreg
  3768  0B52  1283               	bcf	3,5	;RP0=0, select bank0
  3769  0B53  1303               	bcf	3,6	;RP1=0, select bank0
  3770  0B54  00B0               	movwf	SSD_on@ssd
  3771                           
  3772                           ;SSD.c: 121:     (((*(ssd_data[ssd].ctrl_value_reg)) = ((*(ssd_data[ssd].ctrl_value_reg)
      +                           & (~(1 << ssd_data[ssd].ctrl_pin))) | (((1)) << ssd_data[ssd].ctrl_pin))));
  3773  0B55  3001               	movlw	1
  3774  0B56  00A4               	movwf	??_SSD_on
  3775  0B57  300B               	movlw	11
  3776  0B58  00A5               	movwf	??_SSD_on+1
  3777  0B59  0825               	movf	??_SSD_on+1,w
  3778  0B5A  00A0               	movwf	___bmul@multiplicand
  3779  0B5B  0830               	movf	SSD_on@ssd,w
  3780  0B5C  160A  118A  239E  120A  158A  	fcall	___bmul
  3781  0B61  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  3782  0B62  0084               	movwf	4
  3783  0B63  1783               	bsf	3,7	;select IRP bank3
  3784  0B64  0A00               	incf	0,w
  3785  0B65  1283               	bcf	3,5	;RP0=0, select bank0
  3786  0B66  1303               	bcf	3,6	;RP1=0, select bank0
  3787  0B67  2B6A               	goto	u2894
  3788  0B68                     u2895:	
  3789  0B68  1003               	clrc
  3790  0B69  0DA4               	rlf	??_SSD_on,f
  3791  0B6A                     u2894:	
  3792  0B6A  3EFF               	addlw	-1
  3793  0B6B  1D03               	skipz
  3794  0B6C  2B68               	goto	u2895
  3795  0B6D  300B               	movlw	11
  3796  0B6E  00A6               	movwf	??_SSD_on+2
  3797  0B6F  0826               	movf	??_SSD_on+2,w
  3798  0B70  00A0               	movwf	___bmul@multiplicand
  3799  0B71  0830               	movf	SSD_on@ssd,w
  3800  0B72  160A  118A  239E  120A  158A  	fcall	___bmul
  3801  0B77  3EB7               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  3802  0B78  0084               	movwf	4
  3803  0B79  1783               	bsf	3,7	;select IRP bank3
  3804  0B7A  0800               	movf	0,w
  3805  0B7B  1283               	bcf	3,5	;RP0=0, select bank0
  3806  0B7C  1303               	bcf	3,6	;RP1=0, select bank0
  3807  0B7D  00A7               	movwf	??_SSD_on+3
  3808  0B7E  0A84               	incf	4,f
  3809  0B7F  0800               	movf	0,w
  3810  0B80  00A8               	movwf	??_SSD_on+4
  3811  0B81  0827               	movf	??_SSD_on+3,w
  3812  0B82  0084               	movwf	4
  3813  0B83  1783               	bsf	3,7
  3814  0B84  1C28               	btfss	??_SSD_on+4,0
  3815  0B85  1383               	bcf	3,7
  3816  0B86  0800               	movf	0,w
  3817  0B87  00A9               	movwf	??_SSD_on+5
  3818  0B88  3001               	movlw	1
  3819  0B89  00AA               	movwf	??_SSD_on+6
  3820  0B8A  300B               	movlw	11
  3821  0B8B  00AB               	movwf	??_SSD_on+7
  3822  0B8C  082B               	movf	??_SSD_on+7,w
  3823  0B8D  00A0               	movwf	___bmul@multiplicand
  3824  0B8E  0830               	movf	SSD_on@ssd,w
  3825  0B8F  160A  118A  239E  120A  158A  	fcall	___bmul
  3826  0B94  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  3827  0B95  0084               	movwf	4
  3828  0B96  1783               	bsf	3,7	;select IRP bank3
  3829  0B97  0A00               	incf	0,w
  3830  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  3831  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  3832  0B9A  2B9D               	goto	u2904
  3833  0B9B                     u2905:	
  3834  0B9B  1003               	clrc
  3835  0B9C  0DAA               	rlf	??_SSD_on+6,f
  3836  0B9D                     u2904:	
  3837  0B9D  3EFF               	addlw	-1
  3838  0B9E  1D03               	skipz
  3839  0B9F  2B9B               	goto	u2905
  3840  0BA0  082A               	movf	??_SSD_on+6,w
  3841  0BA1  3AFF               	xorlw	255
  3842  0BA2  0529               	andwf	??_SSD_on+5,w
  3843  0BA3  0424               	iorwf	??_SSD_on,w
  3844  0BA4  00AC               	movwf	??_SSD_on+8
  3845  0BA5  300B               	movlw	11
  3846  0BA6  00AD               	movwf	??_SSD_on+9
  3847  0BA7  082D               	movf	??_SSD_on+9,w
  3848  0BA8  00A0               	movwf	___bmul@multiplicand
  3849  0BA9  0830               	movf	SSD_on@ssd,w
  3850  0BAA  160A  118A  239E   	fcall	___bmul
  3851  0BAD  3EB7               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  3852  0BAE  0084               	movwf	4
  3853  0BAF  1783               	bsf	3,7	;select IRP bank3
  3854  0BB0  0800               	movf	0,w
  3855  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
  3856  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
  3857  0BB3  00AE               	movwf	??_SSD_on+10
  3858  0BB4  0A84               	incf	4,f
  3859  0BB5  0800               	movf	0,w
  3860  0BB6  00AF               	movwf	??_SSD_on+11
  3861  0BB7  082E               	movf	??_SSD_on+10,w
  3862  0BB8  0084               	movwf	4
  3863  0BB9  1783               	bsf	3,7
  3864  0BBA  1C2F               	btfss	??_SSD_on+11,0
  3865  0BBB  1383               	bcf	3,7
  3866  0BBC  082C               	movf	??_SSD_on+8,w
  3867  0BBD  0080               	movwf	0
  3868  0BBE  0008               	return
  3869  0BBF                     __end_of_SSD_on:	
  3870                           
  3871                           	psect	text18
  3872  0AE5                     __ptext18:	
  3873 ;; *************** function _SSD_off *****************
  3874 ;; Defined at:
  3875 ;;		line 124 in file "SSD.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  ssd             1    wreg     enum E881
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  ssd             1   16[BANK0 ] enum E881
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  1    wreg      void 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3889 ;;      Params:         0       0       0       0       0
  3890 ;;      Locals:         0       1       0       0       0
  3891 ;;      Temps:          0      12       0       0       0
  3892 ;;      Totals:         0      13       0       0       0
  3893 ;;Total ram usage:       13 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; Hardware stack levels required when called:    4
  3896 ;; This function calls:
  3897 ;;		___bmul
  3898 ;; This function is called by:
  3899 ;;		_SSD_update
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           
  3904                           ;psect for function _SSD_off
  3905  0AE5                     _SSD_off:	
  3906                           
  3907                           ;incstack = 0
  3908                           ; Regs used in _SSD_off: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3909                           ;SSD_off@ssd stored from wreg
  3910  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  3912  0AE7  00B0               	movwf	SSD_off@ssd
  3913                           
  3914                           ;SSD.c: 125:     (((*(ssd_data[ssd].ctrl_value_reg)) = ((*(ssd_data[ssd].ctrl_value_reg)
      +                           & (~(1 << ssd_data[ssd].ctrl_pin))) | (((0)) << ssd_data[ssd].ctrl_pin))));
  3915  0AE8  3000               	movlw	0
  3916  0AE9  00A4               	movwf	??_SSD_off
  3917  0AEA  300B               	movlw	11
  3918  0AEB  00A5               	movwf	??_SSD_off+1
  3919  0AEC  0825               	movf	??_SSD_off+1,w
  3920  0AED  00A0               	movwf	___bmul@multiplicand
  3921  0AEE  0830               	movf	SSD_off@ssd,w
  3922  0AEF  160A  118A  239E  120A  158A  	fcall	___bmul
  3923  0AF4  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  3924  0AF5  0084               	movwf	4
  3925  0AF6  1783               	bsf	3,7	;select IRP bank3
  3926  0AF7  0A00               	incf	0,w
  3927  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  3928  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  3929  0AFA  2AFD               	goto	u2874
  3930  0AFB                     u2875:	
  3931  0AFB  1003               	clrc
  3932  0AFC  0DA4               	rlf	??_SSD_off,f
  3933  0AFD                     u2874:	
  3934  0AFD  3EFF               	addlw	-1
  3935  0AFE  1D03               	skipz
  3936  0AFF  2AFB               	goto	u2875
  3937  0B00  300B               	movlw	11
  3938  0B01  00A6               	movwf	??_SSD_off+2
  3939  0B02  0826               	movf	??_SSD_off+2,w
  3940  0B03  00A0               	movwf	___bmul@multiplicand
  3941  0B04  0830               	movf	SSD_off@ssd,w
  3942  0B05  160A  118A  239E  120A  158A  	fcall	___bmul
  3943  0B0A  3EB7               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  3944  0B0B  0084               	movwf	4
  3945  0B0C  1783               	bsf	3,7	;select IRP bank3
  3946  0B0D  0800               	movf	0,w
  3947  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  3948  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  3949  0B10  00A7               	movwf	??_SSD_off+3
  3950  0B11  0A84               	incf	4,f
  3951  0B12  0800               	movf	0,w
  3952  0B13  00A8               	movwf	??_SSD_off+4
  3953  0B14  0827               	movf	??_SSD_off+3,w
  3954  0B15  0084               	movwf	4
  3955  0B16  1783               	bsf	3,7
  3956  0B17  1C28               	btfss	??_SSD_off+4,0
  3957  0B18  1383               	bcf	3,7
  3958  0B19  0800               	movf	0,w
  3959  0B1A  00A9               	movwf	??_SSD_off+5
  3960  0B1B  3001               	movlw	1
  3961  0B1C  00AA               	movwf	??_SSD_off+6
  3962  0B1D  300B               	movlw	11
  3963  0B1E  00AB               	movwf	??_SSD_off+7
  3964  0B1F  082B               	movf	??_SSD_off+7,w
  3965  0B20  00A0               	movwf	___bmul@multiplicand
  3966  0B21  0830               	movf	SSD_off@ssd,w
  3967  0B22  160A  118A  239E  120A  158A  	fcall	___bmul
  3968  0B27  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  3969  0B28  0084               	movwf	4
  3970  0B29  1783               	bsf	3,7	;select IRP bank3
  3971  0B2A  0A00               	incf	0,w
  3972  0B2B  1283               	bcf	3,5	;RP0=0, select bank0
  3973  0B2C  1303               	bcf	3,6	;RP1=0, select bank0
  3974  0B2D  2B30               	goto	u2884
  3975  0B2E                     u2885:	
  3976  0B2E  1003               	clrc
  3977  0B2F  0DAA               	rlf	??_SSD_off+6,f
  3978  0B30                     u2884:	
  3979  0B30  3EFF               	addlw	-1
  3980  0B31  1D03               	skipz
  3981  0B32  2B2E               	goto	u2885
  3982  0B33  082A               	movf	??_SSD_off+6,w
  3983  0B34  3AFF               	xorlw	255
  3984  0B35  0529               	andwf	??_SSD_off+5,w
  3985  0B36  0424               	iorwf	??_SSD_off,w
  3986  0B37  00AC               	movwf	??_SSD_off+8
  3987  0B38  300B               	movlw	11
  3988  0B39  00AD               	movwf	??_SSD_off+9
  3989  0B3A  082D               	movf	??_SSD_off+9,w
  3990  0B3B  00A0               	movwf	___bmul@multiplicand
  3991  0B3C  0830               	movf	SSD_off@ssd,w
  3992  0B3D  160A  118A  239E   	fcall	___bmul
  3993  0B40  3EB7               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  3994  0B41  0084               	movwf	4
  3995  0B42  1783               	bsf	3,7	;select IRP bank3
  3996  0B43  0800               	movf	0,w
  3997  0B44  1283               	bcf	3,5	;RP0=0, select bank0
  3998  0B45  1303               	bcf	3,6	;RP1=0, select bank0
  3999  0B46  00AE               	movwf	??_SSD_off+10
  4000  0B47  0A84               	incf	4,f
  4001  0B48  0800               	movf	0,w
  4002  0B49  00AF               	movwf	??_SSD_off+11
  4003  0B4A  082E               	movf	??_SSD_off+10,w
  4004  0B4B  0084               	movwf	4
  4005  0B4C  1783               	bsf	3,7
  4006  0B4D  1C2F               	btfss	??_SSD_off+11,0
  4007  0B4E  1383               	bcf	3,7
  4008  0B4F  082C               	movf	??_SSD_off+8,w
  4009  0B50  0080               	movwf	0
  4010  0B51  0008               	return
  4011  0B52                     __end_of_SSD_off:	
  4012                           
  4013                           	psect	text19
  4014  1504                     __ptext19:	
  4015 ;; *************** function _MO_update *****************
  4016 ;; Defined at:
  4017 ;;		line 117 in file "MOTOR.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;		None
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;		None
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  1    wreg      void 
  4024 ;; Registers used:
  4025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4031 ;;      Params:         0       0       0       0       0
  4032 ;;      Locals:         0       0       0       0       0
  4033 ;;      Temps:          0       1       0       0       0
  4034 ;;      Totals:         0       1       0       0       0
  4035 ;;Total ram usage:        1 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    5
  4038 ;; This function calls:
  4039 ;;		_MO_fire_update
  4040 ;;		_MO_reduceHARM
  4041 ;;		_MO_softSwitch
  4042 ;; This function is called by:
  4043 ;;		_OS_schedular
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           
  4048                           ;psect for function _MO_update
  4049  1504                     _MO_update:	
  4050                           
  4051                           ;MOTOR.c: 119:     static tByte MO_counter = (0);;MOTOR.c: 122:     MO_counter += (10);
  4052                           
  4053                           ;incstack = 0
  4054                           ; Regs used in _MO_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4055  1504  300A               	movlw	10
  4056  1505  1283               	bcf	3,5	;RP0=0, select bank0
  4057  1506  1303               	bcf	3,6	;RP1=0, select bank0
  4058  1507  00A9               	movwf	??_MO_update
  4059  1508  0829               	movf	??_MO_update,w
  4060  1509  1683               	bsf	3,5	;RP0=1, select bank1
  4061  150A  1303               	bcf	3,6	;RP1=0, select bank1
  4062  150B  07D8               	addwf	MO_update@MO_counter^(0+128),f
  4063                           
  4064                           ;MOTOR.c: 124:     if(MO_counter != (10)){
  4065  150C  300A               	movlw	10
  4066  150D  0658               	xorwf	MO_update@MO_counter^(0+128),w
  4067  150E  1D03               	btfss	3,2
  4068  150F  0008               	return
  4069                           
  4070                           ;MOTOR.c: 128:     MO_counter = (0);
  4071  1510  01D8               	clrf	MO_update@MO_counter^(0+128)
  4072                           
  4073                           ;MOTOR.c: 130:    MO_fire_update();
  4074  1511  160A  118A  2785  160A  118A  	fcall	_MO_fire_update
  4075                           
  4076                           ;MOTOR.c: 132:    MO_softSwitch();
  4077  1516  160A  118A  26E5  160A  118A  	fcall	_MO_softSwitch
  4078                           
  4079                           ;MOTOR.c: 134:    MO_reduceHARM();
  4080  151B  160A  118A  2662   	fcall	_MO_reduceHARM
  4081  151E  0008               	return
  4082  151F                     __end_of_MO_update:	
  4083                           
  4084                           	psect	text20
  4085  16E5                     __ptext20:	
  4086 ;; *************** function _MO_softSwitch *****************
  4087 ;; Defined at:
  4088 ;;		line 159 in file "MOTOR.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;		None
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, status,2, status,0
  4097 ;; Tracked objects:
  4098 ;;		On entry : 0/0
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4102 ;;      Params:         0       0       0       0       0
  4103 ;;      Locals:         0       0       0       0       0
  4104 ;;      Temps:          0       1       0       0       0
  4105 ;;      Totals:         0       1       0       0       0
  4106 ;;Total ram usage:        1 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:    3
  4109 ;; This function calls:
  4110 ;;		Nothing
  4111 ;; This function is called by:
  4112 ;;		_MO_update
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           
  4117                           ;psect for function _MO_softSwitch
  4118  16E5                     _MO_softSwitch:	
  4119                           
  4120                           ;MOTOR.c: 163:     static tByte ss_counter = (0);;MOTOR.c: 165:     ss_counter += (10);
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _MO_softSwitch: [wreg+status,2+status,0]
  4124  16E5  300A               	movlw	10
  4125  16E6  1283               	bcf	3,5	;RP0=0, select bank0
  4126  16E7  1303               	bcf	3,6	;RP1=0, select bank0
  4127  16E8  00A0               	movwf	??_MO_softSwitch
  4128  16E9  0820               	movf	??_MO_softSwitch,w
  4129  16EA  1683               	bsf	3,5	;RP0=1, select bank1
  4130  16EB  1303               	bcf	3,6	;RP1=0, select bank1
  4131  16EC  07D7               	addwf	MO_softSwitch@ss_counter^(0+128),f
  4132                           
  4133                           ;MOTOR.c: 167:     if(ss_counter != (80)){
  4134  16ED  3050               	movlw	80
  4135  16EE  0657               	xorwf	MO_softSwitch@ss_counter^(0+128),w
  4136  16EF  1D03               	btfss	3,2
  4137  16F0  0008               	return
  4138                           
  4139                           ;MOTOR.c: 171:     ss_counter = (0);
  4140  16F1  01D7               	clrf	MO_softSwitch@ss_counter^(0+128)
  4141                           
  4142                           ;MOTOR.c: 173:     if( !MO_isStable && MO_currentAngel < MO_targetAngel){
  4143  16F2  087A               	movf	_MO_isStable,w
  4144  16F3  1D03               	btfss	3,2
  4145  16F4  2F04               	goto	l3091
  4146  16F5  084F               	movf	(_MO_targetAngel+1)^(0+128),w
  4147  16F6  0251               	subwf	(_MO_currentAngel+1)^(0+128),w
  4148  16F7  1D03               	skipz
  4149  16F8  2EFB               	goto	u3045
  4150  16F9  084E               	movf	_MO_targetAngel^(0+128),w
  4151  16FA  0250               	subwf	_MO_currentAngel^(0+128),w
  4152  16FB                     u3045:	
  4153  16FB  1803               	skipnc
  4154  16FC  2F04               	goto	l3091
  4155                           
  4156                           ;MOTOR.c: 175:         MO_currentAngel++;
  4157  16FD  3001               	movlw	1
  4158  16FE  07D0               	addwf	_MO_currentAngel^(0+128),f
  4159  16FF  1803               	skipnc
  4160  1700  0AD1               	incf	(_MO_currentAngel+1)^(0+128),f
  4161  1701  3000               	movlw	0
  4162  1702  07D1               	addwf	(_MO_currentAngel+1)^(0+128),f
  4163                           
  4164                           ;MOTOR.c: 177:     }else if ( !MO_isStable && MO_currentAngel > MO_targetAngel){
  4165  1703  0008               	return
  4166  1704                     l3091:	
  4167  1704  087A               	movf	_MO_isStable,w
  4168  1705  1D03               	btfss	3,2
  4169  1706  2F16               	goto	l436
  4170  1707  0851               	movf	(_MO_currentAngel+1)^(0+128),w
  4171  1708  024F               	subwf	(_MO_targetAngel+1)^(0+128),w
  4172  1709  1D03               	skipz
  4173  170A  2F0D               	goto	u3065
  4174  170B  0850               	movf	_MO_currentAngel^(0+128),w
  4175  170C  024E               	subwf	_MO_targetAngel^(0+128),w
  4176  170D                     u3065:	
  4177  170D  1803               	skipnc
  4178  170E  2F16               	goto	l436
  4179                           
  4180                           ;MOTOR.c: 179:         MO_currentAngel--;
  4181  170F  3001               	movlw	1
  4182  1710  02D0               	subwf	_MO_currentAngel^(0+128),f
  4183  1711  3000               	movlw	0
  4184  1712  1C03               	skipc
  4185  1713  03D1               	decf	(_MO_currentAngel+1)^(0+128),f
  4186  1714  02D1               	subwf	(_MO_currentAngel+1)^(0+128),f
  4187                           
  4188                           ;MOTOR.c: 181:     }else {
  4189  1715  0008               	return
  4190  1716                     l436:	
  4191                           
  4192                           ;MOTOR.c: 183:         MO_isStable = (1);
  4193  1716  01FA               	clrf	_MO_isStable
  4194  1717  0AFA               	incf	_MO_isStable,f
  4195  1718  0008               	return
  4196  1719                     __end_of_MO_softSwitch:	
  4197                           
  4198                           	psect	text21
  4199  1662                     __ptext21:	
  4200 ;; *************** function _MO_reduceHARM *****************
  4201 ;; Defined at:
  4202 ;;		line 188 in file "MOTOR.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;		None
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;		None
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4216 ;;      Params:         0       0       0       0       0
  4217 ;;      Locals:         0       0       0       0       0
  4218 ;;      Temps:          0       1       0       0       0
  4219 ;;      Totals:         0       1       0       0       0
  4220 ;;Total ram usage:        1 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    3
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_MO_update
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           
  4231                           ;psect for function _MO_reduceHARM
  4232  1662                     _MO_reduceHARM:	
  4233                           
  4234                           ;MOTOR.c: 192:     static tByte RH_counter = (0);;MOTOR.c: 193:     static tByte RH_flag
      +                           = (1);;MOTOR.c: 195:     RH_counter += (10);
  4235                           
  4236                           ;incstack = 0
  4237                           ; Regs used in _MO_reduceHARM: [wreg+status,2+status,0]
  4238  1662  300A               	movlw	10
  4239  1663  1283               	bcf	3,5	;RP0=0, select bank0
  4240  1664  1303               	bcf	3,6	;RP1=0, select bank0
  4241  1665  00A0               	movwf	??_MO_reduceHARM
  4242  1666  0820               	movf	??_MO_reduceHARM,w
  4243  1667  1683               	bsf	3,5	;RP0=1, select bank1
  4244  1668  1303               	bcf	3,6	;RP1=0, select bank1
  4245  1669  07D6               	addwf	MO_reduceHARM@RH_counter^(0+128),f
  4246                           
  4247                           ;MOTOR.c: 197:     if(RH_counter < (20)){
  4248  166A  3014               	movlw	20
  4249  166B  0256               	subwf	MO_reduceHARM@RH_counter^(0+128),w
  4250  166C  1C03               	btfss	3,0
  4251  166D  0008               	return
  4252                           
  4253                           ;MOTOR.c: 201:     RH_counter = (0);
  4254  166E  01D6               	clrf	MO_reduceHARM@RH_counter^(0+128)
  4255                           
  4256                           ;MOTOR.c: 205:     if( MO_isStable ){
  4257  166F  087A               	movf	_MO_isStable,w
  4258  1670  1903               	btfsc	3,2
  4259  1671  0008               	return
  4260                           
  4261                           ;MOTOR.c: 208:         if(RH_flag == (0)){
  4262  1672  0842               	movf	MO_reduceHARM@RH_flag^(0+128),w
  4263  1673  1D03               	btfss	3,2
  4264  1674  2E80               	goto	l3113
  4265                           
  4266                           ;MOTOR.c: 210:             MO_currentAngel = MO_targetAngel + (5);
  4267  1675  084E               	movf	_MO_targetAngel^(0+128),w
  4268  1676  3E05               	addlw	5
  4269  1677  00D0               	movwf	_MO_currentAngel^(0+128)
  4270  1678  084F               	movf	(_MO_targetAngel+1)^(0+128),w
  4271  1679  1803               	skipnc
  4272  167A  3E01               	addlw	1
  4273  167B  3E00               	addlw	0
  4274  167C  00D1               	movwf	(_MO_currentAngel+1)^(0+128)
  4275                           
  4276                           ;MOTOR.c: 212:             RH_flag = (1);
  4277  167D  01C2               	clrf	MO_reduceHARM@RH_flag^(0+128)
  4278  167E  0AC2               	incf	MO_reduceHARM@RH_flag^(0+128),f
  4279                           
  4280                           ;MOTOR.c: 214:         }else if(RH_flag == (1)){
  4281  167F  0008               	return
  4282  1680                     l3113:	
  4283  1680  0342               	decf	MO_reduceHARM@RH_flag^(0+128),w
  4284  1681  1D03               	btfss	3,2
  4285  1682  0008               	return
  4286                           
  4287                           ;MOTOR.c: 216:             MO_currentAngel = MO_targetAngel - (5);
  4288  1683  084E               	movf	_MO_targetAngel^(0+128),w
  4289  1684  3EFB               	addlw	251
  4290  1685  00D0               	movwf	_MO_currentAngel^(0+128)
  4291  1686  084F               	movf	(_MO_targetAngel+1)^(0+128),w
  4292  1687  1803               	skipnc
  4293  1688  3E01               	addlw	1
  4294  1689  3EFF               	addlw	255
  4295  168A  00D1               	movwf	(_MO_currentAngel+1)^(0+128)
  4296                           
  4297                           ;MOTOR.c: 218:             RH_flag = (0);
  4298  168B  01C2               	clrf	MO_reduceHARM@RH_flag^(0+128)
  4299  168C  0008               	return
  4300  168D                     __end_of_MO_reduceHARM:	
  4301                           
  4302                           	psect	text22
  4303  1785                     __ptext22:	
  4304 ;; *************** function _MO_fire_update *****************
  4305 ;; Defined at:
  4306 ;;		line 140 in file "MOTOR.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4320 ;;      Params:         0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0
  4323 ;;      Totals:         0       0       0       0       0
  4324 ;;Total ram usage:        0 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    4
  4327 ;; This function calls:
  4328 ;;		_TMR1_init
  4329 ;;		_TMR1_reload
  4330 ;;		_TMR1_setState
  4331 ;;		___wmul
  4332 ;; This function is called by:
  4333 ;;		_MO_update
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           
  4338                           ;psect for function _MO_fire_update
  4339  1785                     _MO_fire_update:	
  4340                           
  4341                           ;MOTOR.c: 152:     TMR1_setState(TMR1_OFF_STATE);
  4342                           
  4343                           ;incstack = 0
  4344                           ; Regs used in _MO_fire_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4345  1785  3001               	movlw	1
  4346  1786  160A  118A  24B6  160A  118A  	fcall	_TMR1_setState
  4347                           
  4348                           ;MOTOR.c: 153:     TMR1_init(TMR1_PRS_2,TMR1_TMR_MODE,TMR1_OVF_EN);
  4349  178B  1283               	bcf	3,5	;RP0=0, select bank0
  4350  178C  1303               	bcf	3,6	;RP1=0, select bank0
  4351  178D  01A0               	clrf	TMR1_init@m
  4352  178E  01A1               	clrf	TMR1_init@s
  4353  178F  3001               	movlw	1
  4354  1790  120A  158A  2159  160A  118A  	fcall	_TMR1_init
  4355                           
  4356                           ;MOTOR.c: 154:     TMR1_reload((65535) - (MO_currentAngel * MO_SingleAngelTime));
  4357  1795  1683               	bsf	3,5	;RP0=1, select bank1
  4358  1796  1303               	bcf	3,6	;RP1=0, select bank1
  4359  1797  0851               	movf	(_MO_currentAngel+1)^(0+128),w
  4360  1798  1283               	bcf	3,5	;RP0=0, select bank0
  4361  1799  1303               	bcf	3,6	;RP1=0, select bank0
  4362  179A  00A1               	movwf	___wmul@multiplier+1
  4363  179B  1683               	bsf	3,5	;RP0=1, select bank1
  4364  179C  1303               	bcf	3,6	;RP1=0, select bank1
  4365  179D  0850               	movf	_MO_currentAngel^(0+128),w
  4366  179E  1283               	bcf	3,5	;RP0=0, select bank0
  4367  179F  1303               	bcf	3,6	;RP1=0, select bank0
  4368  17A0  00A0               	movwf	___wmul@multiplier
  4369  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  4370  17A2  1303               	bcf	3,6	;RP1=0, select bank1
  4371  17A3  084D               	movf	(_MO_SingleAngelTime+1)^(0+128),w
  4372  17A4  1283               	bcf	3,5	;RP0=0, select bank0
  4373  17A5  1303               	bcf	3,6	;RP1=0, select bank0
  4374  17A6  00A3               	movwf	___wmul@multiplicand+1
  4375  17A7  1683               	bsf	3,5	;RP0=1, select bank1
  4376  17A8  1303               	bcf	3,6	;RP1=0, select bank1
  4377  17A9  084C               	movf	_MO_SingleAngelTime^(0+128),w
  4378  17AA  1283               	bcf	3,5	;RP0=0, select bank0
  4379  17AB  1303               	bcf	3,6	;RP1=0, select bank0
  4380  17AC  00A2               	movwf	___wmul@multiplicand
  4381  17AD  120A  158A  2000  160A  118A  	fcall	___wmul
  4382  17B2  1283               	bcf	3,5	;RP0=0, select bank0
  4383  17B3  1303               	bcf	3,6	;RP1=0, select bank0
  4384  17B4  0920               	comf	?___wmul,w
  4385  17B5  00A6               	movwf	TMR1_reload@val
  4386  17B6  0921               	comf	?___wmul+1,w
  4387  17B7  00A7               	movwf	TMR1_reload@val+1
  4388  17B8  160A  118A  2344  160A  118A  	fcall	_TMR1_reload
  4389                           
  4390                           ;MOTOR.c: 155:     TMR1_setState(TMR1_ON_STATE);
  4391  17BD  3000               	movlw	0
  4392  17BE  160A  118A  24B6   	fcall	_TMR1_setState
  4393  17C1  0008               	return
  4394  17C2                     __end_of_MO_fire_update:	
  4395                           
  4396                           	psect	text23
  4397  0800                     __ptext23:	
  4398 ;; *************** function ___wmul *****************
  4399 ;; Defined at:
  4400 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4403 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  product         2    4[BANK0 ] unsigned int 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  2    0[BANK0 ] unsigned int 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2, status,0
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4415 ;;      Params:         0       4       0       0       0
  4416 ;;      Locals:         0       2       0       0       0
  4417 ;;      Temps:          0       0       0       0       0
  4418 ;;      Totals:         0       6       0       0       0
  4419 ;;Total ram usage:        6 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    3
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_MO_fire_update
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function ___wmul
  4431  0800                     ___wmul:	
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  4435  0800  1283               	bcf	3,5	;RP0=0, select bank0
  4436  0801  1303               	bcf	3,6	;RP1=0, select bank0
  4437  0802  01A4               	clrf	___wmul@product
  4438  0803  01A5               	clrf	___wmul@product+1
  4439  0804                     l2877:	
  4440  0804  1C20               	btfss	___wmul@multiplier,0
  4441  0805  280C               	goto	l571
  4442  0806  0822               	movf	___wmul@multiplicand,w
  4443  0807  07A4               	addwf	___wmul@product,f
  4444  0808  1803               	skipnc
  4445  0809  0AA5               	incf	___wmul@product+1,f
  4446  080A  0823               	movf	___wmul@multiplicand+1,w
  4447  080B  07A5               	addwf	___wmul@product+1,f
  4448  080C                     l571:	
  4449  080C  3001               	movlw	1
  4450  080D                     u2765:	
  4451  080D  1003               	clrc
  4452  080E  0DA2               	rlf	___wmul@multiplicand,f
  4453  080F  0DA3               	rlf	___wmul@multiplicand+1,f
  4454  0810  3EFF               	addlw	-1
  4455  0811  1D03               	skipz
  4456  0812  280D               	goto	u2765
  4457  0813  3001               	movlw	1
  4458  0814                     u2775:	
  4459  0814  1003               	clrc
  4460  0815  0CA1               	rrf	___wmul@multiplier+1,f
  4461  0816  0CA0               	rrf	___wmul@multiplier,f
  4462  0817  3EFF               	addlw	-1
  4463  0818  1D03               	skipz
  4464  0819  2814               	goto	u2775
  4465  081A  0820               	movf	___wmul@multiplier,w
  4466  081B  0421               	iorwf	___wmul@multiplier+1,w
  4467  081C  1D03               	btfss	3,2
  4468  081D  2804               	goto	l2877
  4469  081E  0825               	movf	___wmul@product+1,w
  4470  081F  00A1               	movwf	?___wmul+1
  4471  0820  0824               	movf	___wmul@product,w
  4472  0821  00A0               	movwf	?___wmul
  4473  0822  0008               	return
  4474  0823                     __end_of___wmul:	
  4475                           
  4476                           	psect	text24
  4477  14B6                     __ptext24:	
  4478 ;; *************** function _TMR1_setState *****************
  4479 ;; Defined at:
  4480 ;;		line 86 in file "TIMER1.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  s               1    wreg     enum E882
  4483 ;; Auto vars:     Size  Location     Type
  4484 ;;  s               1    2[BANK0 ] enum E882
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      void 
  4487 ;; Registers used:
  4488 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4494 ;;      Params:         0       0       0       0       0
  4495 ;;      Locals:         0       1       0       0       0
  4496 ;;      Temps:          0       2       0       0       0
  4497 ;;      Totals:         0       3       0       0       0
  4498 ;;Total ram usage:        3 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    3
  4501 ;; This function calls:
  4502 ;;		Nothing
  4503 ;; This function is called by:
  4504 ;;		_MO_fire_update
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           
  4509                           ;psect for function _TMR1_setState
  4510  14B6                     _TMR1_setState:	
  4511                           
  4512                           ;incstack = 0
  4513                           ; Regs used in _TMR1_setState: [wreg-fsr0h+status,2+status,0]
  4514                           ;TMR1_setState@s stored from wreg
  4515  14B6  1283               	bcf	3,5	;RP0=0, select bank0
  4516  14B7  1303               	bcf	3,6	;RP1=0, select bank0
  4517  14B8  00A2               	movwf	TMR1_setState@s
  4518                           
  4519                           ;TIMER1.c: 88:     switch(s) {
  4520  14B9  2CBE               	goto	l2823
  4521  14BA                     l481:	
  4522                           ;TIMER1.c: 90:         case TMR1_ON_STATE:
  4523                           
  4524                           
  4525                           ;TIMER1.c: 91:             ((*((volatile tRegister *)(0x10))).Bits.BIT0 = 1);
  4526  14BA  1410               	bsf	16,0	;volatile
  4527                           
  4528                           ;TIMER1.c: 92:             break;
  4529  14BB  0008               	return
  4530  14BC                     l483:	
  4531                           ;TIMER1.c: 94:         case TMR1_OFF_STATE :
  4532                           
  4533                           
  4534                           ;TIMER1.c: 95:             ((*((volatile tRegister *)(0x10))).Bits.BIT0 = 0);
  4535  14BC  1010               	bcf	16,0	;volatile
  4536                           
  4537                           ;TIMER1.c: 96:             break;
  4538  14BD  0008               	return
  4539  14BE                     l2823:	
  4540  14BE  0822               	movf	TMR1_setState@s,w
  4541  14BF  00A0               	movwf	??_TMR1_setState
  4542  14C0  01A1               	clrf	??_TMR1_setState+1
  4543                           
  4544                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4545                           ; Switch size 1, requested type "simple"
  4546                           ; Number of cases is 1, Range of values is 0 to 0
  4547                           ; switch strategies available:
  4548                           ; Name         Instructions Cycles
  4549                           ; simple_byte            4     3 (average)
  4550                           ; direct_byte           11     8 (fixed)
  4551                           ; jumptable            260     6 (fixed)
  4552                           ;	Chosen strategy is simple_byte
  4553  14C1  0821               	movf	??_TMR1_setState+1,w
  4554  14C2  3A00               	xorlw	0	; case 0
  4555  14C3  1903               	skipnz
  4556  14C4  2CC6               	goto	l3941
  4557  14C5  2CCE               	goto	l485
  4558  14C6                     l3941:	
  4559                           
  4560                           ; Switch size 1, requested type "simple"
  4561                           ; Number of cases is 2, Range of values is 0 to 1
  4562                           ; switch strategies available:
  4563                           ; Name         Instructions Cycles
  4564                           ; simple_byte            7     4 (average)
  4565                           ; direct_byte           14     8 (fixed)
  4566                           ; jumptable            260     6 (fixed)
  4567                           ;	Chosen strategy is simple_byte
  4568  14C6  0820               	movf	??_TMR1_setState,w
  4569  14C7  3A00               	xorlw	0	; case 0
  4570  14C8  1903               	skipnz
  4571  14C9  2CBA               	goto	l481
  4572  14CA  3A01               	xorlw	1	; case 1
  4573  14CB  1903               	skipnz
  4574  14CC  2CBC               	goto	l483
  4575  14CD  2CCE               	goto	l485
  4576  14CE                     l485:	
  4577  14CE  0008               	return
  4578  14CF                     __end_of_TMR1_setState:	
  4579                           
  4580                           	psect	text25
  4581  1344                     __ptext25:	
  4582 ;; *************** function _TMR1_reload *****************
  4583 ;; Defined at:
  4584 ;;		line 71 in file "TIMER1.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  val             2    6[BANK0 ] unsigned short 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;		None
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  1    wreg      void 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4598 ;;      Params:         0       2       0       0       0
  4599 ;;      Locals:         0       0       0       0       0
  4600 ;;      Temps:          0       1       0       0       0
  4601 ;;      Totals:         0       3       0       0       0
  4602 ;;Total ram usage:        3 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; Hardware stack levels required when called:    3
  4605 ;; This function calls:
  4606 ;;		Nothing
  4607 ;; This function is called by:
  4608 ;;		_MO_fire_update
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           
  4613                           ;psect for function _TMR1_reload
  4614  1344                     _TMR1_reload:	
  4615                           
  4616                           ;TIMER1.c: 75:     (*((volatile tRegister *)(0x0E))).Reg = val;
  4617                           
  4618                           ;incstack = 0
  4619                           ; Regs used in _TMR1_reload: [wreg+status,2]
  4620  1344  1283               	bcf	3,5	;RP0=0, select bank0
  4621  1345  1303               	bcf	3,6	;RP1=0, select bank0
  4622  1346  0826               	movf	TMR1_reload@val,w
  4623  1347  00A8               	movwf	??_TMR1_reload
  4624  1348  0828               	movf	??_TMR1_reload,w
  4625  1349  008E               	movwf	14	;volatile
  4626                           
  4627                           ;TIMER1.c: 76:     (*((volatile tRegister *)(0x0F))).Reg = val >> 8;
  4628  134A  0827               	movf	TMR1_reload@val+1,w
  4629  134B  00A8               	movwf	??_TMR1_reload
  4630  134C  0828               	movf	??_TMR1_reload,w
  4631  134D  008F               	movwf	15	;volatile
  4632  134E  0008               	return
  4633  134F                     __end_of_TMR1_reload:	
  4634                           
  4635                           	psect	text26
  4636  0959                     __ptext26:	
  4637 ;; *************** function _TMR1_init *****************
  4638 ;; Defined at:
  4639 ;;		line 14 in file "TIMER1.c"
  4640 ;; Parameters:    Size  Location     Type
  4641 ;;  p               1    wreg     enum E872
  4642 ;;  m               1    0[BANK0 ] enum E868
  4643 ;;  s               1    1[BANK0 ] enum E878
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  p               1    4[BANK0 ] enum E872
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4655 ;;      Params:         0       2       0       0       0
  4656 ;;      Locals:         0       1       0       0       0
  4657 ;;      Temps:          0       2       0       0       0
  4658 ;;      Totals:         0       5       0       0       0
  4659 ;;Total ram usage:        5 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    3
  4662 ;; This function calls:
  4663 ;;		Nothing
  4664 ;; This function is called by:
  4665 ;;		_MO_fire_update
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           
  4670                           ;psect for function _TMR1_init
  4671  0959                     _TMR1_init:	
  4672                           
  4673                           ;incstack = 0
  4674                           ; Regs used in _TMR1_init: [wreg-fsr0h+status,2+status,0]
  4675                           ;TMR1_init@p stored from wreg
  4676  0959  1283               	bcf	3,5	;RP0=0, select bank0
  4677  095A  1303               	bcf	3,6	;RP1=0, select bank0
  4678  095B  00A4               	movwf	TMR1_init@p
  4679                           
  4680                           ;TIMER1.c: 18:     switch(p){
  4681  095C  296F               	goto	l2843
  4682  095D                     l2833:	
  4683                           
  4684                           ;TIMER1.c: 21:             ((*((volatile tRegister *)(0x10))).Reg = (*((volatile tRegist
      +                          er *)(0x10))).Reg & 0x0F);
  4685  095D  0810               	movf	16,w	;volatile
  4686  095E  390F               	andlw	15
  4687  095F  296B               	goto	L6
  4688  0960                     l2835:	
  4689                           ;TIMER1.c: 22:             break;
  4690                           
  4691                           
  4692                           ;TIMER1.c: 25:             ((*((volatile tRegister *)(0x10))).Reg = ((*((volatile tRegis
      +                          ter *)(0x10))).Reg & 0x0F) | (1 << 4));
  4693  0960  0810               	movf	16,w	;volatile
  4694  0961  390F               	andlw	15
  4695  0962  3810               	iorlw	16
  4696  0963  296B               	goto	L6
  4697  0964                     l2837:	
  4698                           ;TIMER1.c: 26:             break;
  4699                           
  4700                           
  4701                           ;TIMER1.c: 29:             ((*((volatile tRegister *)(0x10))).Reg = ((*((volatile tRegis
      +                          ter *)(0x10))).Reg & 0x0F) | (2 << 4));
  4702  0964  0810               	movf	16,w	;volatile
  4703  0965  390F               	andlw	15
  4704  0966  3820               	iorlw	32
  4705  0967  296B               	goto	L6
  4706  0968                     l2839:	
  4707                           ;TIMER1.c: 30:             break;
  4708                           
  4709                           
  4710                           ;TIMER1.c: 33:             ((*((volatile tRegister *)(0x10))).Reg = ((*((volatile tRegis
      +                          ter *)(0x10))).Reg & 0x0F) | (3 << 4));
  4711  0968  0810               	movf	16,w	;volatile
  4712  0969  390F               	andlw	15
  4713  096A  3830               	iorlw	48
  4714  096B                     L6:	
  4715  096B  00A2               	movwf	??_TMR1_init
  4716  096C  0822               	movf	??_TMR1_init,w
  4717  096D  0090               	movwf	16	;volatile
  4718                           
  4719                           ;TIMER1.c: 34:             break;
  4720  096E  2989               	goto	l2847
  4721  096F                     l2843:	
  4722  096F  0824               	movf	TMR1_init@p,w
  4723  0970  00A2               	movwf	??_TMR1_init
  4724  0971  01A3               	clrf	??_TMR1_init+1
  4725                           
  4726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4727                           ; Switch size 1, requested type "simple"
  4728                           ; Number of cases is 1, Range of values is 0 to 0
  4729                           ; switch strategies available:
  4730                           ; Name         Instructions Cycles
  4731                           ; simple_byte            4     3 (average)
  4732                           ; direct_byte           11     8 (fixed)
  4733                           ; jumptable            260     6 (fixed)
  4734                           ;	Chosen strategy is simple_byte
  4735  0972  0823               	movf	??_TMR1_init+1,w
  4736  0973  3A00               	xorlw	0	; case 0
  4737  0974  1903               	skipnz
  4738  0975  2977               	goto	l3943
  4739  0976  2989               	goto	l2847
  4740  0977                     l3943:	
  4741                           
  4742                           ; Switch size 1, requested type "simple"
  4743                           ; Number of cases is 4, Range of values is 0 to 3
  4744                           ; switch strategies available:
  4745                           ; Name         Instructions Cycles
  4746                           ; simple_byte           13     7 (average)
  4747                           ; direct_byte           20     8 (fixed)
  4748                           ; jumptable            260     6 (fixed)
  4749                           ;	Chosen strategy is simple_byte
  4750  0977  0822               	movf	??_TMR1_init,w
  4751  0978  3A00               	xorlw	0	; case 0
  4752  0979  1903               	skipnz
  4753  097A  295D               	goto	l2833
  4754  097B  3A01               	xorlw	1	; case 1
  4755  097C  1903               	skipnz
  4756  097D  2960               	goto	l2835
  4757  097E  3A03               	xorlw	3	; case 2
  4758  097F  1903               	skipnz
  4759  0980  2964               	goto	l2837
  4760  0981  3A01               	xorlw	1	; case 3
  4761  0982  1903               	skipnz
  4762  0983  2968               	goto	l2839
  4763  0984  2989               	goto	l2847
  4764  0985                     l462:	
  4765                           ;TIMER1.c: 42:         case TMR1_TMR_MODE :
  4766                           
  4767                           
  4768                           ;TIMER1.c: 43:             ((*((volatile tRegister *)(0x10))).Bits.BIT1 = 0);
  4769  0985  1090               	bcf	16,1	;volatile
  4770                           
  4771                           ;TIMER1.c: 44:             break;
  4772  0986  29A3               	goto	l2851
  4773  0987                     l464:	
  4774                           ;TIMER1.c: 46:         case TMR1_CNT_MODE :
  4775                           
  4776                           
  4777                           ;TIMER1.c: 47:             ((*((volatile tRegister *)(0x10))).Bits.BIT1 = 1);
  4778  0987  1490               	bsf	16,1	;volatile
  4779                           
  4780                           ;TIMER1.c: 48:             break;
  4781  0988  29A3               	goto	l2851
  4782  0989                     l2847:	
  4783  0989  0820               	movf	TMR1_init@m,w
  4784  098A  00A2               	movwf	??_TMR1_init
  4785  098B  01A3               	clrf	??_TMR1_init+1
  4786                           
  4787                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4788                           ; Switch size 1, requested type "simple"
  4789                           ; Number of cases is 1, Range of values is 0 to 0
  4790                           ; switch strategies available:
  4791                           ; Name         Instructions Cycles
  4792                           ; simple_byte            4     3 (average)
  4793                           ; direct_byte           11     8 (fixed)
  4794                           ; jumptable            260     6 (fixed)
  4795                           ;	Chosen strategy is simple_byte
  4796  098C  0823               	movf	??_TMR1_init+1,w
  4797  098D  3A00               	xorlw	0	; case 0
  4798  098E  1903               	skipnz
  4799  098F  2991               	goto	l3945
  4800  0990  29A3               	goto	l2851
  4801  0991                     l3945:	
  4802                           
  4803                           ; Switch size 1, requested type "simple"
  4804                           ; Number of cases is 2, Range of values is 0 to 1
  4805                           ; switch strategies available:
  4806                           ; Name         Instructions Cycles
  4807                           ; simple_byte            7     4 (average)
  4808                           ; direct_byte           14     8 (fixed)
  4809                           ; jumptable            260     6 (fixed)
  4810                           ;	Chosen strategy is simple_byte
  4811  0991  0822               	movf	??_TMR1_init,w
  4812  0992  3A00               	xorlw	0	; case 0
  4813  0993  1903               	skipnz
  4814  0994  2985               	goto	l462
  4815  0995  3A01               	xorlw	1	; case 1
  4816  0996  1903               	skipnz
  4817  0997  2987               	goto	l464
  4818  0998  29A3               	goto	l2851
  4819  0999                     l467:	
  4820                           ;TIMER1.c: 55:         case TMR1_OVF_EN :
  4821                           
  4822                           
  4823                           ;TIMER1.c: 56:             ((*((volatile tRegister *)(0x0B))).Bits.BIT7 = 1);
  4824  0999  178B               	bsf	11,7	;volatile
  4825                           
  4826                           ;TIMER1.c: 57:             ((*((volatile tRegister *)(0x0B))).Bits.BIT6 = 1);
  4827  099A  170B               	bsf	11,6	;volatile
  4828                           
  4829                           ;TIMER1.c: 58:             (TMR1IE = 1);
  4830  099B  1683               	bsf	3,5	;RP0=1, select bank1
  4831  099C  1303               	bcf	3,6	;RP1=0, select bank1
  4832  099D  140C               	bsf	12,0	;volatile
  4833                           
  4834                           ;TIMER1.c: 59:             break;
  4835  099E  0008               	return
  4836  099F                     l469:	
  4837                           ;TIMER1.c: 61:         case TMR1_OVF_DS :
  4838                           
  4839                           
  4840                           ;TIMER1.c: 62:             (TMR1IE = 0);
  4841  099F  1683               	bsf	3,5	;RP0=1, select bank1
  4842  09A0  1303               	bcf	3,6	;RP1=0, select bank1
  4843  09A1  100C               	bcf	12,0	;volatile
  4844                           
  4845                           ;TIMER1.c: 63:             break;
  4846  09A2  0008               	return
  4847  09A3                     l2851:	
  4848  09A3  0821               	movf	TMR1_init@s,w
  4849  09A4  00A2               	movwf	??_TMR1_init
  4850  09A5  01A3               	clrf	??_TMR1_init+1
  4851                           
  4852                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4853                           ; Switch size 1, requested type "simple"
  4854                           ; Number of cases is 1, Range of values is 0 to 0
  4855                           ; switch strategies available:
  4856                           ; Name         Instructions Cycles
  4857                           ; simple_byte            4     3 (average)
  4858                           ; direct_byte           11     8 (fixed)
  4859                           ; jumptable            260     6 (fixed)
  4860                           ;	Chosen strategy is simple_byte
  4861  09A6  0823               	movf	??_TMR1_init+1,w
  4862  09A7  3A00               	xorlw	0	; case 0
  4863  09A8  1903               	skipnz
  4864  09A9  29AB               	goto	l3947
  4865  09AA  29B3               	goto	l471
  4866  09AB                     l3947:	
  4867                           
  4868                           ; Switch size 1, requested type "simple"
  4869                           ; Number of cases is 2, Range of values is 0 to 1
  4870                           ; switch strategies available:
  4871                           ; Name         Instructions Cycles
  4872                           ; simple_byte            7     4 (average)
  4873                           ; direct_byte           14     8 (fixed)
  4874                           ; jumptable            260     6 (fixed)
  4875                           ;	Chosen strategy is simple_byte
  4876  09AB  0822               	movf	??_TMR1_init,w
  4877  09AC  3A00               	xorlw	0	; case 0
  4878  09AD  1903               	skipnz
  4879  09AE  2999               	goto	l467
  4880  09AF  3A01               	xorlw	1	; case 1
  4881  09B0  1903               	skipnz
  4882  09B1  299F               	goto	l469
  4883  09B2  29B3               	goto	l471
  4884  09B3                     l471:	
  4885  09B3  0008               	return
  4886  09B4                     __end_of_TMR1_init:	
  4887                           
  4888                           	psect	text27
  4889  076A                     __ptext27:	
  4890 ;; *************** function _DSP_update *****************
  4891 ;; Defined at:
  4892 ;;		line 43 in file "DISPLAY.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;  led_state       1   22[BANK0 ] enum E914
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4906 ;;      Params:         0       0       0       0       0
  4907 ;;      Locals:         0       2       0       0       0
  4908 ;;      Temps:          0       2       0       0       0
  4909 ;;      Totals:         0       4       0       0       0
  4910 ;;Total ram usage:        4 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    6
  4913 ;; This function calls:
  4914 ;;		_LED_setState
  4915 ;;		_LED_update
  4916 ;;		_SSD_setVal
  4917 ;;		_VC_getSpeed
  4918 ;;		___bmul
  4919 ;;		_switch_getState
  4920 ;; This function is called by:
  4921 ;;		_OS_schedular
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           
  4926                           ;psect for function _DSP_update
  4927  076A                     _DSP_update:	
  4928                           
  4929                           ;DISPLAY.c: 44:     static tByte DSP_counter = (0);;DISPLAY.c: 46:     DSP_counter += (1
      +                          0);
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _DSP_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4933  076A  300A               	movlw	10
  4934  076B  1283               	bcf	3,5	;RP0=0, select bank0
  4935  076C  1303               	bcf	3,6	;RP1=0, select bank0
  4936  076D  00B4               	movwf	??_DSP_update
  4937  076E  0834               	movf	??_DSP_update,w
  4938  076F  1683               	bsf	3,5	;RP0=1, select bank1
  4939  0770  1303               	bcf	3,6	;RP1=0, select bank1
  4940  0771  07DA               	addwf	DSP_update@DSP_counter^(0+128),f
  4941                           
  4942                           ;DISPLAY.c: 48:     if(DSP_counter != (20)){
  4943  0772  3014               	movlw	20
  4944  0773  065A               	xorwf	DSP_update@DSP_counter^(0+128),w
  4945  0774  1D03               	btfss	3,2
  4946  0775  0008               	return
  4947                           
  4948                           ;DISPLAY.c: 52:     DSP_counter = (0);
  4949  0776  01DA               	clrf	DSP_update@DSP_counter^(0+128)
  4950                           
  4951                           ;DISPLAY.c: 56:     VC_getSpeed(&DSP_speed);
  4952  0777  307D               	movlw	(low (_DSP_speed| 0))& (0+255)
  4953  0778  160A  118A  233A  120A  118A  	fcall	_VC_getSpeed
  4954                           
  4955                           ;DISPLAY.c: 61:     SSD_setVal(SSD_LOW,DSP_speed_patterns[DSP_speed][0]);
  4956  077D  3003               	movlw	3
  4957  077E  1283               	bcf	3,5	;RP0=0, select bank0
  4958  077F  1303               	bcf	3,6	;RP1=0, select bank0
  4959  0780  00B4               	movwf	??_DSP_update
  4960  0781  0834               	movf	??_DSP_update,w
  4961  0782  00A0               	movwf	___bmul@multiplicand
  4962  0783  087D               	movf	_DSP_speed,w
  4963  0784  160A  118A  239E  120A  118A  	fcall	___bmul
  4964  0789  3EAB               	addlw	(low (_DSP_speed_patterns| 0))& (0+255)
  4965  078A  0084               	movwf	4
  4966  078B  1383               	bcf	3,7	;select IRP bank1
  4967  078C  0800               	movf	0,w
  4968  078D  1283               	bcf	3,5	;RP0=0, select bank0
  4969  078E  1303               	bcf	3,6	;RP1=0, select bank0
  4970  078F  00B5               	movwf	??_DSP_update+1
  4971  0790  0835               	movf	??_DSP_update+1,w
  4972  0791  00B7               	movwf	_DSP_update$1966
  4973                           
  4974                           ;DISPLAY.c: 61:     SSD_setVal(SSD_LOW,DSP_speed_patterns[DSP_speed][0]);
  4975  0792  0837               	movf	_DSP_update$1966,w
  4976  0793  00B4               	movwf	??_DSP_update
  4977  0794  0834               	movf	??_DSP_update,w
  4978  0795  00A4               	movwf	SSD_setVal@val
  4979  0796  3000               	movlw	0
  4980  0797  160A  118A  2401  120A  118A  	fcall	_SSD_setVal
  4981                           
  4982                           ;DISPLAY.c: 62:     SSD_setVal(SSD_MID,DSP_speed_patterns[DSP_speed][1]);
  4983  079C  3003               	movlw	3
  4984  079D  1283               	bcf	3,5	;RP0=0, select bank0
  4985  079E  1303               	bcf	3,6	;RP1=0, select bank0
  4986  079F  00B4               	movwf	??_DSP_update
  4987  07A0  0834               	movf	??_DSP_update,w
  4988  07A1  00A0               	movwf	___bmul@multiplicand
  4989  07A2  087D               	movf	_DSP_speed,w
  4990  07A3  160A  118A  239E  120A  118A  	fcall	___bmul
  4991  07A8  3EAC               	addlw	(low ((_DSP_speed_patterns| 0+1)))& (0+255)
  4992  07A9  0084               	movwf	4
  4993  07AA  1383               	bcf	3,7	;select IRP bank1
  4994  07AB  0800               	movf	0,w
  4995  07AC  1283               	bcf	3,5	;RP0=0, select bank0
  4996  07AD  1303               	bcf	3,6	;RP1=0, select bank0
  4997  07AE  00B5               	movwf	??_DSP_update+1
  4998  07AF  0835               	movf	??_DSP_update+1,w
  4999  07B0  00B7               	movwf	_DSP_update$1966
  5000                           
  5001                           ;DISPLAY.c: 62:     SSD_setVal(SSD_MID,DSP_speed_patterns[DSP_speed][1]);
  5002  07B1  0837               	movf	_DSP_update$1966,w
  5003  07B2  00B4               	movwf	??_DSP_update
  5004  07B3  0834               	movf	??_DSP_update,w
  5005  07B4  00A4               	movwf	SSD_setVal@val
  5006  07B5  3001               	movlw	1
  5007  07B6  160A  118A  2401  120A  118A  	fcall	_SSD_setVal
  5008                           
  5009                           ;DISPLAY.c: 63:     SSD_setVal(SSD_HIGH,DSP_speed_patterns[DSP_speed][2]);
  5010  07BB  3003               	movlw	3
  5011  07BC  1283               	bcf	3,5	;RP0=0, select bank0
  5012  07BD  1303               	bcf	3,6	;RP1=0, select bank0
  5013  07BE  00B4               	movwf	??_DSP_update
  5014  07BF  0834               	movf	??_DSP_update,w
  5015  07C0  00A0               	movwf	___bmul@multiplicand
  5016  07C1  087D               	movf	_DSP_speed,w
  5017  07C2  160A  118A  239E  120A  118A  	fcall	___bmul
  5018  07C7  3EAD               	addlw	(low ((_DSP_speed_patterns| 0+2)))& (0+255)
  5019  07C8  0084               	movwf	4
  5020  07C9  1383               	bcf	3,7	;select IRP bank1
  5021  07CA  0800               	movf	0,w
  5022  07CB  1283               	bcf	3,5	;RP0=0, select bank0
  5023  07CC  1303               	bcf	3,6	;RP1=0, select bank0
  5024  07CD  00B5               	movwf	??_DSP_update+1
  5025  07CE  0835               	movf	??_DSP_update+1,w
  5026  07CF  00B7               	movwf	_DSP_update$1966
  5027                           
  5028                           ;DISPLAY.c: 63:     SSD_setVal(SSD_HIGH,DSP_speed_patterns[DSP_speed][2]);
  5029  07D0  0837               	movf	_DSP_update$1966,w
  5030  07D1  00B4               	movwf	??_DSP_update
  5031  07D2  0834               	movf	??_DSP_update,w
  5032  07D3  00A4               	movwf	SSD_setVal@val
  5033  07D4  3002               	movlw	2
  5034  07D5  160A  118A  2401  120A  118A  	fcall	_SSD_setVal
  5035                           
  5036                           ;DISPLAY.c: 67:     tLedState led_state = (switch_getState(sw_dust) == sw_pressed);
  5037  07DA  3002               	movlw	2
  5038  07DB  160A  118A  2416  120A  118A  	fcall	_switch_getState
  5039  07E0  3A02               	xorlw	2
  5040  07E1  1D03               	btfss	3,2
  5041  07E2  2FE5               	goto	u3700
  5042  07E3  3001               	movlw	1
  5043  07E4  2FE6               	goto	u3710
  5044  07E5                     u3700:	
  5045  07E5  3000               	movlw	0
  5046  07E6                     u3710:	
  5047  07E6  1283               	bcf	3,5	;RP0=0, select bank0
  5048  07E7  1303               	bcf	3,6	;RP1=0, select bank0
  5049  07E8  00B4               	movwf	??_DSP_update
  5050  07E9  0834               	movf	??_DSP_update,w
  5051  07EA  00B6               	movwf	DSP_update@led_state
  5052                           
  5053                           ;DISPLAY.c: 69:     LED_setState(LED_DUST,led_state);
  5054  07EB  0836               	movf	DSP_update@led_state,w
  5055  07EC  00B4               	movwf	??_DSP_update
  5056  07ED  0834               	movf	??_DSP_update,w
  5057  07EE  00A4               	movwf	LED_setState@state
  5058  07EF  3000               	movlw	0
  5059  07F0  160A  118A  23EC  120A  118A  	fcall	_LED_setState
  5060                           
  5061                           ;DISPLAY.c: 73:     LED_update();
  5062  07F5  160A  118A  2595   	fcall	_LED_update
  5063  07F8  0008               	return
  5064  07F9                     __end_of_DSP_update:	
  5065                           
  5066                           	psect	text28
  5067  1416                     __ptext28:	
  5068 ;; *************** function _switch_getState *****************
  5069 ;; Defined at:
  5070 ;;		line 64 in file "SWITCH.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  sw              1    wreg     enum E868
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  sw              1    6[BANK0 ] enum E868
  5075 ;;  ret             1    7[BANK0 ] enum E873
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  1    wreg      enum E873
  5078 ;; Registers used:
  5079 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5085 ;;      Params:         0       0       0       0       0
  5086 ;;      Locals:         0       2       0       0       0
  5087 ;;      Temps:          0       2       0       0       0
  5088 ;;      Totals:         0       4       0       0       0
  5089 ;;Total ram usage:        4 bytes
  5090 ;; Hardware stack levels used:    1
  5091 ;; Hardware stack levels required when called:    4
  5092 ;; This function calls:
  5093 ;;		___bmul
  5094 ;; This function is called by:
  5095 ;;		_sw_plus_handler
  5096 ;;		_sw_minus_handler
  5097 ;;		_sw_dust_handler
  5098 ;;		_DSP_update
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           
  5103                           ;psect for function _switch_getState
  5104  1416                     _switch_getState:	
  5105                           
  5106                           ;incstack = 0
  5107                           ; Regs used in _switch_getState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5108                           ;switch_getState@sw stored from wreg
  5109  1416  1283               	bcf	3,5	;RP0=0, select bank0
  5110  1417  1303               	bcf	3,6	;RP1=0, select bank0
  5111  1418  00A6               	movwf	switch_getState@sw
  5112                           
  5113                           ;SWITCH.c: 66:     tSw_State ret;;SWITCH.c: 68:     ret = switches_data[sw].state;
  5114  1419  300B               	movlw	11
  5115  141A  00A4               	movwf	??_switch_getState
  5116  141B  0824               	movf	??_switch_getState,w
  5117  141C  00A0               	movwf	___bmul@multiplicand
  5118  141D  0826               	movf	switch_getState@sw,w
  5119  141E  160A  118A  239E   	fcall	___bmul
  5120  1421  3E97               	addlw	(low ((_switches_data| (0+256)+7)))& (0+255)
  5121  1422  0084               	movwf	4
  5122  1423  1783               	bsf	3,7	;select IRP bank3
  5123  1424  0800               	movf	0,w
  5124  1425  1283               	bcf	3,5	;RP0=0, select bank0
  5125  1426  1303               	bcf	3,6	;RP1=0, select bank0
  5126  1427  00A5               	movwf	??_switch_getState+1
  5127  1428  0825               	movf	??_switch_getState+1,w
  5128  1429  00A7               	movwf	switch_getState@ret
  5129                           
  5130                           ;SWITCH.c: 70:     return ret;
  5131  142A  0827               	movf	switch_getState@ret,w
  5132  142B  0008               	return
  5133  142C                     __end_of_switch_getState:	
  5134                           
  5135                           	psect	text29
  5136  133A                     __ptext29:	
  5137 ;; *************** function _VC_getSpeed *****************
  5138 ;; Defined at:
  5139 ;;		line 48 in file "VACCUM.c"
  5140 ;; Parameters:    Size  Location     Type
  5141 ;;  ps              1    wreg     PTR enum E2
  5142 ;;		 -> DSP_speed(1), 
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;  ps              1    1[BANK0 ] PTR enum E2
  5145 ;;		 -> DSP_speed(1), 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      void 
  5148 ;; Registers used:
  5149 ;;		wreg, fsr0l, fsr0h
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5155 ;;      Params:         0       0       0       0       0
  5156 ;;      Locals:         0       1       0       0       0
  5157 ;;      Temps:          0       1       0       0       0
  5158 ;;      Totals:         0       2       0       0       0
  5159 ;;Total ram usage:        2 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    3
  5162 ;; This function calls:
  5163 ;;		Nothing
  5164 ;; This function is called by:
  5165 ;;		_DSP_update
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           
  5170                           ;psect for function _VC_getSpeed
  5171  133A                     _VC_getSpeed:	
  5172                           
  5173                           ;incstack = 0
  5174                           ; Regs used in _VC_getSpeed: [wregfsr0]
  5175                           ;VC_getSpeed@ps stored from wreg
  5176  133A  1283               	bcf	3,5	;RP0=0, select bank0
  5177  133B  1303               	bcf	3,6	;RP1=0, select bank0
  5178  133C  00A1               	movwf	VC_getSpeed@ps
  5179                           
  5180                           ;VACCUM.c: 49:     *(ps) = VC_current_speed;
  5181  133D  087B               	movf	_VC_current_speed,w
  5182  133E  00A0               	movwf	??_VC_getSpeed
  5183  133F  0821               	movf	VC_getSpeed@ps,w
  5184  1340  0084               	movwf	4
  5185  1341  0820               	movf	??_VC_getSpeed,w
  5186  1342  0080               	movwf	0
  5187  1343  0008               	return
  5188  1344                     __end_of_VC_getSpeed:	
  5189                           
  5190                           	psect	text30
  5191  1401                     __ptext30:	
  5192 ;; *************** function _SSD_setVal *****************
  5193 ;; Defined at:
  5194 ;;		line 65 in file "SSD.c"
  5195 ;; Parameters:    Size  Location     Type
  5196 ;;  ssd             1    wreg     enum E881
  5197 ;;  val             1    4[BANK0 ] unsigned char 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;  ssd             1    7[BANK0 ] enum E881
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      void 
  5202 ;; Registers used:
  5203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5209 ;;      Params:         0       1       0       0       0
  5210 ;;      Locals:         0       1       0       0       0
  5211 ;;      Temps:          0       2       0       0       0
  5212 ;;      Totals:         0       4       0       0       0
  5213 ;;Total ram usage:        4 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    4
  5216 ;; This function calls:
  5217 ;;		___bmul
  5218 ;; This function is called by:
  5219 ;;		_DSP_update
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           
  5224                           ;psect for function _SSD_setVal
  5225  1401                     _SSD_setVal:	
  5226                           
  5227                           ;incstack = 0
  5228                           ; Regs used in _SSD_setVal: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5229                           ;SSD_setVal@ssd stored from wreg
  5230  1401  1283               	bcf	3,5	;RP0=0, select bank0
  5231  1402  1303               	bcf	3,6	;RP1=0, select bank0
  5232  1403  00A7               	movwf	SSD_setVal@ssd
  5233                           
  5234                           ;SSD.c: 66:     ssd_data[ssd].val = val;
  5235  1404  0824               	movf	SSD_setVal@val,w
  5236  1405  00A5               	movwf	??_SSD_setVal
  5237  1406  300B               	movlw	11
  5238  1407  00A6               	movwf	??_SSD_setVal+1
  5239  1408  0826               	movf	??_SSD_setVal+1,w
  5240  1409  00A0               	movwf	___bmul@multiplicand
  5241  140A  0827               	movf	SSD_setVal@ssd,w
  5242  140B  160A  118A  239E   	fcall	___bmul
  5243  140E  3EBA               	addlw	(low ((_ssd_data| (0+256)+9)))& (0+255)
  5244  140F  0084               	movwf	4
  5245  1410  1283               	bcf	3,5	;RP0=0, select bank0
  5246  1411  1303               	bcf	3,6	;RP1=0, select bank0
  5247  1412  0825               	movf	??_SSD_setVal,w
  5248  1413  1783               	bsf	3,7	;select IRP bank3
  5249  1414  0080               	movwf	0
  5250  1415  0008               	return
  5251  1416                     __end_of_SSD_setVal:	
  5252                           
  5253                           	psect	text31
  5254  1595                     __ptext31:	
  5255 ;; *************** function _LED_update *****************
  5256 ;; Defined at:
  5257 ;;		line 72 in file "LED.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;  index           1   19[BANK0 ] enum E2
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      void 
  5264 ;; Registers used:
  5265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5271 ;;      Params:         0       0       0       0       0
  5272 ;;      Locals:         0       1       0       0       0
  5273 ;;      Temps:          0       1       0       0       0
  5274 ;;      Totals:         0       2       0       0       0
  5275 ;;Total ram usage:        2 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    5
  5278 ;; This function calls:
  5279 ;;		_LED_show
  5280 ;; This function is called by:
  5281 ;;		_DSP_update
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _LED_update
  5287  1595                     _LED_update:	
  5288                           
  5289                           ;LED.c: 74:     static tByte LED_counter = (0);;LED.c: 75:     tLed index;;LED.c: 77:   
      +                            LED_counter += (10);
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _LED_update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5293  1595  300A               	movlw	10
  5294  1596  1283               	bcf	3,5	;RP0=0, select bank0
  5295  1597  1303               	bcf	3,6	;RP1=0, select bank0
  5296  1598  00B2               	movwf	??_LED_update
  5297  1599  0832               	movf	??_LED_update,w
  5298  159A  1683               	bsf	3,5	;RP0=1, select bank1
  5299  159B  1303               	bcf	3,6	;RP1=0, select bank1
  5300  159C  07D9               	addwf	LED_update@LED_counter^(0+128),f
  5301                           
  5302                           ;LED.c: 79:     if (LED_counter < (20)){
  5303  159D  3014               	movlw	20
  5304  159E  0259               	subwf	LED_update@LED_counter^(0+128),w
  5305  159F  1C03               	btfss	3,0
  5306  15A0  0008               	return
  5307                           
  5308                           ;LED.c: 83:     for(index = 0 ; index < (1); index++){
  5309  15A1  1283               	bcf	3,5	;RP0=0, select bank0
  5310  15A2  1303               	bcf	3,6	;RP1=0, select bank0
  5311  15A3  01B3               	clrf	LED_update@index
  5312  15A4                     l3065:	
  5313                           
  5314                           ;LED.c: 84:         LED_show(index);
  5315  15A4  0833               	movf	LED_update@index,w
  5316  15A5  120A  158A  2439  160A  118A  	fcall	_LED_show
  5317                           
  5318                           ;LED.c: 85:     }
  5319  15AA  3001               	movlw	1
  5320  15AB  1283               	bcf	3,5	;RP0=0, select bank0
  5321  15AC  1303               	bcf	3,6	;RP1=0, select bank0
  5322  15AD  00B2               	movwf	??_LED_update
  5323  15AE  0832               	movf	??_LED_update,w
  5324  15AF  07B3               	addwf	LED_update@index,f
  5325  15B0  0833               	movf	LED_update@index,w
  5326  15B1  1D03               	btfss	3,2
  5327  15B2  0008               	return
  5328  15B3  2DA4               	goto	l3065
  5329  15B4                     __end_of_LED_update:	
  5330                           
  5331                           	psect	text32
  5332  13EC                     __ptext32:	
  5333 ;; *************** function _LED_setState *****************
  5334 ;; Defined at:
  5335 ;;		line 57 in file "LED.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  led             1    wreg     enum E2
  5338 ;;  state           1    4[BANK0 ] enum E5
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;  led             1    7[BANK0 ] enum E2
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5350 ;;      Params:         0       1       0       0       0
  5351 ;;      Locals:         0       1       0       0       0
  5352 ;;      Temps:          0       2       0       0       0
  5353 ;;      Totals:         0       4       0       0       0
  5354 ;;Total ram usage:        4 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    4
  5357 ;; This function calls:
  5358 ;;		___bmul
  5359 ;; This function is called by:
  5360 ;;		_DSP_update
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _LED_setState
  5366  13EC                     _LED_setState:	
  5367                           
  5368                           ;incstack = 0
  5369                           ; Regs used in _LED_setState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5370                           ;LED_setState@led stored from wreg
  5371  13EC  1283               	bcf	3,5	;RP0=0, select bank0
  5372  13ED  1303               	bcf	3,6	;RP1=0, select bank0
  5373  13EE  00A7               	movwf	LED_setState@led
  5374                           
  5375                           ;LED.c: 59:     LedDB[led].state = state;
  5376  13EF  0824               	movf	LED_setState@state,w
  5377  13F0  00A5               	movwf	??_LED_setState
  5378  13F1  3006               	movlw	6
  5379  13F2  00A6               	movwf	??_LED_setState+1
  5380  13F3  0826               	movf	??_LED_setState+1,w
  5381  13F4  00A0               	movwf	___bmul@multiplicand
  5382  13F5  0827               	movf	LED_setState@led,w
  5383  13F6  160A  118A  239E   	fcall	___bmul
  5384  13F9  3EC9               	addlw	(low ((_LedDB| 0+5)))& (0+255)
  5385  13FA  0084               	movwf	4
  5386  13FB  1283               	bcf	3,5	;RP0=0, select bank0
  5387  13FC  1303               	bcf	3,6	;RP1=0, select bank0
  5388  13FD  0825               	movf	??_LED_setState,w
  5389  13FE  1383               	bcf	3,7	;select IRP bank1
  5390  13FF  0080               	movwf	0
  5391  1400  0008               	return
  5392  1401                     __end_of_LED_setState:	
  5393                           
  5394                           	psect	text33
  5395  13D7                     __ptext33:	
  5396 ;; *************** function _OS_init *****************
  5397 ;; Defined at:
  5398 ;;		line 57 in file "MAIN_VACCUM.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;		None
  5401 ;; Auto vars:     Size  Location     Type
  5402 ;;		None
  5403 ;; Return value:  Size  Location     Type
  5404 ;;                  1    wreg      void 
  5405 ;; Registers used:
  5406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5407 ;; Tracked objects:
  5408 ;;		On entry : 0/0
  5409 ;;		On exit  : 0/0
  5410 ;;		Unchanged: 0/0
  5411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5412 ;;      Params:         0       0       0       0       0
  5413 ;;      Locals:         0       0       0       0       0
  5414 ;;      Temps:          0       0       0       0       0
  5415 ;;      Totals:         0       0       0       0       0
  5416 ;;Total ram usage:        0 bytes
  5417 ;; Hardware stack levels used:    1
  5418 ;; Hardware stack levels required when called:    8
  5419 ;; This function calls:
  5420 ;;		_T0_timer_mode_state
  5421 ;;		_timer0_init
  5422 ;;		_timer0_reload
  5423 ;; This function is called by:
  5424 ;;		_main
  5425 ;; This function uses a non-reentrant model
  5426 ;;
  5427                           
  5428                           
  5429                           ;psect for function _OS_init
  5430  13D7                     _OS_init:	
  5431                           
  5432                           ;MAIN_VACCUM.c: 61:     timer0_init(T0_PRESCALLER_128,T0_TIMER_MODE,T0_ON);
  5433                           
  5434                           ;incstack = 0
  5435 ;; hardware stack exceeded
  5436                           ; Regs used in _OS_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5437  13D7  1283               	bcf	3,5	;RP0=0, select bank0
  5438  13D8  1303               	bcf	3,6	;RP1=0, select bank0
  5439  13D9  01EE               	clrf	timer0_init@m
  5440  13DA  01EF               	clrf	timer0_init@o
  5441  13DB  3006               	movlw	6
  5442  13DC  120A  158A  2722  160A  118A  	fcall	_timer0_init
  5443                           
  5444                           ;MAIN_VACCUM.c: 62:     timer0_reload((99));
  5445  13E1  3063               	movlw	99
  5446  13E2  160A  118A  232A  160A  118A  	fcall	_timer0_reload
  5447                           
  5448                           ;MAIN_VACCUM.c: 63:     T0_timer_mode_state(T0_ON);
  5449  13E7  3000               	movlw	0
  5450  13E8  160A  118A  253C   	fcall	_T0_timer_mode_state
  5451  13EB  0008               	return
  5452  13EC                     __end_of_OS_init:	
  5453                           
  5454                           	psect	text34
  5455  0F22                     __ptext34:	
  5456 ;; *************** function _timer0_init *****************
  5457 ;; Defined at:
  5458 ;;		line 16 in file "TIMER0.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;  p               1    wreg     enum E868
  5461 ;;  m               1   78[BANK0 ] enum E878
  5462 ;;  o               1   79[BANK0 ] enum E886
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  p               1   10[BANK1 ] enum E868
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5474 ;;      Params:         0       2       0       0       0
  5475 ;;      Locals:         0       0       9       0       0
  5476 ;;      Temps:          0       0       2       0       0
  5477 ;;      Totals:         0       2      11       0       0
  5478 ;;Total ram usage:       13 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    7
  5481 ;; This function calls:
  5482 ;;		_T0_counter_mode_state
  5483 ;;		_T0_timer_mode_state
  5484 ;;		___fldiv
  5485 ;;		___fltol
  5486 ;;		___xxtofl
  5487 ;;		_round
  5488 ;;		_timer0_ovf_setState
  5489 ;;		_timer0_reload
  5490 ;;		_timer0_set_mode
  5491 ;;		_timer0_set_prescaller
  5492 ;; This function is called by:
  5493 ;;		_OS_init
  5494 ;; This function uses a non-reentrant model
  5495 ;;
  5496                           
  5497                           
  5498                           ;psect for function _timer0_init
  5499  0F22                     _timer0_init:	
  5500                           
  5501                           ;incstack = 0
  5502 ;; hardware stack exceeded
  5503                           ; Regs used in _timer0_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5504                           ;timer0_init@p stored from wreg
  5505  0F22  1683               	bsf	3,5	;RP0=1, select bank1
  5506  0F23  1303               	bcf	3,6	;RP1=0, select bank1
  5507  0F24  00E9               	movwf	timer0_init@p^(0+128)
  5508                           
  5509                           ;TIMER0.c: 17:     timer0_set_prescaller(p);
  5510  0F25  0869               	movf	timer0_init@p^(0+128),w
  5511  0F26  120A  158A  24B5  120A  158A  	fcall	_timer0_set_prescaller
  5512                           
  5513                           ;TIMER0.c: 19:     timer0_set_mode(m);
  5514  0F2B  1283               	bcf	3,5	;RP0=0, select bank0
  5515  0F2C  1303               	bcf	3,6	;RP1=0, select bank0
  5516  0F2D  086E               	movf	timer0_init@m,w
  5517  0F2E  160A  118A  2559  120A  158A  	fcall	_timer0_set_mode
  5518                           
  5519                           ;TIMER0.c: 21:     timer0_ovf_setState(o);
  5520  0F33  1283               	bcf	3,5	;RP0=0, select bank0
  5521  0F34  1303               	bcf	3,6	;RP1=0, select bank0
  5522  0F35  086F               	movf	timer0_init@o,w
  5523  0F36  160A  118A  24CF  120A  158A  	fcall	_timer0_ovf_setState
  5524                           
  5525                           ;TIMER0.c: 23:     switch(m){
  5526  0F3B  2F4A               	goto	l3291
  5527  0F3C                     l3285:	
  5528                           
  5529                           ;TIMER0.c: 25:             T0_timer_mode_state(T0_OFF);
  5530  0F3C  3001               	movlw	1
  5531  0F3D  160A  118A  253C  120A  158A  	fcall	_T0_timer_mode_state
  5532                           
  5533                           ;TIMER0.c: 26:             break;
  5534  0F42  2F5E               	goto	l3293
  5535  0F43                     l3287:	
  5536                           
  5537                           ;TIMER0.c: 28:             T0_counter_mode_state(T0_OFF);
  5538  0F43  3001               	movlw	1
  5539  0F44  160A  118A  251F  120A  158A  	fcall	_T0_counter_mode_state
  5540                           
  5541                           ;TIMER0.c: 29:             break;
  5542  0F49  2F5E               	goto	l3293
  5543  0F4A                     l3291:	
  5544  0F4A  1283               	bcf	3,5	;RP0=0, select bank0
  5545  0F4B  1303               	bcf	3,6	;RP1=0, select bank0
  5546  0F4C  086E               	movf	timer0_init@m,w
  5547  0F4D  1683               	bsf	3,5	;RP0=1, select bank1
  5548  0F4E  1303               	bcf	3,6	;RP1=0, select bank1
  5549  0F4F  00DF               	movwf	??_timer0_init^(0+128)
  5550  0F50  01E0               	clrf	(??_timer0_init^(0+128)+1)
  5551                           
  5552                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5553                           ; Switch size 1, requested type "simple"
  5554                           ; Number of cases is 1, Range of values is 0 to 0
  5555                           ; switch strategies available:
  5556                           ; Name         Instructions Cycles
  5557                           ; simple_byte            4     3 (average)
  5558                           ; direct_byte           11     8 (fixed)
  5559                           ; jumptable            260     6 (fixed)
  5560                           ;	Chosen strategy is simple_byte
  5561  0F51  0860               	movf	(??_timer0_init+1)^(0+128),w
  5562  0F52  3A00               	xorlw	0	; case 0
  5563  0F53  1903               	skipnz
  5564  0F54  2F56               	goto	l3949
  5565  0F55  2F5E               	goto	l3293
  5566  0F56                     l3949:	
  5567                           
  5568                           ; Switch size 1, requested type "simple"
  5569                           ; Number of cases is 2, Range of values is 0 to 1
  5570                           ; switch strategies available:
  5571                           ; Name         Instructions Cycles
  5572                           ; simple_byte            7     4 (average)
  5573                           ; direct_byte           14     8 (fixed)
  5574                           ; jumptable            260     6 (fixed)
  5575                           ;	Chosen strategy is simple_byte
  5576  0F56  085F               	movf	??_timer0_init^(0+128),w
  5577  0F57  3A00               	xorlw	0	; case 0
  5578  0F58  1903               	skipnz
  5579  0F59  2F3C               	goto	l3285
  5580  0F5A  3A01               	xorlw	1	; case 1
  5581  0F5B  1903               	skipnz
  5582  0F5C  2F43               	goto	l3287
  5583  0F5D  2F5E               	goto	l3293
  5584  0F5E                     l3293:	
  5585                           
  5586                           ;TIMER0.c: 35:     timer0_reload((0xFF));
  5587  0F5E  30FF               	movlw	255
  5588  0F5F  160A  118A  232A  120A  158A  	fcall	_timer0_reload
  5589                           
  5590                           ;TIMER0.c: 37:     T0_OneCountTime = (tWord) round((T0_PreScaller) / 2.0);
  5591  0F64  1683               	bsf	3,5	;RP0=1, select bank1
  5592  0F65  1303               	bcf	3,6	;RP1=0, select bank1
  5593  0F66  0854               	movf	_T0_PreScaller^(0+128),w
  5594  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  5595  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  5596  0F69  00A0               	movwf	___xxtofl@val
  5597  0F6A  1683               	bsf	3,5	;RP0=1, select bank1
  5598  0F6B  1303               	bcf	3,6	;RP1=0, select bank1
  5599  0F6C  0855               	movf	(_T0_PreScaller+1)^(0+128),w
  5600  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  5601  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  5602  0F6F  00A1               	movwf	___xxtofl@val+1
  5603  0F70  01A2               	clrf	___xxtofl@val+2
  5604  0F71  01A3               	clrf	___xxtofl@val+3
  5605  0F72  3000               	movlw	0
  5606  0F73  120A  158A  25BC  120A  158A  	fcall	___xxtofl
  5607  0F78  1283               	bcf	3,5	;RP0=0, select bank0
  5608  0F79  1303               	bcf	3,6	;RP1=0, select bank0
  5609  0F7A  0823               	movf	?___xxtofl+3,w
  5610  0F7B  00B5               	movwf	___fldiv@b+3
  5611  0F7C  0822               	movf	?___xxtofl+2,w
  5612  0F7D  00B4               	movwf	___fldiv@b+2
  5613  0F7E  0821               	movf	?___xxtofl+1,w
  5614  0F7F  00B3               	movwf	___fldiv@b+1
  5615  0F80  0820               	movf	?___xxtofl,w
  5616  0F81  00B2               	movwf	___fldiv@b
  5617  0F82  3040               	movlw	64
  5618  0F83  00B1               	movwf	___fldiv@a+3
  5619  0F84  3000               	movlw	0
  5620  0F85  00B0               	movwf	___fldiv@a+2
  5621  0F86  3000               	movlw	0
  5622  0F87  00AF               	movwf	___fldiv@a+1
  5623  0F88  3000               	movlw	0
  5624  0F89  00AE               	movwf	___fldiv@a
  5625  0F8A  120A  118A  24C5  120A  158A  	fcall	___fldiv
  5626  0F8F  1283               	bcf	3,5	;RP0=0, select bank0
  5627  0F90  1303               	bcf	3,6	;RP1=0, select bank0
  5628  0F91  0831               	movf	?___fldiv+3,w
  5629  0F92  1683               	bsf	3,5	;RP0=1, select bank1
  5630  0F93  1303               	bcf	3,6	;RP1=0, select bank1
  5631  0F94  00E4               	movwf	(_timer0_init$1518+3)^(0+128)
  5632  0F95  1283               	bcf	3,5	;RP0=0, select bank0
  5633  0F96  1303               	bcf	3,6	;RP1=0, select bank0
  5634  0F97  0830               	movf	?___fldiv+2,w
  5635  0F98  1683               	bsf	3,5	;RP0=1, select bank1
  5636  0F99  1303               	bcf	3,6	;RP1=0, select bank1
  5637  0F9A  00E3               	movwf	(_timer0_init$1518+2)^(0+128)
  5638  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  5639  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  5640  0F9D  082F               	movf	?___fldiv+1,w
  5641  0F9E  1683               	bsf	3,5	;RP0=1, select bank1
  5642  0F9F  1303               	bcf	3,6	;RP1=0, select bank1
  5643  0FA0  00E2               	movwf	(_timer0_init$1518+1)^(0+128)
  5644  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  5645  0FA2  1303               	bcf	3,6	;RP1=0, select bank0
  5646  0FA3  082E               	movf	?___fldiv,w
  5647  0FA4  1683               	bsf	3,5	;RP0=1, select bank1
  5648  0FA5  1303               	bcf	3,6	;RP1=0, select bank1
  5649  0FA6  00E1               	movwf	_timer0_init$1518^(0+128)
  5650                           
  5651                           ;TIMER0.c: 37:     T0_OneCountTime = (tWord) round((T0_PreScaller) / 2.0);
  5652  0FA7  0864               	movf	(_timer0_init$1518+3)^(0+128),w
  5653  0FA8  1283               	bcf	3,5	;RP0=0, select bank0
  5654  0FA9  1303               	bcf	3,6	;RP1=0, select bank0
  5655  0FAA  00E9               	movwf	round@x+3
  5656  0FAB  1683               	bsf	3,5	;RP0=1, select bank1
  5657  0FAC  1303               	bcf	3,6	;RP1=0, select bank1
  5658  0FAD  0863               	movf	(_timer0_init$1518+2)^(0+128),w
  5659  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  5660  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  5661  0FB0  00E8               	movwf	round@x+2
  5662  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  5663  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  5664  0FB3  0862               	movf	(_timer0_init$1518+1)^(0+128),w
  5665  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  5666  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  5667  0FB6  00E7               	movwf	round@x+1
  5668  0FB7  1683               	bsf	3,5	;RP0=1, select bank1
  5669  0FB8  1303               	bcf	3,6	;RP1=0, select bank1
  5670  0FB9  0861               	movf	_timer0_init$1518^(0+128),w
  5671  0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  5672  0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  5673  0FBC  00E6               	movwf	round@x
  5674  0FBD  120A  158A  2213  120A  158A  	fcall	_round
  5675  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  5676  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  5677  0FC4  0869               	movf	?_round+3,w
  5678  0FC5  1683               	bsf	3,5	;RP0=1, select bank1
  5679  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  5680  0FC7  00E8               	movwf	(_timer0_init$1519+3)^(0+128)
  5681  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  5682  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  5683  0FCA  0868               	movf	?_round+2,w
  5684  0FCB  1683               	bsf	3,5	;RP0=1, select bank1
  5685  0FCC  1303               	bcf	3,6	;RP1=0, select bank1
  5686  0FCD  00E7               	movwf	(_timer0_init$1519+2)^(0+128)
  5687  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  5688  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  5689  0FD0  0867               	movf	?_round+1,w
  5690  0FD1  1683               	bsf	3,5	;RP0=1, select bank1
  5691  0FD2  1303               	bcf	3,6	;RP1=0, select bank1
  5692  0FD3  00E6               	movwf	(_timer0_init$1519+1)^(0+128)
  5693  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
  5694  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
  5695  0FD6  0866               	movf	?_round,w
  5696  0FD7  1683               	bsf	3,5	;RP0=1, select bank1
  5697  0FD8  1303               	bcf	3,6	;RP1=0, select bank1
  5698  0FD9  00E5               	movwf	_timer0_init$1519^(0+128)
  5699                           
  5700                           ;TIMER0.c: 37:     T0_OneCountTime = (tWord) round((T0_PreScaller) / 2.0);
  5701  0FDA  0868               	movf	(_timer0_init$1519+3)^(0+128),w
  5702  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  5703  0FDC  1303               	bcf	3,6	;RP1=0, select bank0
  5704  0FDD  00CB               	movwf	___fltol@f1+3
  5705  0FDE  1683               	bsf	3,5	;RP0=1, select bank1
  5706  0FDF  1303               	bcf	3,6	;RP1=0, select bank1
  5707  0FE0  0867               	movf	(_timer0_init$1519+2)^(0+128),w
  5708  0FE1  1283               	bcf	3,5	;RP0=0, select bank0
  5709  0FE2  1303               	bcf	3,6	;RP1=0, select bank0
  5710  0FE3  00CA               	movwf	___fltol@f1+2
  5711  0FE4  1683               	bsf	3,5	;RP0=1, select bank1
  5712  0FE5  1303               	bcf	3,6	;RP1=0, select bank1
  5713  0FE6  0866               	movf	(_timer0_init$1519+1)^(0+128),w
  5714  0FE7  1283               	bcf	3,5	;RP0=0, select bank0
  5715  0FE8  1303               	bcf	3,6	;RP1=0, select bank0
  5716  0FE9  00C9               	movwf	___fltol@f1+1
  5717  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
  5718  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  5719  0FEC  0865               	movf	_timer0_init$1519^(0+128),w
  5720  0FED  1283               	bcf	3,5	;RP0=0, select bank0
  5721  0FEE  1303               	bcf	3,6	;RP1=0, select bank0
  5722  0FEF  00C8               	movwf	___fltol@f1
  5723  0FF0  120A  158A  2278   	fcall	___fltol
  5724  0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  5725  0FF4  1303               	bcf	3,6	;RP1=0, select bank0
  5726  0FF5  0849               	movf	?___fltol+1,w
  5727  0FF6  1683               	bsf	3,5	;RP0=1, select bank1
  5728  0FF7  1303               	bcf	3,6	;RP1=0, select bank1
  5729  0FF8  00D3               	movwf	(_T0_OneCountTime+1)^(0+128)
  5730  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  5731  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  5732  0FFB  0848               	movf	?___fltol,w
  5733  0FFC  1683               	bsf	3,5	;RP0=1, select bank1
  5734  0FFD  1303               	bcf	3,6	;RP1=0, select bank1
  5735  0FFE  00D2               	movwf	_T0_OneCountTime^(0+128)
  5736  0FFF  0008               	return
  5737  1000                     __end_of_timer0_init:	
  5738                           
  5739                           	psect	text35
  5740  0CB5                     __ptext35:	
  5741 ;; *************** function _timer0_set_prescaller *****************
  5742 ;; Defined at:
  5743 ;;		line 85 in file "TIMER0.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  p               1    wreg     enum E868
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;  p               1    2[BANK0 ] enum E868
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5757 ;;      Params:         0       0       0       0       0
  5758 ;;      Locals:         0       1       0       0       0
  5759 ;;      Temps:          0       2       0       0       0
  5760 ;;      Totals:         0       3       0       0       0
  5761 ;;Total ram usage:        3 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    3
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_timer0_init
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _timer0_set_prescaller
  5773  0CB5                     _timer0_set_prescaller:	
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _timer0_set_prescaller: [wreg-fsr0h+status,2+status,0]
  5777                           ;timer0_set_prescaller@p stored from wreg
  5778  0CB5  1283               	bcf	3,5	;RP0=0, select bank0
  5779  0CB6  1303               	bcf	3,6	;RP1=0, select bank0
  5780  0CB7  00A2               	movwf	timer0_set_prescaller@p
  5781                           
  5782                           ;TIMER0.c: 87:     switch(p){
  5783  0CB8  2D11               	goto	l2961
  5784  0CB9                     l222:	
  5785                           ;TIMER0.c: 88:         case T0_PRESCALLER_2:
  5786                           
  5787                           
  5788                           ;TIMER0.c: 89:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  5789  0CB9  1683               	bsf	3,5	;RP0=1, select bank1
  5790  0CBA  1303               	bcf	3,6	;RP1=0, select bank1
  5791  0CBB  1181               	bcf	1,3	;volatile
  5792  0CBC  1001               	bcf	1,0	;volatile
  5793  0CBD  1081               	bcf	1,1	;volatile
  5794  0CBE  1101               	bcf	1,2	;volatile
  5795                           
  5796                           ;TIMER0.c: 90:             T0_PreScaller = 2;
  5797  0CBF  3002               	movlw	2
  5798  0CC0  00D4               	movwf	_T0_PreScaller^(0+128)
  5799  0CC1  3000               	movlw	0
  5800  0CC2  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5801                           
  5802                           ;TIMER0.c: 91:             break;
  5803  0CC3  0008               	return
  5804  0CC4                     l224:	
  5805                           ;TIMER0.c: 92:         case T0_PRESCALLER_4:
  5806                           
  5807                           
  5808                           ;TIMER0.c: 93:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  5809  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  5810  0CC5  1303               	bcf	3,6	;RP1=0, select bank1
  5811  0CC6  1181               	bcf	1,3	;volatile
  5812  0CC7  1401               	bsf	1,0	;volatile
  5813  0CC8  1081               	bcf	1,1	;volatile
  5814  0CC9  1101               	bcf	1,2	;volatile
  5815                           
  5816                           ;TIMER0.c: 94:             T0_PreScaller = 4;
  5817  0CCA  3004               	movlw	4
  5818  0CCB  00D4               	movwf	_T0_PreScaller^(0+128)
  5819  0CCC  3000               	movlw	0
  5820  0CCD  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5821                           
  5822                           ;TIMER0.c: 95:             break;
  5823  0CCE  0008               	return
  5824  0CCF                     l225:	
  5825                           ;TIMER0.c: 96:         case T0_PRESCALLER_8:
  5826                           
  5827                           
  5828                           ;TIMER0.c: 97:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vol
      +                          atile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1)
      +                           = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  5829  0CCF  1683               	bsf	3,5	;RP0=1, select bank1
  5830  0CD0  1303               	bcf	3,6	;RP1=0, select bank1
  5831  0CD1  1181               	bcf	1,3	;volatile
  5832  0CD2  1001               	bcf	1,0	;volatile
  5833  0CD3  1481               	bsf	1,1	;volatile
  5834  0CD4  1101               	bcf	1,2	;volatile
  5835                           
  5836                           ;TIMER0.c: 98:             T0_PreScaller = 8;
  5837  0CD5  3008               	movlw	8
  5838  0CD6  00D4               	movwf	_T0_PreScaller^(0+128)
  5839  0CD7  3000               	movlw	0
  5840  0CD8  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5841                           
  5842                           ;TIMER0.c: 99:             break;
  5843  0CD9  0008               	return
  5844  0CDA                     l226:	
  5845                           ;TIMER0.c: 100:         case T0_PRESCALLER_16:
  5846                           
  5847                           
  5848                           ;TIMER0.c: 101:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1
      +                          ) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 0;
  5849  0CDA  1683               	bsf	3,5	;RP0=1, select bank1
  5850  0CDB  1303               	bcf	3,6	;RP1=0, select bank1
  5851  0CDC  1181               	bcf	1,3	;volatile
  5852  0CDD  1401               	bsf	1,0	;volatile
  5853  0CDE  1481               	bsf	1,1	;volatile
  5854  0CDF  1101               	bcf	1,2	;volatile
  5855                           
  5856                           ;TIMER0.c: 102:             T0_PreScaller = 16;
  5857  0CE0  3010               	movlw	16
  5858  0CE1  00D4               	movwf	_T0_PreScaller^(0+128)
  5859  0CE2  3000               	movlw	0
  5860  0CE3  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5861                           
  5862                           ;TIMER0.c: 103:             break;
  5863  0CE4  0008               	return
  5864  0CE5                     l227:	
  5865                           ;TIMER0.c: 104:         case T0_PRESCALLER_32:
  5866                           
  5867                           
  5868                           ;TIMER0.c: 105:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1
      +                          ) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  5869  0CE5  1683               	bsf	3,5	;RP0=1, select bank1
  5870  0CE6  1303               	bcf	3,6	;RP1=0, select bank1
  5871  0CE7  1181               	bcf	1,3	;volatile
  5872  0CE8  1001               	bcf	1,0	;volatile
  5873  0CE9  1081               	bcf	1,1	;volatile
  5874  0CEA  1501               	bsf	1,2	;volatile
  5875                           
  5876                           ;TIMER0.c: 106:             T0_PreScaller = 32;
  5877  0CEB  3020               	movlw	32
  5878  0CEC  00D4               	movwf	_T0_PreScaller^(0+128)
  5879  0CED  3000               	movlw	0
  5880  0CEE  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5881                           
  5882                           ;TIMER0.c: 107:             break;
  5883  0CEF  0008               	return
  5884  0CF0                     l228:	
  5885                           ;TIMER0.c: 108:         case T0_PRESCALLER_64:
  5886                           
  5887                           
  5888                           ;TIMER0.c: 109:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1
      +                          ) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  5889  0CF0  1683               	bsf	3,5	;RP0=1, select bank1
  5890  0CF1  1303               	bcf	3,6	;RP1=0, select bank1
  5891  0CF2  1181               	bcf	1,3	;volatile
  5892  0CF3  1401               	bsf	1,0	;volatile
  5893  0CF4  1081               	bcf	1,1	;volatile
  5894  0CF5  1501               	bsf	1,2	;volatile
  5895                           
  5896                           ;TIMER0.c: 110:             T0_PreScaller = 64;
  5897  0CF6  3040               	movlw	64
  5898  0CF7  00D4               	movwf	_T0_PreScaller^(0+128)
  5899  0CF8  3000               	movlw	0
  5900  0CF9  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5901                           
  5902                           ;TIMER0.c: 111:             break;
  5903  0CFA  0008               	return
  5904  0CFB                     l229:	
  5905                           ;TIMER0.c: 112:         case T0_PRESCALLER_128:
  5906                           
  5907                           
  5908                           ;TIMER0.c: 113:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister *)(0x81))).Bits.BIT0) = 0; ((*((volatile tRegister *)(0x81))).Bits.BIT1
      +                          ) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  5909  0CFB  1683               	bsf	3,5	;RP0=1, select bank1
  5910  0CFC  1303               	bcf	3,6	;RP1=0, select bank1
  5911  0CFD  1181               	bcf	1,3	;volatile
  5912  0CFE  1001               	bcf	1,0	;volatile
  5913  0CFF  1481               	bsf	1,1	;volatile
  5914  0D00  1501               	bsf	1,2	;volatile
  5915                           
  5916                           ;TIMER0.c: 114:             T0_PreScaller = 128;
  5917  0D01  3080               	movlw	128
  5918  0D02  00D4               	movwf	_T0_PreScaller^(0+128)
  5919  0D03  3000               	movlw	0
  5920  0D04  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5921                           
  5922                           ;TIMER0.c: 115:             break;
  5923  0D05  0008               	return
  5924  0D06                     l230:	
  5925                           ;TIMER0.c: 116:         case T0_PRESCALLER_256:
  5926                           
  5927                           
  5928                           ;TIMER0.c: 117:             ((*((volatile tRegister *)(0x81))).Bits.BIT3) = (0); ((*((vo
      +                          latile tRegister *)(0x81))).Bits.BIT0) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT1
      +                          ) = 1; ((*((volatile tRegister *)(0x81))).Bits.BIT2) = 1;
  5929  0D06  1683               	bsf	3,5	;RP0=1, select bank1
  5930  0D07  1303               	bcf	3,6	;RP1=0, select bank1
  5931  0D08  1181               	bcf	1,3	;volatile
  5932  0D09  1401               	bsf	1,0	;volatile
  5933  0D0A  1481               	bsf	1,1	;volatile
  5934  0D0B  1501               	bsf	1,2	;volatile
  5935                           
  5936                           ;TIMER0.c: 118:             T0_PreScaller = 256;
  5937  0D0C  3000               	movlw	0
  5938  0D0D  00D4               	movwf	_T0_PreScaller^(0+128)
  5939  0D0E  3001               	movlw	1
  5940  0D0F  00D5               	movwf	(_T0_PreScaller^(0+128)+1)
  5941                           
  5942                           ;TIMER0.c: 119:             break;
  5943  0D10  0008               	return
  5944  0D11                     l2961:	
  5945  0D11  0822               	movf	timer0_set_prescaller@p,w
  5946  0D12  00A0               	movwf	??_timer0_set_prescaller
  5947  0D13  01A1               	clrf	??_timer0_set_prescaller+1
  5948                           
  5949                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5950                           ; Switch size 1, requested type "simple"
  5951                           ; Number of cases is 1, Range of values is 0 to 0
  5952                           ; switch strategies available:
  5953                           ; Name         Instructions Cycles
  5954                           ; simple_byte            4     3 (average)
  5955                           ; direct_byte           11     8 (fixed)
  5956                           ; jumptable            260     6 (fixed)
  5957                           ;	Chosen strategy is simple_byte
  5958  0D14  0821               	movf	??_timer0_set_prescaller+1,w
  5959  0D15  3A00               	xorlw	0	; case 0
  5960  0D16  1903               	skipnz
  5961  0D17  2D19               	goto	l3951
  5962  0D18  2D33               	goto	l232
  5963  0D19                     l3951:	
  5964                           
  5965                           ; Switch size 1, requested type "simple"
  5966                           ; Number of cases is 8, Range of values is 0 to 7
  5967                           ; switch strategies available:
  5968                           ; Name         Instructions Cycles
  5969                           ; simple_byte           25    13 (average)
  5970                           ; direct_byte           32     8 (fixed)
  5971                           ; jumptable            260     6 (fixed)
  5972                           ;	Chosen strategy is simple_byte
  5973  0D19  0820               	movf	??_timer0_set_prescaller,w
  5974  0D1A  3A00               	xorlw	0	; case 0
  5975  0D1B  1903               	skipnz
  5976  0D1C  2CB9               	goto	l222
  5977  0D1D  3A01               	xorlw	1	; case 1
  5978  0D1E  1903               	skipnz
  5979  0D1F  2CC4               	goto	l224
  5980  0D20  3A03               	xorlw	3	; case 2
  5981  0D21  1903               	skipnz
  5982  0D22  2CCF               	goto	l225
  5983  0D23  3A01               	xorlw	1	; case 3
  5984  0D24  1903               	skipnz
  5985  0D25  2CDA               	goto	l226
  5986  0D26  3A07               	xorlw	7	; case 4
  5987  0D27  1903               	skipnz
  5988  0D28  2CE5               	goto	l227
  5989  0D29  3A01               	xorlw	1	; case 5
  5990  0D2A  1903               	skipnz
  5991  0D2B  2CF0               	goto	l228
  5992  0D2C  3A03               	xorlw	3	; case 6
  5993  0D2D  1903               	skipnz
  5994  0D2E  2CFB               	goto	l229
  5995  0D2F  3A01               	xorlw	1	; case 7
  5996  0D30  1903               	skipnz
  5997  0D31  2D06               	goto	l230
  5998  0D32  2D33               	goto	l232
  5999  0D33                     l232:	
  6000  0D33  0008               	return
  6001  0D34                     __end_of_timer0_set_prescaller:	
  6002                           
  6003                           	psect	text36
  6004  1559                     __ptext36:	
  6005 ;; *************** function _timer0_set_mode *****************
  6006 ;; Defined at:
  6007 ;;		line 126 in file "TIMER0.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  m               1    wreg     enum E878
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  m               1    2[BANK0 ] enum E878
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  1    wreg      void 
  6014 ;; Registers used:
  6015 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6021 ;;      Params:         0       0       0       0       0
  6022 ;;      Locals:         0       1       0       0       0
  6023 ;;      Temps:          0       2       0       0       0
  6024 ;;      Totals:         0       3       0       0       0
  6025 ;;Total ram usage:        3 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; Hardware stack levels required when called:    3
  6028 ;; This function calls:
  6029 ;;		Nothing
  6030 ;; This function is called by:
  6031 ;;		_timer0_init
  6032 ;; This function uses a non-reentrant model
  6033 ;;
  6034                           
  6035                           
  6036                           ;psect for function _timer0_set_mode
  6037  1559                     _timer0_set_mode:	
  6038                           
  6039                           ;incstack = 0
  6040                           ; Regs used in _timer0_set_mode: [wreg-fsr0h+status,2+status,0]
  6041                           ;timer0_set_mode@m stored from wreg
  6042  1559  1283               	bcf	3,5	;RP0=0, select bank0
  6043  155A  1303               	bcf	3,6	;RP1=0, select bank0
  6044  155B  00A2               	movwf	timer0_set_mode@m
  6045                           
  6046                           ;TIMER0.c: 128:     switch(m){
  6047  155C  2D65               	goto	l2973
  6048  155D                     l236:	
  6049                           ;TIMER0.c: 129:         case T0_TIMER_MODE:
  6050                           
  6051                           
  6052                           ;TIMER0.c: 130:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 0);
  6053  155D  1683               	bsf	3,5	;RP0=1, select bank1
  6054  155E  1303               	bcf	3,6	;RP1=0, select bank1
  6055  155F  1281               	bcf	1,5	;volatile
  6056                           
  6057                           ;TIMER0.c: 131:             break;
  6058  1560  0008               	return
  6059  1561                     l238:	
  6060                           ;TIMER0.c: 132:         case T0_COUNTER_MODE :
  6061                           
  6062                           
  6063                           ;TIMER0.c: 133:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 1);
  6064  1561  1683               	bsf	3,5	;RP0=1, select bank1
  6065  1562  1303               	bcf	3,6	;RP1=0, select bank1
  6066  1563  1681               	bsf	1,5	;volatile
  6067                           
  6068                           ;TIMER0.c: 134:             break;
  6069  1564  0008               	return
  6070  1565                     l2973:	
  6071  1565  0822               	movf	timer0_set_mode@m,w
  6072  1566  00A0               	movwf	??_timer0_set_mode
  6073  1567  01A1               	clrf	??_timer0_set_mode+1
  6074                           
  6075                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6076                           ; Switch size 1, requested type "simple"
  6077                           ; Number of cases is 1, Range of values is 0 to 0
  6078                           ; switch strategies available:
  6079                           ; Name         Instructions Cycles
  6080                           ; simple_byte            4     3 (average)
  6081                           ; direct_byte           11     8 (fixed)
  6082                           ; jumptable            260     6 (fixed)
  6083                           ;	Chosen strategy is simple_byte
  6084  1568  0821               	movf	??_timer0_set_mode+1,w
  6085  1569  3A00               	xorlw	0	; case 0
  6086  156A  1903               	skipnz
  6087  156B  2D6D               	goto	l3953
  6088  156C  2D75               	goto	l240
  6089  156D                     l3953:	
  6090                           
  6091                           ; Switch size 1, requested type "simple"
  6092                           ; Number of cases is 2, Range of values is 0 to 1
  6093                           ; switch strategies available:
  6094                           ; Name         Instructions Cycles
  6095                           ; simple_byte            7     4 (average)
  6096                           ; direct_byte           14     8 (fixed)
  6097                           ; jumptable            260     6 (fixed)
  6098                           ;	Chosen strategy is simple_byte
  6099  156D  0820               	movf	??_timer0_set_mode,w
  6100  156E  3A00               	xorlw	0	; case 0
  6101  156F  1903               	skipnz
  6102  1570  2D5D               	goto	l236
  6103  1571  3A01               	xorlw	1	; case 1
  6104  1572  1903               	skipnz
  6105  1573  2D61               	goto	l238
  6106  1574  2D75               	goto	l240
  6107  1575                     l240:	
  6108  1575  0008               	return
  6109  1576                     __end_of_timer0_set_mode:	
  6110                           
  6111                           	psect	text37
  6112  132A                     __ptext37:	
  6113 ;; *************** function _timer0_reload *****************
  6114 ;; Defined at:
  6115 ;;		line 41 in file "TIMER0.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;  val             1    wreg     unsigned char 
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;  val             1    1[BANK0 ] unsigned char 
  6120 ;; Return value:  Size  Location     Type
  6121 ;;                  1    wreg      void 
  6122 ;; Registers used:
  6123 ;;		wreg
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6129 ;;      Params:         0       0       0       0       0
  6130 ;;      Locals:         0       1       0       0       0
  6131 ;;      Temps:          0       1       0       0       0
  6132 ;;      Totals:         0       2       0       0       0
  6133 ;;Total ram usage:        2 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    3
  6136 ;; This function calls:
  6137 ;;		Nothing
  6138 ;; This function is called by:
  6139 ;;		_OS_init
  6140 ;;		_timer0_init
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _timer0_reload
  6146  132A                     _timer0_reload:	
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _timer0_reload: [wreg]
  6150                           ;timer0_reload@val stored from wreg
  6151  132A  1283               	bcf	3,5	;RP0=0, select bank0
  6152  132B  1303               	bcf	3,6	;RP1=0, select bank0
  6153  132C  00A1               	movwf	timer0_reload@val
  6154                           
  6155                           ;TIMER0.c: 43:     ((*((volatile tRegister *)(0x01))).Reg) = val;
  6156  132D  0821               	movf	timer0_reload@val,w
  6157  132E  00A0               	movwf	??_timer0_reload
  6158  132F  0820               	movf	??_timer0_reload,w
  6159  1330  0081               	movwf	1	;volatile
  6160  1331  0008               	return
  6161  1332                     __end_of_timer0_reload:	
  6162                           
  6163                           	psect	text38
  6164  14CF                     __ptext38:	
  6165 ;; *************** function _timer0_ovf_setState *****************
  6166 ;; Defined at:
  6167 ;;		line 141 in file "TIMER0.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  o               1    wreg     enum E886
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  o               1    2[BANK0 ] enum E886
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6181 ;;      Params:         0       0       0       0       0
  6182 ;;      Locals:         0       1       0       0       0
  6183 ;;      Temps:          0       2       0       0       0
  6184 ;;      Totals:         0       3       0       0       0
  6185 ;;Total ram usage:        3 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    3
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_timer0_init
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function _timer0_ovf_setState
  6197  14CF                     _timer0_ovf_setState:	
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _timer0_ovf_setState: [wreg-fsr0h+status,2+status,0]
  6201                           ;timer0_ovf_setState@o stored from wreg
  6202  14CF  1283               	bcf	3,5	;RP0=0, select bank0
  6203  14D0  1303               	bcf	3,6	;RP1=0, select bank0
  6204  14D1  00A2               	movwf	timer0_ovf_setState@o
  6205                           
  6206                           ;TIMER0.c: 142:     switch(o){
  6207  14D2  2CD8               	goto	l2985
  6208  14D3                     l244:	
  6209                           ;TIMER0.c: 143:         case T0_OVF_ENABLE :
  6210                           
  6211                           
  6212                           ;TIMER0.c: 144:             ((*((volatile tRegister *)(0x0B))).Bits.BIT7 = 1);
  6213  14D3  178B               	bsf	11,7	;volatile
  6214                           
  6215                           ;TIMER0.c: 145:             (((*((volatile tRegister *)(0x0B))).Bits.BIT5) = 1);
  6216  14D4  168B               	bsf	11,5	;volatile
  6217                           
  6218                           ;TIMER0.c: 146:             break;
  6219  14D5  0008               	return
  6220  14D6                     l246:	
  6221                           ;TIMER0.c: 147:         case T0_OVF_DISABLE :
  6222                           
  6223                           
  6224                           ;TIMER0.c: 148:             (((*((volatile tRegister *)(0x0B))).Bits.BIT5) = 0);
  6225  14D6  128B               	bcf	11,5	;volatile
  6226                           
  6227                           ;TIMER0.c: 149:             break;
  6228  14D7  0008               	return
  6229  14D8                     l2985:	
  6230  14D8  0822               	movf	timer0_ovf_setState@o,w
  6231  14D9  00A0               	movwf	??_timer0_ovf_setState
  6232  14DA  01A1               	clrf	??_timer0_ovf_setState+1
  6233                           
  6234                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6235                           ; Switch size 1, requested type "simple"
  6236                           ; Number of cases is 1, Range of values is 0 to 0
  6237                           ; switch strategies available:
  6238                           ; Name         Instructions Cycles
  6239                           ; simple_byte            4     3 (average)
  6240                           ; direct_byte           11     8 (fixed)
  6241                           ; jumptable            260     6 (fixed)
  6242                           ;	Chosen strategy is simple_byte
  6243  14DB  0821               	movf	??_timer0_ovf_setState+1,w
  6244  14DC  3A00               	xorlw	0	; case 0
  6245  14DD  1903               	skipnz
  6246  14DE  2CE0               	goto	l3955
  6247  14DF  2CE8               	goto	l248
  6248  14E0                     l3955:	
  6249                           
  6250                           ; Switch size 1, requested type "simple"
  6251                           ; Number of cases is 2, Range of values is 0 to 1
  6252                           ; switch strategies available:
  6253                           ; Name         Instructions Cycles
  6254                           ; simple_byte            7     4 (average)
  6255                           ; direct_byte           14     8 (fixed)
  6256                           ; jumptable            260     6 (fixed)
  6257                           ;	Chosen strategy is simple_byte
  6258  14E0  0820               	movf	??_timer0_ovf_setState,w
  6259  14E1  3A00               	xorlw	0	; case 0
  6260  14E2  1903               	skipnz
  6261  14E3  2CD3               	goto	l244
  6262  14E4  3A01               	xorlw	1	; case 1
  6263  14E5  1903               	skipnz
  6264  14E6  2CD6               	goto	l246
  6265  14E7  2CE8               	goto	l248
  6266  14E8                     l248:	
  6267  14E8  0008               	return
  6268  14E9                     __end_of_timer0_ovf_setState:	
  6269                           
  6270                           	psect	text39
  6271  0A13                     __ptext39:	
  6272 ;; *************** function _round *****************
  6273 ;; Defined at:
  6274 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\round.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;  x               4   70[BANK0 ] void 
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;  f               4   74[BANK0 ] void 
  6279 ;; Return value:  Size  Location     Type
  6280 ;;                  4   70[BANK0 ] void 
  6281 ;; Registers used:
  6282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/0
  6285 ;;		On exit  : 0/0
  6286 ;;		Unchanged: 0/0
  6287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6288 ;;      Params:         0       4       0       0       0
  6289 ;;      Locals:         0       4       0       0       0
  6290 ;;      Temps:          0       0       0       0       0
  6291 ;;      Totals:         0       8       0       0       0
  6292 ;;Total ram usage:        8 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    6
  6295 ;; This function calls:
  6296 ;;		___fladd
  6297 ;;		___flsub
  6298 ;;		_trunc
  6299 ;; This function is called by:
  6300 ;;		_timer0_init
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _round
  6306  0A13                     _round:	
  6307                           
  6308                           ;incstack = 0
  6309 ;; hardware stack exceeded
  6310                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6311  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  6312  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  6313  0A15  0869               	movf	round@x+3,w
  6314  0A16  00D6               	movwf	trunc@x+3
  6315  0A17  0868               	movf	round@x+2,w
  6316  0A18  00D5               	movwf	trunc@x+2
  6317  0A19  0867               	movf	round@x+1,w
  6318  0A1A  00D4               	movwf	trunc@x+1
  6319  0A1B  0866               	movf	round@x,w
  6320  0A1C  00D3               	movwf	trunc@x
  6321  0A1D  120A  158A  2104  120A  158A  	fcall	_trunc
  6322  0A22  1283               	bcf	3,5	;RP0=0, select bank0
  6323  0A23  1303               	bcf	3,6	;RP1=0, select bank0
  6324  0A24  0856               	movf	?_trunc+3,w
  6325  0A25  00E1               	movwf	___flsub@a+3
  6326  0A26  0855               	movf	?_trunc+2,w
  6327  0A27  00E0               	movwf	___flsub@a+2
  6328  0A28  0854               	movf	?_trunc+1,w
  6329  0A29  00DF               	movwf	___flsub@a+1
  6330  0A2A  0853               	movf	?_trunc,w
  6331  0A2B  00DE               	movwf	___flsub@a
  6332  0A2C  0869               	movf	round@x+3,w
  6333  0A2D  00E5               	movwf	___flsub@b+3
  6334  0A2E  0868               	movf	round@x+2,w
  6335  0A2F  00E4               	movwf	___flsub@b+2
  6336  0A30  0867               	movf	round@x+1,w
  6337  0A31  00E3               	movwf	___flsub@b+1
  6338  0A32  0866               	movf	round@x,w
  6339  0A33  00E2               	movwf	___flsub@b
  6340  0A34  160A  118A  25D3  120A  158A  	fcall	___flsub
  6341  0A39  1283               	bcf	3,5	;RP0=0, select bank0
  6342  0A3A  1303               	bcf	3,6	;RP1=0, select bank0
  6343  0A3B  0861               	movf	?___flsub+3,w
  6344  0A3C  00ED               	movwf	round@f+3
  6345  0A3D  0860               	movf	?___flsub+2,w
  6346  0A3E  00EC               	movwf	round@f+2
  6347  0A3F  085F               	movf	?___flsub+1,w
  6348  0A40  00EB               	movwf	round@f+1
  6349  0A41  085E               	movf	?___flsub,w
  6350  0A42  00EA               	movwf	round@f
  6351  0A43  086D               	movf	round@f+3,w
  6352  0A44  00A3               	movwf	___fladd@b+3
  6353  0A45  086C               	movf	round@f+2,w
  6354  0A46  00A2               	movwf	___fladd@b+2
  6355  0A47  086B               	movf	round@f+1,w
  6356  0A48  00A1               	movwf	___fladd@b+1
  6357  0A49  086A               	movf	round@f,w
  6358  0A4A  00A0               	movwf	___fladd@b
  6359  0A4B  0869               	movf	round@x+3,w
  6360  0A4C  00A7               	movwf	___fladd@a+3
  6361  0A4D  0868               	movf	round@x+2,w
  6362  0A4E  00A6               	movwf	___fladd@a+2
  6363  0A4F  0867               	movf	round@x+1,w
  6364  0A50  00A5               	movwf	___fladd@a+1
  6365  0A51  0866               	movf	round@x,w
  6366  0A52  00A4               	movwf	___fladd@a
  6367  0A53  120A  118A  2296  120A  158A  	fcall	___fladd
  6368  0A58  1283               	bcf	3,5	;RP0=0, select bank0
  6369  0A59  1303               	bcf	3,6	;RP1=0, select bank0
  6370  0A5A  0823               	movf	?___fladd+3,w
  6371  0A5B  00E9               	movwf	round@x+3
  6372  0A5C  0822               	movf	?___fladd+2,w
  6373  0A5D  00E8               	movwf	round@x+2
  6374  0A5E  0821               	movf	?___fladd+1,w
  6375  0A5F  00E7               	movwf	round@x+1
  6376  0A60  0820               	movf	?___fladd,w
  6377  0A61  00E6               	movwf	round@x
  6378  0A62  0869               	movf	round@x+3,w
  6379  0A63  00D6               	movwf	trunc@x+3
  6380  0A64  0868               	movf	round@x+2,w
  6381  0A65  00D5               	movwf	trunc@x+2
  6382  0A66  0867               	movf	round@x+1,w
  6383  0A67  00D4               	movwf	trunc@x+1
  6384  0A68  0866               	movf	round@x,w
  6385  0A69  00D3               	movwf	trunc@x
  6386  0A6A  120A  158A  2104   	fcall	_trunc
  6387  0A6D  1283               	bcf	3,5	;RP0=0, select bank0
  6388  0A6E  1303               	bcf	3,6	;RP1=0, select bank0
  6389  0A6F  0856               	movf	?_trunc+3,w
  6390  0A70  00E9               	movwf	?_round+3
  6391  0A71  0855               	movf	?_trunc+2,w
  6392  0A72  00E8               	movwf	?_round+2
  6393  0A73  0854               	movf	?_trunc+1,w
  6394  0A74  00E7               	movwf	?_round+1
  6395  0A75  0853               	movf	?_trunc,w
  6396  0A76  00E6               	movwf	?_round
  6397  0A77  0008               	return
  6398  0A78                     __end_of_round:	
  6399                           
  6400                           	psect	text40
  6401  0904                     __ptext40:	
  6402 ;; *************** function _trunc *****************
  6403 ;; Defined at:
  6404 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\trunc.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  x               4   51[BANK0 ] void 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  i               4   56[BANK0 ] void 
  6409 ;;  expon           2   60[BANK0 ] int 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  4   51[BANK0 ] int 
  6412 ;; Registers used:
  6413 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6419 ;;      Params:         0       4       0       0       0
  6420 ;;      Locals:         0       6       0       0       0
  6421 ;;      Temps:          0       1       0       0       0
  6422 ;;      Totals:         0      11       0       0       0
  6423 ;;Total ram usage:       11 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    5
  6426 ;; This function calls:
  6427 ;;		___fltol
  6428 ;;		___xxtofl
  6429 ;;		_frexp
  6430 ;; This function is called by:
  6431 ;;		_round
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function _trunc
  6437  0904                     _trunc:	
  6438                           
  6439                           ;incstack = 0
  6440 ;; hardware stack exceeded
  6441                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6442  0904  1283               	bcf	3,5	;RP0=0, select bank0
  6443  0905  1303               	bcf	3,6	;RP1=0, select bank0
  6444  0906  0856               	movf	trunc@x+3,w
  6445  0907  00AF               	movwf	frexp@value+3
  6446  0908  0855               	movf	trunc@x+2,w
  6447  0909  00AE               	movwf	frexp@value+2
  6448  090A  0854               	movf	trunc@x+1,w
  6449  090B  00AD               	movwf	frexp@value+1
  6450  090C  0853               	movf	trunc@x,w
  6451  090D  00AC               	movwf	frexp@value
  6452  090E  305C               	movlw	(low (trunc@expon| 0))& (0+255)
  6453  090F  00D7               	movwf	??_trunc
  6454  0910  0857               	movf	??_trunc,w
  6455  0911  00B0               	movwf	frexp@eptr
  6456  0912  120A  158A  20B2  120A  158A  	fcall	_frexp
  6457  0917  1283               	bcf	3,5	;RP0=0, select bank0
  6458  0918  1303               	bcf	3,6	;RP1=0, select bank0
  6459  0919  1FDD               	btfss	trunc@expon+1,7
  6460  091A  2924               	goto	l2903
  6461  091B  3000               	movlw	0
  6462  091C  00D6               	movwf	?_trunc+3
  6463  091D  3000               	movlw	0
  6464  091E  00D5               	movwf	?_trunc+2
  6465  091F  3000               	movlw	0
  6466  0920  00D4               	movwf	?_trunc+1
  6467  0921  3000               	movlw	0
  6468  0922  00D3               	movwf	?_trunc
  6469  0923  0008               	return
  6470  0924                     l2903:	
  6471  0924  3000               	movlw	0
  6472  0925  025D               	subwf	trunc@expon+1,w
  6473  0926  301D               	movlw	29
  6474  0927  1903               	skipnz
  6475  0928  025C               	subwf	trunc@expon,w
  6476  0929  1803               	btfsc	3,0
  6477  092A  0008               	return
  6478  092B  0856               	movf	trunc@x+3,w
  6479  092C  00CB               	movwf	___fltol@f1+3
  6480  092D  0855               	movf	trunc@x+2,w
  6481  092E  00CA               	movwf	___fltol@f1+2
  6482  092F  0854               	movf	trunc@x+1,w
  6483  0930  00C9               	movwf	___fltol@f1+1
  6484  0931  0853               	movf	trunc@x,w
  6485  0932  00C8               	movwf	___fltol@f1
  6486  0933  120A  158A  2278  120A  158A  	fcall	___fltol
  6487  0938  1283               	bcf	3,5	;RP0=0, select bank0
  6488  0939  1303               	bcf	3,6	;RP1=0, select bank0
  6489  093A  084B               	movf	?___fltol+3,w
  6490  093B  00A3               	movwf	___xxtofl@val+3
  6491  093C  084A               	movf	?___fltol+2,w
  6492  093D  00A2               	movwf	___xxtofl@val+2
  6493  093E  0849               	movf	?___fltol+1,w
  6494  093F  00A1               	movwf	___xxtofl@val+1
  6495  0940  0848               	movf	?___fltol,w
  6496  0941  00A0               	movwf	___xxtofl@val
  6497  0942  3001               	movlw	1
  6498  0943  120A  158A  25BC   	fcall	___xxtofl
  6499  0946  1283               	bcf	3,5	;RP0=0, select bank0
  6500  0947  1303               	bcf	3,6	;RP1=0, select bank0
  6501  0948  0823               	movf	?___xxtofl+3,w
  6502  0949  00DB               	movwf	trunc@i+3
  6503  094A  0822               	movf	?___xxtofl+2,w
  6504  094B  00DA               	movwf	trunc@i+2
  6505  094C  0821               	movf	?___xxtofl+1,w
  6506  094D  00D9               	movwf	trunc@i+1
  6507  094E  0820               	movf	?___xxtofl,w
  6508  094F  00D8               	movwf	trunc@i
  6509  0950  085B               	movf	trunc@i+3,w
  6510  0951  00D6               	movwf	?_trunc+3
  6511  0952  085A               	movf	trunc@i+2,w
  6512  0953  00D5               	movwf	?_trunc+2
  6513  0954  0859               	movf	trunc@i+1,w
  6514  0955  00D4               	movwf	?_trunc+1
  6515  0956  0858               	movf	trunc@i,w
  6516  0957  00D3               	movwf	?_trunc
  6517  0958  0008               	return
  6518  0959                     __end_of_trunc:	
  6519                           
  6520                           	psect	text41
  6521  08B2                     __ptext41:	
  6522 ;; *************** function _frexp *****************
  6523 ;; Defined at:
  6524 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\frexp.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  value           4   12[BANK0 ] int 
  6527 ;;  eptr            1   16[BANK0 ] PTR int 
  6528 ;;		 -> trunc@expon(2), 
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  4   12[BANK0 ] PTR int 
  6533 ;; Registers used:
  6534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 0/0
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6540 ;;      Params:         0       5       0       0       0
  6541 ;;      Locals:         0       0       0       0       0
  6542 ;;      Temps:          0       2       0       0       0
  6543 ;;      Totals:         0       7       0       0       0
  6544 ;;Total ram usage:        7 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    4
  6547 ;; This function calls:
  6548 ;;		___fleq
  6549 ;; This function is called by:
  6550 ;;		_trunc
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function _frexp
  6556  08B2                     _frexp:	
  6557                           
  6558                           ;incstack = 0
  6559 ;; hardware stack exceeded
  6560                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6561  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  6562  08B3  1303               	bcf	3,6	;RP1=0, select bank0
  6563  08B4  082F               	movf	frexp@value+3,w
  6564  08B5  00A3               	movwf	___fleq@ff1+3
  6565  08B6  082E               	movf	frexp@value+2,w
  6566  08B7  00A2               	movwf	___fleq@ff1+2
  6567  08B8  082D               	movf	frexp@value+1,w
  6568  08B9  00A1               	movwf	___fleq@ff1+1
  6569  08BA  082C               	movf	frexp@value,w
  6570  08BB  00A0               	movwf	___fleq@ff1
  6571  08BC  3000               	movlw	0
  6572  08BD  00A7               	movwf	___fleq@ff2+3
  6573  08BE  3000               	movlw	0
  6574  08BF  00A6               	movwf	___fleq@ff2+2
  6575  08C0  3000               	movlw	0
  6576  08C1  00A5               	movwf	___fleq@ff2+1
  6577  08C2  3000               	movlw	0
  6578  08C3  00A4               	movwf	___fleq@ff2
  6579  08C4  120A  158A  2068  120A  158A  	fcall	___fleq
  6580  08C9  1C03               	btfss	3,0
  6581  08CA  28D4               	goto	l2781
  6582  08CB  1283               	bcf	3,5	;RP0=0, select bank0
  6583  08CC  1303               	bcf	3,6	;RP1=0, select bank0
  6584  08CD  0830               	movf	frexp@eptr,w
  6585  08CE  0084               	movwf	4
  6586  08CF  1383               	bcf	3,7	;select IRP bank0
  6587  08D0  0180               	clrf	0
  6588  08D1  0A84               	incf	4,f
  6589  08D2  0180               	clrf	0
  6590  08D3  0008               	return
  6591  08D4                     l2781:	
  6592  08D4  1283               	bcf	3,5	;RP0=0, select bank0
  6593  08D5  1303               	bcf	3,6	;RP1=0, select bank0
  6594  08D6  082F               	movf	frexp@value+3,w
  6595  08D7  397F               	andlw	127
  6596  08D8  00B1               	movwf	??_frexp
  6597  08D9  01B2               	clrf	??_frexp+1
  6598  08DA  1003               	clrc
  6599  08DB  0DB1               	rlf	??_frexp,f
  6600  08DC  0DB2               	rlf	??_frexp+1,f
  6601  08DD  0830               	movf	frexp@eptr,w
  6602  08DE  0084               	movwf	4
  6603  08DF  0831               	movf	??_frexp,w
  6604  08E0  1383               	bcf	3,7	;select IRP bank0
  6605  08E1  0080               	movwf	0
  6606  08E2  0A84               	incf	4,f
  6607  08E3  0832               	movf	??_frexp+1,w
  6608  08E4  0080               	movwf	0
  6609  08E5  0D2E               	rlf	frexp@value+2,w
  6610  08E6  0D2E               	rlf	frexp@value+2,w
  6611  08E7  3901               	andlw	1
  6612  08E8  00B1               	movwf	??_frexp
  6613  08E9  01B2               	clrf	??_frexp+1
  6614  08EA  0830               	movf	frexp@eptr,w
  6615  08EB  0084               	movwf	4
  6616  08EC  0831               	movf	??_frexp,w
  6617  08ED  0480               	iorwf	0,f
  6618  08EE  0A84               	incf	4,f
  6619  08EF  0832               	movf	??_frexp+1,w
  6620  08F0  0480               	iorwf	0,f
  6621  08F1  0830               	movf	frexp@eptr,w
  6622  08F2  0084               	movwf	4
  6623  08F3  3082               	movlw	130
  6624  08F4  0780               	addwf	0,f
  6625  08F5  0F84               	incfsz	4,f
  6626  08F6  0800               	movf	0,w
  6627  08F7  1803               	skipnc
  6628  08F8  0A00               	incf	0,w
  6629  08F9  00FF               	movwf	127
  6630  08FA  30FF               	movlw	255
  6631  08FB  077F               	addwf	127,w
  6632  08FC  0080               	movwf	0
  6633  08FD  0384               	decf	4,f
  6634  08FE  082F               	movf	frexp@value+3,w
  6635  08FF  3980               	andlw	-128
  6636  0900  383F               	iorlw	63
  6637  0901  00AF               	movwf	frexp@value+3
  6638  0902  13AE               	bcf	frexp@value+2,7
  6639  0903  0008               	return
  6640  0904                     __end_of_frexp:	
  6641                           
  6642                           	psect	text42
  6643  0868                     __ptext42:	
  6644 ;; *************** function ___fleq *****************
  6645 ;; Defined at:
  6646 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fleq.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  ff1             4    0[BANK0 ] PTR int 
  6649 ;;  ff2             4    4[BANK0 ] PTR int 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6661 ;;      Params:         0       8       0       0       0
  6662 ;;      Locals:         0       0       0       0       0
  6663 ;;      Temps:          0       4       0       0       0
  6664 ;;      Totals:         0      12       0       0       0
  6665 ;;Total ram usage:       12 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    3
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_frexp
  6672 ;; This function uses a non-reentrant model
  6673 ;;
  6674                           
  6675                           
  6676                           ;psect for function ___fleq
  6677  0868                     ___fleq:	
  6678                           
  6679                           ;incstack = 0
  6680 ;; hardware stack exceeded
  6681                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  6682  0868  3000               	movlw	0
  6683  0869  1283               	bcf	3,5	;RP0=0, select bank0
  6684  086A  1303               	bcf	3,6	;RP1=0, select bank0
  6685  086B  0520               	andwf	___fleq@ff1,w
  6686  086C  00A8               	movwf	??___fleq
  6687  086D  3000               	movlw	0
  6688  086E  0521               	andwf	___fleq@ff1+1,w
  6689  086F  00A9               	movwf	??___fleq+1
  6690  0870  3080               	movlw	128
  6691  0871  0522               	andwf	___fleq@ff1+2,w
  6692  0872  00AA               	movwf	??___fleq+2
  6693  0873  307F               	movlw	127
  6694  0874  0523               	andwf	___fleq@ff1+3,w
  6695  0875  00AB               	movwf	??___fleq+3
  6696  0876  082B               	movf	??___fleq+3,w
  6697  0877  042A               	iorwf	??___fleq+2,w
  6698  0878  0429               	iorwf	??___fleq+1,w
  6699  0879  0428               	iorwf	??___fleq,w
  6700  087A  1D03               	skipz
  6701  087B  2884               	goto	l740
  6702  087C  3000               	movlw	0
  6703  087D  00A3               	movwf	___fleq@ff1+3
  6704  087E  3000               	movlw	0
  6705  087F  00A2               	movwf	___fleq@ff1+2
  6706  0880  3000               	movlw	0
  6707  0881  00A1               	movwf	___fleq@ff1+1
  6708  0882  3000               	movlw	0
  6709  0883  00A0               	movwf	___fleq@ff1
  6710  0884                     l740:	
  6711  0884  3000               	movlw	0
  6712  0885  0524               	andwf	___fleq@ff2,w
  6713  0886  00A8               	movwf	??___fleq
  6714  0887  3000               	movlw	0
  6715  0888  0525               	andwf	___fleq@ff2+1,w
  6716  0889  00A9               	movwf	??___fleq+1
  6717  088A  3080               	movlw	128
  6718  088B  0526               	andwf	___fleq@ff2+2,w
  6719  088C  00AA               	movwf	??___fleq+2
  6720  088D  307F               	movlw	127
  6721  088E  0527               	andwf	___fleq@ff2+3,w
  6722  088F  00AB               	movwf	??___fleq+3
  6723  0890  082B               	movf	??___fleq+3,w
  6724  0891  042A               	iorwf	??___fleq+2,w
  6725  0892  0429               	iorwf	??___fleq+1,w
  6726  0893  0428               	iorwf	??___fleq,w
  6727  0894  1D03               	skipz
  6728  0895  289E               	goto	l741
  6729  0896  3000               	movlw	0
  6730  0897  00A7               	movwf	___fleq@ff2+3
  6731  0898  3000               	movlw	0
  6732  0899  00A6               	movwf	___fleq@ff2+2
  6733  089A  3000               	movlw	0
  6734  089B  00A5               	movwf	___fleq@ff2+1
  6735  089C  3000               	movlw	0
  6736  089D  00A4               	movwf	___fleq@ff2
  6737  089E                     l741:	
  6738  089E  0827               	movf	___fleq@ff2+3,w
  6739  089F  0623               	xorwf	___fleq@ff1+3,w
  6740  08A0  1D03               	skipz
  6741  08A1  28AC               	goto	u1975
  6742  08A2  0826               	movf	___fleq@ff2+2,w
  6743  08A3  0622               	xorwf	___fleq@ff1+2,w
  6744  08A4  1D03               	skipz
  6745  08A5  28AC               	goto	u1975
  6746  08A6  0825               	movf	___fleq@ff2+1,w
  6747  08A7  0621               	xorwf	___fleq@ff1+1,w
  6748  08A8  1D03               	skipz
  6749  08A9  28AC               	goto	u1975
  6750  08AA  0824               	movf	___fleq@ff2,w
  6751  08AB  0620               	xorwf	___fleq@ff1,w
  6752  08AC                     u1975:	
  6753  08AC  1903               	skipnz
  6754  08AD  28B0               	goto	l2483
  6755  08AE  1003               	clrc
  6756  08AF  0008               	return
  6757  08B0                     l2483:	
  6758  08B0  1403               	setc
  6759  08B1  0008               	return
  6760  08B2                     __end_of___fleq:	
  6761                           
  6762                           	psect	text43
  6763  0DBC                     __ptext43:	
  6764 ;; *************** function ___xxtofl *****************
  6765 ;; Defined at:
  6766 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\xxtofl.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;  sign            1    wreg     unsigned char 
  6769 ;;  val             4    0[BANK0 ] long 
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;  sign            1    8[BANK0 ] unsigned char 
  6772 ;;  arg             4   10[BANK0 ] unsigned long 
  6773 ;;  exp             1    9[BANK0 ] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;                  4    0[BANK0 ] unsigned char 
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6783 ;;      Params:         0       4       0       0       0
  6784 ;;      Locals:         0       6       0       0       0
  6785 ;;      Temps:          0       4       0       0       0
  6786 ;;      Totals:         0      14       0       0       0
  6787 ;;Total ram usage:       14 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    3
  6790 ;; This function calls:
  6791 ;;		Nothing
  6792 ;; This function is called by:
  6793 ;;		_timer0_init
  6794 ;;		_trunc
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           
  6799                           ;psect for function ___xxtofl
  6800  0DBC                     ___xxtofl:	
  6801                           
  6802                           ;incstack = 0
  6803                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  6804                           ;___xxtofl@sign stored from wreg
  6805  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
  6806  0DBD  1303               	bcf	3,6	;RP1=0, select bank0
  6807  0DBE  00A8               	movwf	___xxtofl@sign
  6808  0DBF  0828               	movf	___xxtofl@sign,w
  6809  0DC0  1D03               	btfss	3,2
  6810  0DC1  1FA3               	btfss	___xxtofl@val+3,7
  6811  0DC2  2DD3               	goto	l2737
  6812  0DC3  0920               	comf	___xxtofl@val,w
  6813  0DC4  00AA               	movwf	___xxtofl@arg
  6814  0DC5  0921               	comf	___xxtofl@val+1,w
  6815  0DC6  00AB               	movwf	___xxtofl@arg+1
  6816  0DC7  0922               	comf	___xxtofl@val+2,w
  6817  0DC8  00AC               	movwf	___xxtofl@arg+2
  6818  0DC9  0923               	comf	___xxtofl@val+3,w
  6819  0DCA  00AD               	movwf	___xxtofl@arg+3
  6820  0DCB  0AAA               	incf	___xxtofl@arg,f
  6821  0DCC  1903               	skipnz
  6822  0DCD  0AAB               	incf	___xxtofl@arg+1,f
  6823  0DCE  1903               	skipnz
  6824  0DCF  0AAC               	incf	___xxtofl@arg+2,f
  6825  0DD0  1903               	skipnz
  6826  0DD1  0AAD               	incf	___xxtofl@arg+3,f
  6827  0DD2  2DDB               	goto	l998
  6828  0DD3                     l2737:	
  6829  0DD3  0823               	movf	___xxtofl@val+3,w
  6830  0DD4  00AD               	movwf	___xxtofl@arg+3
  6831  0DD5  0822               	movf	___xxtofl@val+2,w
  6832  0DD6  00AC               	movwf	___xxtofl@arg+2
  6833  0DD7  0821               	movf	___xxtofl@val+1,w
  6834  0DD8  00AB               	movwf	___xxtofl@arg+1
  6835  0DD9  0820               	movf	___xxtofl@val,w
  6836  0DDA  00AA               	movwf	___xxtofl@arg
  6837  0DDB                     l998:	
  6838  0DDB  0823               	movf	___xxtofl@val+3,w
  6839  0DDC  0422               	iorwf	___xxtofl@val+2,w
  6840  0DDD  0421               	iorwf	___xxtofl@val+1,w
  6841  0DDE  0420               	iorwf	___xxtofl@val,w
  6842  0DDF  1D03               	skipz
  6843  0DE0  2DEA               	goto	l2743
  6844  0DE1  3000               	movlw	0
  6845  0DE2  00A3               	movwf	?___xxtofl+3
  6846  0DE3  3000               	movlw	0
  6847  0DE4  00A2               	movwf	?___xxtofl+2
  6848  0DE5  3000               	movlw	0
  6849  0DE6  00A1               	movwf	?___xxtofl+1
  6850  0DE7  3000               	movlw	0
  6851  0DE8  00A0               	movwf	?___xxtofl
  6852  0DE9  0008               	return
  6853  0DEA                     l2743:	
  6854  0DEA  3096               	movlw	150
  6855  0DEB  00A4               	movwf	??___xxtofl
  6856  0DEC  0824               	movf	??___xxtofl,w
  6857  0DED  00A9               	movwf	___xxtofl@exp
  6858  0DEE                     l2747:	
  6859  0DEE  30FE               	movlw	254
  6860  0DEF  052D               	andwf	___xxtofl@arg+3,w
  6861  0DF0  1903               	btfsc	3,2
  6862  0DF1  2E1B               	goto	l1004
  6863  0DF2  3001               	movlw	1
  6864  0DF3  00A4               	movwf	??___xxtofl
  6865  0DF4  0824               	movf	??___xxtofl,w
  6866  0DF5  07A9               	addwf	___xxtofl@exp,f
  6867  0DF6  3001               	movlw	1
  6868  0DF7                     u2595:	
  6869  0DF7  1003               	clrc
  6870  0DF8  0CAD               	rrf	___xxtofl@arg+3,f
  6871  0DF9  0CAC               	rrf	___xxtofl@arg+2,f
  6872  0DFA  0CAB               	rrf	___xxtofl@arg+1,f
  6873  0DFB  0CAA               	rrf	___xxtofl@arg,f
  6874  0DFC  3EFF               	addlw	-1
  6875  0DFD  1D03               	skipz
  6876  0DFE  2DF7               	goto	u2595
  6877  0DFF  2DEE               	goto	l2747
  6878  0E00                     l2749:	
  6879  0E00  3001               	movlw	1
  6880  0E01  00A4               	movwf	??___xxtofl
  6881  0E02  0824               	movf	??___xxtofl,w
  6882  0E03  07A9               	addwf	___xxtofl@exp,f
  6883  0E04  3001               	movlw	1
  6884  0E05  07AA               	addwf	___xxtofl@arg,f
  6885  0E06  3000               	movlw	0
  6886  0E07  1803               	skipnc
  6887  0E08  3001               	movlw	1
  6888  0E09  07AB               	addwf	___xxtofl@arg+1,f
  6889  0E0A  3000               	movlw	0
  6890  0E0B  1803               	skipnc
  6891  0E0C  3001               	movlw	1
  6892  0E0D  07AC               	addwf	___xxtofl@arg+2,f
  6893  0E0E  3000               	movlw	0
  6894  0E0F  1803               	skipnc
  6895  0E10  3001               	movlw	1
  6896  0E11  07AD               	addwf	___xxtofl@arg+3,f
  6897  0E12  3001               	movlw	1
  6898  0E13                     u2615:	
  6899  0E13  1003               	clrc
  6900  0E14  0CAD               	rrf	___xxtofl@arg+3,f
  6901  0E15  0CAC               	rrf	___xxtofl@arg+2,f
  6902  0E16  0CAB               	rrf	___xxtofl@arg+1,f
  6903  0E17  0CAA               	rrf	___xxtofl@arg,f
  6904  0E18  3EFF               	addlw	-1
  6905  0E19  1D03               	skipz
  6906  0E1A  2E13               	goto	u2615
  6907  0E1B                     l1004:	
  6908  0E1B  30FF               	movlw	255
  6909  0E1C  052D               	andwf	___xxtofl@arg+3,w
  6910  0E1D  1903               	btfsc	3,2
  6911  0E1E  2E2F               	goto	l2757
  6912  0E1F  2E00               	goto	l2749
  6913  0E20                     l2759:	
  6914  0E20  3002               	movlw	2
  6915  0E21  0229               	subwf	___xxtofl@exp,w
  6916  0E22  1C03               	btfss	3,0
  6917  0E23  2E31               	goto	l1011
  6918  0E24  3001               	movlw	1
  6919  0E25  02A9               	subwf	___xxtofl@exp,f
  6920  0E26  3001               	movlw	1
  6921  0E27  00A4               	movwf	??___xxtofl
  6922  0E28                     u2635:	
  6923  0E28  1003               	clrc
  6924  0E29  0DAA               	rlf	___xxtofl@arg,f
  6925  0E2A  0DAB               	rlf	___xxtofl@arg+1,f
  6926  0E2B  0DAC               	rlf	___xxtofl@arg+2,f
  6927  0E2C  0DAD               	rlf	___xxtofl@arg+3,f
  6928  0E2D  0BA4               	decfsz	??___xxtofl,f
  6929  0E2E  2E28               	goto	u2635
  6930  0E2F                     l2757:	
  6931  0E2F  1FAC               	btfss	___xxtofl@arg+2,7
  6932  0E30  2E20               	goto	l2759
  6933  0E31                     l1011:	
  6934  0E31  1829               	btfsc	___xxtofl@exp,0
  6935  0E32  2E3B               	goto	l1012
  6936  0E33  30FF               	movlw	255
  6937  0E34  05AA               	andwf	___xxtofl@arg,f
  6938  0E35  30FF               	movlw	255
  6939  0E36  05AB               	andwf	___xxtofl@arg+1,f
  6940  0E37  307F               	movlw	127
  6941  0E38  05AC               	andwf	___xxtofl@arg+2,f
  6942  0E39  30FF               	movlw	255
  6943  0E3A  05AD               	andwf	___xxtofl@arg+3,f
  6944  0E3B                     l1012:	
  6945  0E3B  1003               	clrc
  6946  0E3C  0CA9               	rrf	___xxtofl@exp,f
  6947  0E3D  0829               	movf	___xxtofl@exp,w
  6948  0E3E  00A4               	movwf	??___xxtofl
  6949  0E3F  01A5               	clrf	??___xxtofl+1
  6950  0E40  01A6               	clrf	??___xxtofl+2
  6951  0E41  01A7               	clrf	??___xxtofl+3
  6952  0E42  3018               	movlw	24
  6953  0E43                     u2675:	
  6954  0E43  1003               	clrc
  6955  0E44  0DA4               	rlf	??___xxtofl,f
  6956  0E45  0DA5               	rlf	??___xxtofl+1,f
  6957  0E46  0DA6               	rlf	??___xxtofl+2,f
  6958  0E47  0DA7               	rlf	??___xxtofl+3,f
  6959  0E48  3EFF               	addlw	-1
  6960  0E49  1D03               	skipz
  6961  0E4A  2E43               	goto	u2675
  6962  0E4B  0824               	movf	??___xxtofl,w
  6963  0E4C  04AA               	iorwf	___xxtofl@arg,f
  6964  0E4D  0825               	movf	??___xxtofl+1,w
  6965  0E4E  04AB               	iorwf	___xxtofl@arg+1,f
  6966  0E4F  0826               	movf	??___xxtofl+2,w
  6967  0E50  04AC               	iorwf	___xxtofl@arg+2,f
  6968  0E51  0827               	movf	??___xxtofl+3,w
  6969  0E52  04AD               	iorwf	___xxtofl@arg+3,f
  6970  0E53  0828               	movf	___xxtofl@sign,w
  6971  0E54  1D03               	btfss	3,2
  6972  0E55  1FA3               	btfss	___xxtofl@val+3,7
  6973  0E56  2E58               	goto	l2771
  6974  0E57  17AD               	bsf	___xxtofl@arg+3,7
  6975  0E58                     l2771:	
  6976  0E58  082D               	movf	___xxtofl@arg+3,w
  6977  0E59  00A3               	movwf	?___xxtofl+3
  6978  0E5A  082C               	movf	___xxtofl@arg+2,w
  6979  0E5B  00A2               	movwf	?___xxtofl+2
  6980  0E5C  082B               	movf	___xxtofl@arg+1,w
  6981  0E5D  00A1               	movwf	?___xxtofl+1
  6982  0E5E  082A               	movf	___xxtofl@arg,w
  6983  0E5F  00A0               	movwf	?___xxtofl
  6984  0E60  0008               	return
  6985  0E61                     __end_of___xxtofl:	
  6986                           
  6987                           	psect	text44
  6988  0A78                     __ptext44:	
  6989 ;; *************** function ___fltol *****************
  6990 ;; Defined at:
  6991 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\fltol.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  f1              4   40[BANK0 ] unsigned char 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  exp1            1   50[BANK0 ] unsigned char 
  6996 ;;  sign1           1   49[BANK0 ] unsigned char 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  4   40[BANK0 ] long 
  6999 ;; Registers used:
  7000 ;;		wreg, status,2, status,0
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7006 ;;      Params:         0       4       0       0       0
  7007 ;;      Locals:         0       2       0       0       0
  7008 ;;      Temps:          0       5       0       0       0
  7009 ;;      Totals:         0      11       0       0       0
  7010 ;;Total ram usage:       11 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    3
  7013 ;; This function calls:
  7014 ;;		Nothing
  7015 ;; This function is called by:
  7016 ;;		_timer0_init
  7017 ;;		_trunc
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           
  7022                           ;psect for function ___fltol
  7023  0A78                     ___fltol:	
  7024                           
  7025                           ;incstack = 0
  7026                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  7027  0A78  1003               	clrc
  7028  0A79  1283               	bcf	3,5	;RP0=0, select bank0
  7029  0A7A  1303               	bcf	3,6	;RP1=0, select bank0
  7030  0A7B  0D4A               	rlf	___fltol@f1+2,w
  7031  0A7C  0D4B               	rlf	___fltol@f1+3,w
  7032  0A7D  00CC               	movwf	??___fltol
  7033  0A7E  084C               	movf	??___fltol,w
  7034  0A7F  00D2               	movwf	___fltol@exp1
  7035  0A80  0852               	movf	___fltol@exp1,w
  7036  0A81  1D03               	btfss	3,2
  7037  0A82  2A8C               	goto	l2507
  7038  0A83                     l2503:	
  7039  0A83  3000               	movlw	0
  7040  0A84  00CB               	movwf	?___fltol+3
  7041  0A85  3000               	movlw	0
  7042  0A86  00CA               	movwf	?___fltol+2
  7043  0A87  3000               	movlw	0
  7044  0A88  00C9               	movwf	?___fltol+1
  7045  0A89  3000               	movlw	0
  7046  0A8A  00C8               	movwf	?___fltol
  7047  0A8B  0008               	return
  7048  0A8C                     l2507:	
  7049  0A8C  0848               	movf	___fltol@f1,w
  7050  0A8D  00CC               	movwf	??___fltol
  7051  0A8E  0849               	movf	___fltol@f1+1,w
  7052  0A8F  00CD               	movwf	??___fltol+1
  7053  0A90  084A               	movf	___fltol@f1+2,w
  7054  0A91  00CE               	movwf	??___fltol+2
  7055  0A92  084B               	movf	___fltol@f1+3,w
  7056  0A93  00CF               	movwf	??___fltol+3
  7057  0A94  301F               	movlw	31
  7058  0A95                     u2015:	
  7059  0A95  1003               	clrc
  7060  0A96  0CCF               	rrf	??___fltol+3,f
  7061  0A97  0CCE               	rrf	??___fltol+2,f
  7062  0A98  0CCD               	rrf	??___fltol+1,f
  7063  0A99  0CCC               	rrf	??___fltol,f
  7064  0A9A  3EFF               	addlw	-1
  7065  0A9B  1D03               	skipz
  7066  0A9C  2A95               	goto	u2015
  7067  0A9D  084C               	movf	??___fltol,w
  7068  0A9E  00D0               	movwf	??___fltol+4
  7069  0A9F  0850               	movf	??___fltol+4,w
  7070  0AA0  00D1               	movwf	___fltol@sign1
  7071  0AA1  17CA               	bsf	___fltol@f1+2,7
  7072  0AA2  30FF               	movlw	255
  7073  0AA3  05C8               	andwf	___fltol@f1,f
  7074  0AA4  30FF               	movlw	255
  7075  0AA5  05C9               	andwf	___fltol@f1+1,f
  7076  0AA6  30FF               	movlw	255
  7077  0AA7  05CA               	andwf	___fltol@f1+2,f
  7078  0AA8  3000               	movlw	0
  7079  0AA9  05CB               	andwf	___fltol@f1+3,f
  7080  0AAA  3096               	movlw	150
  7081  0AAB  02D2               	subwf	___fltol@exp1,f
  7082  0AAC  1FD2               	btfss	___fltol@exp1,7
  7083  0AAD  2AC3               	goto	l2525
  7084  0AAE  0852               	movf	___fltol@exp1,w
  7085  0AAF  3A80               	xorlw	128
  7086  0AB0  3E97               	addlw	151
  7087  0AB1  1C03               	btfss	3,0
  7088  0AB2  2A83               	goto	l2503
  7089  0AB3                     l2523:	
  7090  0AB3  3001               	movlw	1
  7091  0AB4                     u2045:	
  7092  0AB4  1003               	clrc
  7093  0AB5  0CCB               	rrf	___fltol@f1+3,f
  7094  0AB6  0CCA               	rrf	___fltol@f1+2,f
  7095  0AB7  0CC9               	rrf	___fltol@f1+1,f
  7096  0AB8  0CC8               	rrf	___fltol@f1,f
  7097  0AB9  3EFF               	addlw	-1
  7098  0ABA  1D03               	skipz
  7099  0ABB  2AB4               	goto	u2045
  7100  0ABC  3001               	movlw	1
  7101  0ABD  00CC               	movwf	??___fltol
  7102  0ABE  084C               	movf	??___fltol,w
  7103  0ABF  07D2               	addwf	___fltol@exp1,f
  7104  0AC0  1903               	btfsc	3,2
  7105  0AC1  2AD6               	goto	l2533
  7106  0AC2  2AB3               	goto	l2523
  7107  0AC3                     l2525:	
  7108  0AC3  3020               	movlw	32
  7109  0AC4  0252               	subwf	___fltol@exp1,w
  7110  0AC5  1803               	btfsc	3,0
  7111  0AC6  2A83               	goto	l2503
  7112  0AC7                     l764:	
  7113  0AC7  0852               	movf	___fltol@exp1,w
  7114  0AC8  1903               	btfsc	3,2
  7115  0AC9  2AD6               	goto	l2533
  7116  0ACA  3001               	movlw	1
  7117  0ACB  00CC               	movwf	??___fltol
  7118  0ACC                     u2075:	
  7119  0ACC  1003               	clrc
  7120  0ACD  0DC8               	rlf	___fltol@f1,f
  7121  0ACE  0DC9               	rlf	___fltol@f1+1,f
  7122  0ACF  0DCA               	rlf	___fltol@f1+2,f
  7123  0AD0  0DCB               	rlf	___fltol@f1+3,f
  7124  0AD1  0BCC               	decfsz	??___fltol,f
  7125  0AD2  2ACC               	goto	u2075
  7126  0AD3  3001               	movlw	1
  7127  0AD4  02D2               	subwf	___fltol@exp1,f
  7128  0AD5  2AC7               	goto	l764
  7129  0AD6                     l2533:	
  7130  0AD6  0851               	movf	___fltol@sign1,w
  7131  0AD7  1903               	btfsc	3,2
  7132  0AD8  0008               	return
  7133  0AD9  09C8               	comf	___fltol@f1,f
  7134  0ADA  09C9               	comf	___fltol@f1+1,f
  7135  0ADB  09CA               	comf	___fltol@f1+2,f
  7136  0ADC  09CB               	comf	___fltol@f1+3,f
  7137  0ADD  0AC8               	incf	___fltol@f1,f
  7138  0ADE  1903               	skipnz
  7139  0ADF  0AC9               	incf	___fltol@f1+1,f
  7140  0AE0  1903               	skipnz
  7141  0AE1  0ACA               	incf	___fltol@f1+2,f
  7142  0AE2  1903               	skipnz
  7143  0AE3  0ACB               	incf	___fltol@f1+3,f
  7144  0AE4  0008               	return
  7145  0AE5                     __end_of___fltol:	
  7146                           
  7147                           	psect	text45
  7148  15D3                     __ptext45:	
  7149 ;; *************** function ___flsub *****************
  7150 ;; Defined at:
  7151 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  a               4   62[BANK0 ] long 
  7154 ;;  b               4   66[BANK0 ] long 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;		None
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  4   62[BANK0 ] long 
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7166 ;;      Params:         0       8       0       0       0
  7167 ;;      Locals:         0       0       0       0       0
  7168 ;;      Temps:          0       0       0       0       0
  7169 ;;      Totals:         0       8       0       0       0
  7170 ;;Total ram usage:        8 bytes
  7171 ;; Hardware stack levels used:    1
  7172 ;; Hardware stack levels required when called:    4
  7173 ;; This function calls:
  7174 ;;		___fladd
  7175 ;; This function is called by:
  7176 ;;		_round
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           
  7181                           ;psect for function ___flsub
  7182  15D3                     ___flsub:	
  7183                           
  7184                           ;incstack = 0
  7185                           ; Regs used in ___flsub: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  7186  15D3  3080               	movlw	128
  7187  15D4  1283               	bcf	3,5	;RP0=0, select bank0
  7188  15D5  1303               	bcf	3,6	;RP1=0, select bank0
  7189  15D6  06E1               	xorwf	___flsub@a+3,f
  7190  15D7  0865               	movf	___flsub@b+3,w
  7191  15D8  00A3               	movwf	___fladd@b+3
  7192  15D9  0864               	movf	___flsub@b+2,w
  7193  15DA  00A2               	movwf	___fladd@b+2
  7194  15DB  0863               	movf	___flsub@b+1,w
  7195  15DC  00A1               	movwf	___fladd@b+1
  7196  15DD  0862               	movf	___flsub@b,w
  7197  15DE  00A0               	movwf	___fladd@b
  7198  15DF  0861               	movf	___flsub@a+3,w
  7199  15E0  00A7               	movwf	___fladd@a+3
  7200  15E1  0860               	movf	___flsub@a+2,w
  7201  15E2  00A6               	movwf	___fladd@a+2
  7202  15E3  085F               	movf	___flsub@a+1,w
  7203  15E4  00A5               	movwf	___fladd@a+1
  7204  15E5  085E               	movf	___flsub@a,w
  7205  15E6  00A4               	movwf	___fladd@a
  7206  15E7  120A  118A  2296   	fcall	___fladd
  7207  15EA  1283               	bcf	3,5	;RP0=0, select bank0
  7208  15EB  1303               	bcf	3,6	;RP1=0, select bank0
  7209  15EC  0823               	movf	?___fladd+3,w
  7210  15ED  00E1               	movwf	?___flsub+3
  7211  15EE  0822               	movf	?___fladd+2,w
  7212  15EF  00E0               	movwf	?___flsub+2
  7213  15F0  0821               	movf	?___fladd+1,w
  7214  15F1  00DF               	movwf	?___flsub+1
  7215  15F2  0820               	movf	?___fladd,w
  7216  15F3  00DE               	movwf	?___flsub
  7217  15F4  0008               	return
  7218  15F5                     __end_of___flsub:	
  7219                           
  7220                           	psect	text46
  7221  0296                     __ptext46:	
  7222 ;; *************** function ___fladd *****************
  7223 ;; Defined at:
  7224 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcadd.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  b               4    0[BANK0 ] long 
  7227 ;;  a               4    4[BANK0 ] long 
  7228 ;; Auto vars:     Size  Location     Type
  7229 ;;  grs             1   19[BANK0 ] unsigned char 
  7230 ;;  bexp            1   18[BANK0 ] unsigned char 
  7231 ;;  aexp            1   17[BANK0 ] unsigned char 
  7232 ;;  signs           1   16[BANK0 ] unsigned char 
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  4    0[BANK0 ] unsigned char 
  7235 ;; Registers used:
  7236 ;;		wreg, status,2, status,0, btemp+1
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7242 ;;      Params:         0       8       0       0       0
  7243 ;;      Locals:         0       4       0       0       0
  7244 ;;      Temps:          0       8       0       0       0
  7245 ;;      Totals:         0      20       0       0       0
  7246 ;;Total ram usage:       20 bytes
  7247 ;; Hardware stack levels used:    1
  7248 ;; Hardware stack levels required when called:    3
  7249 ;; This function calls:
  7250 ;;		Nothing
  7251 ;; This function is called by:
  7252 ;;		___flsub
  7253 ;;		_round
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           
  7258                           ;psect for function ___fladd
  7259  0296                     ___fladd:	
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in ___fladd: [wreg+status,2+status,0+btemp+1]
  7263  0296  1283               	bcf	3,5	;RP0=0, select bank0
  7264  0297  1303               	bcf	3,6	;RP1=0, select bank0
  7265  0298  0823               	movf	___fladd@b+3,w
  7266  0299  3980               	andlw	128
  7267  029A  00A8               	movwf	??___fladd
  7268  029B  0828               	movf	??___fladd,w
  7269  029C  00B0               	movwf	___fladd@signs
  7270  029D  0823               	movf	___fladd@b+3,w
  7271  029E  00A8               	movwf	??___fladd
  7272  029F  0728               	addwf	??___fladd,w
  7273  02A0  00A9               	movwf	??___fladd+1
  7274  02A1  0829               	movf	??___fladd+1,w
  7275  02A2  00B2               	movwf	___fladd@bexp
  7276  02A3  1BA2               	btfsc	___fladd@b+2,7
  7277  02A4  1432               	bsf	___fladd@bexp,0
  7278  02A5  0832               	movf	___fladd@bexp,w
  7279  02A6  1903               	btfsc	3,2
  7280  02A7  2AB6               	goto	l2555
  7281  02A8  0A32               	incf	___fladd@bexp,w
  7282  02A9  1D03               	btfss	3,2
  7283  02AA  2AB3               	goto	l2551
  7284  02AB  3000               	movlw	0
  7285  02AC  00A3               	movwf	___fladd@b+3
  7286  02AD  3000               	movlw	0
  7287  02AE  00A2               	movwf	___fladd@b+2
  7288  02AF  3000               	movlw	0
  7289  02B0  00A1               	movwf	___fladd@b+1
  7290  02B1  3000               	movlw	0
  7291  02B2  00A0               	movwf	___fladd@b
  7292  02B3                     l2551:	
  7293  02B3  17A2               	bsf	___fladd@b+2,7
  7294  02B4  01A3               	clrf	___fladd@b+3
  7295  02B5  2ABE               	goto	l2557
  7296  02B6                     l2555:	
  7297  02B6  3000               	movlw	0
  7298  02B7  00A3               	movwf	___fladd@b+3
  7299  02B8  3000               	movlw	0
  7300  02B9  00A2               	movwf	___fladd@b+2
  7301  02BA  3000               	movlw	0
  7302  02BB  00A1               	movwf	___fladd@b+1
  7303  02BC  3000               	movlw	0
  7304  02BD  00A0               	movwf	___fladd@b
  7305  02BE                     l2557:	
  7306  02BE  0827               	movf	___fladd@a+3,w
  7307  02BF  3980               	andlw	128
  7308  02C0  00A8               	movwf	??___fladd
  7309  02C1  0828               	movf	??___fladd,w
  7310  02C2  00B1               	movwf	___fladd@aexp
  7311  02C3  0831               	movf	___fladd@aexp,w
  7312  02C4  0630               	xorwf	___fladd@signs,w
  7313  02C5  1D03               	btfss	3,2
  7314  02C6  1730               	bsf	___fladd@signs,6
  7315  02C7  0827               	movf	___fladd@a+3,w
  7316  02C8  00A8               	movwf	??___fladd
  7317  02C9  0728               	addwf	??___fladd,w
  7318  02CA  00A9               	movwf	??___fladd+1
  7319  02CB  0829               	movf	??___fladd+1,w
  7320  02CC  00B1               	movwf	___fladd@aexp
  7321  02CD  1BA6               	btfsc	___fladd@a+2,7
  7322  02CE  1431               	bsf	___fladd@aexp,0
  7323  02CF  0831               	movf	___fladd@aexp,w
  7324  02D0  1903               	btfsc	3,2
  7325  02D1  2AE0               	goto	l2579
  7326  02D2  0A31               	incf	___fladd@aexp,w
  7327  02D3  1D03               	btfss	3,2
  7328  02D4  2ADD               	goto	l2575
  7329  02D5  3000               	movlw	0
  7330  02D6  00A7               	movwf	___fladd@a+3
  7331  02D7  3000               	movlw	0
  7332  02D8  00A6               	movwf	___fladd@a+2
  7333  02D9  3000               	movlw	0
  7334  02DA  00A5               	movwf	___fladd@a+1
  7335  02DB  3000               	movlw	0
  7336  02DC  00A4               	movwf	___fladd@a
  7337  02DD                     l2575:	
  7338  02DD  17A6               	bsf	___fladd@a+2,7
  7339  02DE  01A7               	clrf	___fladd@a+3
  7340  02DF  2AE8               	goto	l864
  7341  02E0                     l2579:	
  7342  02E0  3000               	movlw	0
  7343  02E1  00A7               	movwf	___fladd@a+3
  7344  02E2  3000               	movlw	0
  7345  02E3  00A6               	movwf	___fladd@a+2
  7346  02E4  3000               	movlw	0
  7347  02E5  00A5               	movwf	___fladd@a+1
  7348  02E6  3000               	movlw	0
  7349  02E7  00A4               	movwf	___fladd@a
  7350  02E8                     l864:	
  7351  02E8  0832               	movf	___fladd@bexp,w
  7352  02E9  0231               	subwf	___fladd@aexp,w
  7353  02EA  1803               	skipnc
  7354  02EB  2B2E               	goto	l2615
  7355  02EC  1F30               	btfss	___fladd@signs,6
  7356  02ED  2AF2               	goto	l2585
  7357  02EE  3080               	movlw	128
  7358  02EF  00A8               	movwf	??___fladd
  7359  02F0  0828               	movf	??___fladd,w
  7360  02F1  06B0               	xorwf	___fladd@signs,f
  7361  02F2                     l2585:	
  7362  02F2  0832               	movf	___fladd@bexp,w
  7363  02F3  00A8               	movwf	??___fladd
  7364  02F4  0828               	movf	??___fladd,w
  7365  02F5  00B3               	movwf	___fladd@grs
  7366  02F6  0831               	movf	___fladd@aexp,w
  7367  02F7  00A8               	movwf	??___fladd
  7368  02F8  0828               	movf	??___fladd,w
  7369  02F9  00B2               	movwf	___fladd@bexp
  7370  02FA  0833               	movf	___fladd@grs,w
  7371  02FB  00A8               	movwf	??___fladd
  7372  02FC  0828               	movf	??___fladd,w
  7373  02FD  00B1               	movwf	___fladd@aexp
  7374  02FE  0820               	movf	___fladd@b,w
  7375  02FF  00A8               	movwf	??___fladd
  7376  0300  0828               	movf	??___fladd,w
  7377  0301  00B3               	movwf	___fladd@grs
  7378  0302  0824               	movf	___fladd@a,w
  7379  0303  00A8               	movwf	??___fladd
  7380  0304  0828               	movf	??___fladd,w
  7381  0305  00A0               	movwf	___fladd@b
  7382  0306  0833               	movf	___fladd@grs,w
  7383  0307  00A8               	movwf	??___fladd
  7384  0308  0828               	movf	??___fladd,w
  7385  0309  00A4               	movwf	___fladd@a
  7386  030A  0821               	movf	___fladd@b+1,w
  7387  030B  00A8               	movwf	??___fladd
  7388  030C  0828               	movf	??___fladd,w
  7389  030D  00B3               	movwf	___fladd@grs
  7390  030E  0825               	movf	___fladd@a+1,w
  7391  030F  00A8               	movwf	??___fladd
  7392  0310  0828               	movf	??___fladd,w
  7393  0311  00A1               	movwf	___fladd@b+1
  7394  0312  0833               	movf	___fladd@grs,w
  7395  0313  00A8               	movwf	??___fladd
  7396  0314  0828               	movf	??___fladd,w
  7397  0315  00A5               	movwf	___fladd@a+1
  7398  0316  0822               	movf	___fladd@b+2,w
  7399  0317  00A8               	movwf	??___fladd
  7400  0318  0828               	movf	??___fladd,w
  7401  0319  00B3               	movwf	___fladd@grs
  7402  031A  0826               	movf	___fladd@a+2,w
  7403  031B  00A8               	movwf	??___fladd
  7404  031C  0828               	movf	??___fladd,w
  7405  031D  00A2               	movwf	___fladd@b+2
  7406  031E  0833               	movf	___fladd@grs,w
  7407  031F  00A8               	movwf	??___fladd
  7408  0320  0828               	movf	??___fladd,w
  7409  0321  00A6               	movwf	___fladd@a+2
  7410  0322  0823               	movf	___fladd@b+3,w
  7411  0323  00A8               	movwf	??___fladd
  7412  0324  0828               	movf	??___fladd,w
  7413  0325  00B3               	movwf	___fladd@grs
  7414  0326  0827               	movf	___fladd@a+3,w
  7415  0327  00A8               	movwf	??___fladd
  7416  0328  0828               	movf	??___fladd,w
  7417  0329  00A3               	movwf	___fladd@b+3
  7418  032A  0833               	movf	___fladd@grs,w
  7419  032B  00A8               	movwf	??___fladd
  7420  032C  0828               	movf	??___fladd,w
  7421  032D  00A7               	movwf	___fladd@a+3
  7422  032E                     l2615:	
  7423  032E  01B3               	clrf	___fladd@grs
  7424  032F  0831               	movf	___fladd@aexp,w
  7425  0330  00A8               	movwf	??___fladd
  7426  0331  01A9               	clrf	??___fladd+1
  7427  0332  0829               	movf	??___fladd+1,w
  7428  0333  00AB               	movwf	??___fladd+3
  7429  0334  0832               	movf	___fladd@bexp,w
  7430  0335  0228               	subwf	??___fladd,w
  7431  0336  00AA               	movwf	??___fladd+2
  7432  0337  1C03               	skipc
  7433  0338  03AB               	decf	??___fladd+3,f
  7434  0339  082B               	movf	??___fladd+3,w
  7435  033A  3A80               	xorlw	128
  7436  033B  00FF               	movwf	127
  7437  033C  3080               	movlw	128
  7438  033D  027F               	subwf	127,w
  7439  033E  1D03               	skipz
  7440  033F  2B42               	goto	u2195
  7441  0340  301A               	movlw	26
  7442  0341  022A               	subwf	??___fladd+2,w
  7443  0342                     u2195:	
  7444  0342  1C03               	skipc
  7445  0343  2B7B               	goto	l2633
  7446  0344  1283               	bcf	3,5	;RP0=0, select bank0
  7447  0345  1303               	bcf	3,6	;RP1=0, select bank0
  7448  0346  0823               	movf	___fladd@b+3,w
  7449  0347  0422               	iorwf	___fladd@b+2,w
  7450  0348  0421               	iorwf	___fladd@b+1,w
  7451  0349  0420               	iorwf	___fladd@b,w
  7452  034A  1903               	btfsc	3,2
  7453  034B  2B4E               	goto	u2200
  7454  034C  3001               	movlw	1
  7455  034D  2B4F               	goto	u2210
  7456  034E                     u2200:	
  7457  034E  3000               	movlw	0
  7458  034F                     u2210:	
  7459  034F  00A8               	movwf	??___fladd
  7460  0350  0828               	movf	??___fladd,w
  7461  0351  00B3               	movwf	___fladd@grs
  7462  0352  3000               	movlw	0
  7463  0353  00A3               	movwf	___fladd@b+3
  7464  0354  3000               	movlw	0
  7465  0355  00A2               	movwf	___fladd@b+2
  7466  0356  3000               	movlw	0
  7467  0357  00A1               	movwf	___fladd@b+1
  7468  0358  3000               	movlw	0
  7469  0359  00A0               	movwf	___fladd@b
  7470  035A  0831               	movf	___fladd@aexp,w
  7471  035B  00A8               	movwf	??___fladd
  7472  035C  0828               	movf	??___fladd,w
  7473  035D  00B2               	movwf	___fladd@bexp
  7474  035E  2B81               	goto	l868
  7475  035F                     l870:	
  7476  035F  1C33               	btfss	___fladd@grs,0
  7477  0360  2B6A               	goto	l2623
  7478  0361  0833               	movf	___fladd@grs,w
  7479  0362  00A8               	movwf	??___fladd
  7480  0363  1003               	clrc
  7481  0364  0C28               	rrf	??___fladd,w
  7482  0365  3801               	iorlw	1
  7483  0366  00A9               	movwf	??___fladd+1
  7484  0367  0829               	movf	??___fladd+1,w
  7485  0368  00B3               	movwf	___fladd@grs
  7486  0369  2B6C               	goto	l2625
  7487  036A                     l2623:	
  7488  036A  1003               	clrc
  7489  036B  0CB3               	rrf	___fladd@grs,f
  7490  036C                     l2625:	
  7491  036C  1820               	btfsc	___fladd@b,0
  7492  036D  17B3               	bsf	___fladd@grs,7
  7493  036E  3001               	movlw	1
  7494  036F  00A8               	movwf	??___fladd
  7495  0370                     u2245:	
  7496  0370  0D23               	rlf	___fladd@b+3,w
  7497  0371  0CA3               	rrf	___fladd@b+3,f
  7498  0372  0CA2               	rrf	___fladd@b+2,f
  7499  0373  0CA1               	rrf	___fladd@b+1,f
  7500  0374  0CA0               	rrf	___fladd@b,f
  7501  0375  0BA8               	decfsz	??___fladd& (0+127),f
  7502  0376  2B70               	goto	u2245
  7503  0377  3001               	movlw	1
  7504  0378  00A8               	movwf	??___fladd
  7505  0379  0828               	movf	??___fladd,w
  7506  037A  07B2               	addwf	___fladd@bexp,f
  7507  037B                     l2633:	
  7508  037B  1283               	bcf	3,5	;RP0=0, select bank0
  7509  037C  1303               	bcf	3,6	;RP1=0, select bank0
  7510  037D  0831               	movf	___fladd@aexp,w
  7511  037E  0232               	subwf	___fladd@bexp,w
  7512  037F  1C03               	skipc
  7513  0380  2B5F               	goto	l870
  7514  0381                     l868:	
  7515  0381  1B30               	btfsc	___fladd@signs,6
  7516  0382  2BC2               	goto	l2659
  7517  0383  0832               	movf	___fladd@bexp,w
  7518  0384  1D03               	btfss	3,2
  7519  0385  2B8F               	goto	l2641
  7520  0386  3000               	movlw	0
  7521  0387  00A3               	movwf	?___fladd+3
  7522  0388  3000               	movlw	0
  7523  0389  00A2               	movwf	?___fladd+2
  7524  038A  3000               	movlw	0
  7525  038B  00A1               	movwf	?___fladd+1
  7526  038C  3000               	movlw	0
  7527  038D  00A0               	movwf	?___fladd
  7528  038E  0008               	return
  7529  038F                     l2641:	
  7530  038F  0824               	movf	___fladd@a,w
  7531  0390  07A0               	addwf	___fladd@b,f
  7532  0391  0825               	movf	___fladd@a+1,w
  7533  0392  1103               	clrz
  7534  0393  1803               	skipnc
  7535  0394  3E01               	addlw	1
  7536  0395  1D03               	btfss	3,2
  7537  0396  07A1               	addwf	___fladd@b+1,f
  7538  0397  0826               	movf	___fladd@a+2,w
  7539  0398  1103               	clrz
  7540  0399  1803               	skipnc
  7541  039A  3E01               	addlw	1
  7542  039B  1D03               	btfss	3,2
  7543  039C  07A2               	addwf	___fladd@b+2,f
  7544  039D  0827               	movf	___fladd@a+3,w
  7545  039E  1103               	clrz
  7546  039F  1803               	skipnc
  7547  03A0  3E01               	addlw	1
  7548  03A1  1D03               	btfss	3,2
  7549  03A2  07A3               	addwf	___fladd@b+3,f
  7550  03A3  1C23               	btfss	___fladd@b+3,0
  7551  03A4  2C64               	goto	l2693
  7552  03A5  1C33               	btfss	___fladd@grs,0
  7553  03A6  2BB0               	goto	l2649
  7554  03A7  0833               	movf	___fladd@grs,w
  7555  03A8  00A8               	movwf	??___fladd
  7556  03A9  1003               	clrc
  7557  03AA  0C28               	rrf	??___fladd,w
  7558  03AB  3801               	iorlw	1
  7559  03AC  00A9               	movwf	??___fladd+1
  7560  03AD  0829               	movf	??___fladd+1,w
  7561  03AE  00B3               	movwf	___fladd@grs
  7562  03AF  2BB2               	goto	l2651
  7563  03B0                     l2649:	
  7564  03B0  1003               	clrc
  7565  03B1  0CB3               	rrf	___fladd@grs,f
  7566  03B2                     l2651:	
  7567  03B2  1820               	btfsc	___fladd@b,0
  7568  03B3  17B3               	bsf	___fladd@grs,7
  7569  03B4  3001               	movlw	1
  7570  03B5  00A8               	movwf	??___fladd
  7571  03B6                     u2325:	
  7572  03B6  0D23               	rlf	___fladd@b+3,w
  7573  03B7  0CA3               	rrf	___fladd@b+3,f
  7574  03B8  0CA2               	rrf	___fladd@b+2,f
  7575  03B9  0CA1               	rrf	___fladd@b+1,f
  7576  03BA  0CA0               	rrf	___fladd@b,f
  7577  03BB  0BA8               	decfsz	??___fladd& (0+127),f
  7578  03BC  2BB6               	goto	u2325
  7579  03BD  3001               	movlw	1
  7580  03BE  00A8               	movwf	??___fladd
  7581  03BF  0828               	movf	??___fladd,w
  7582  03C0  07B2               	addwf	___fladd@bexp,f
  7583  03C1  2C64               	goto	l2693
  7584  03C2                     l2659:	
  7585  03C2  0823               	movf	___fladd@b+3,w
  7586  03C3  3A80               	xorlw	128
  7587  03C4  00FF               	movwf	127
  7588  03C5  0827               	movf	___fladd@a+3,w
  7589  03C6  3A80               	xorlw	128
  7590  03C7  027F               	subwf	127,w
  7591  03C8  1D03               	skipz
  7592  03C9  2BD4               	goto	u2333
  7593  03CA  0826               	movf	___fladd@a+2,w
  7594  03CB  0222               	subwf	___fladd@b+2,w
  7595  03CC  1D03               	skipz
  7596  03CD  2BD4               	goto	u2333
  7597  03CE  0825               	movf	___fladd@a+1,w
  7598  03CF  0221               	subwf	___fladd@b+1,w
  7599  03D0  1D03               	skipz
  7600  03D1  2BD4               	goto	u2333
  7601  03D2  0824               	movf	___fladd@a,w
  7602  03D3  0220               	subwf	___fladd@b,w
  7603  03D4                     u2333:	
  7604  03D4  1803               	skipnc
  7605  03D5  2C2C               	goto	l2669
  7606  03D6  30FF               	movlw	255
  7607  03D7  00A8               	movwf	??___fladd
  7608  03D8  30FF               	movlw	255
  7609  03D9  00A9               	movwf	??___fladd+1
  7610  03DA  30FF               	movlw	255
  7611  03DB  00AA               	movwf	??___fladd+2
  7612  03DC  30FF               	movlw	255
  7613  03DD  00AB               	movwf	??___fladd+3
  7614  03DE  0824               	movf	___fladd@a,w
  7615  03DF  00AC               	movwf	??___fladd+4
  7616  03E0  0825               	movf	___fladd@a+1,w
  7617  03E1  00AD               	movwf	??___fladd+5
  7618  03E2  0826               	movf	___fladd@a+2,w
  7619  03E3  00AE               	movwf	??___fladd+6
  7620  03E4  0827               	movf	___fladd@a+3,w
  7621  03E5  00AF               	movwf	??___fladd+7
  7622  03E6  0820               	movf	___fladd@b,w
  7623  03E7  02AC               	subwf	??___fladd+4,f
  7624  03E8  0821               	movf	___fladd@b+1,w
  7625  03E9  1C03               	skipc
  7626  03EA  0F21               	incfsz	___fladd@b+1,w
  7627  03EB  2BED               	goto	u2341
  7628  03EC  2BEE               	goto	u2342
  7629  03ED                     u2341:	
  7630  03ED  02AD               	subwf	??___fladd+5,f
  7631  03EE                     u2342:	
  7632  03EE  0822               	movf	___fladd@b+2,w
  7633  03EF  1C03               	skipc
  7634  03F0  0F22               	incfsz	___fladd@b+2,w
  7635  03F1  2BF3               	goto	u2343
  7636  03F2  2BF4               	goto	u2344
  7637  03F3                     u2343:	
  7638  03F3  02AE               	subwf	??___fladd+6,f
  7639  03F4                     u2344:	
  7640  03F4  0823               	movf	___fladd@b+3,w
  7641  03F5  1C03               	skipc
  7642  03F6  0F23               	incfsz	___fladd@b+3,w
  7643  03F7  2BF9               	goto	u2345
  7644  03F8  2BFA               	goto	u2346
  7645  03F9                     u2345:	
  7646  03F9  02AF               	subwf	??___fladd+7,f
  7647  03FA                     u2346:	
  7648  03FA  082C               	movf	??___fladd+4,w
  7649  03FB  07A8               	addwf	??___fladd,f
  7650  03FC  082D               	movf	??___fladd+5,w
  7651  03FD  1803               	skipnc
  7652  03FE  0F2D               	incfsz	??___fladd+5,w
  7653  03FF  2C01               	goto	u2350
  7654  0400  2C02               	goto	u2351
  7655  0401                     u2350:	
  7656  0401  07A9               	addwf	??___fladd+1,f
  7657  0402                     u2351:	
  7658  0402  082E               	movf	??___fladd+6,w
  7659  0403  1803               	skipnc
  7660  0404  0F2E               	incfsz	??___fladd+6,w
  7661  0405  2C07               	goto	u2352
  7662  0406  2C08               	goto	u2353
  7663  0407                     u2352:	
  7664  0407  07AA               	addwf	??___fladd+2,f
  7665  0408                     u2353:	
  7666  0408  082F               	movf	??___fladd+7,w
  7667  0409  1803               	skipnc
  7668  040A  0A2F               	incf	??___fladd+7,w
  7669  040B  07AB               	addwf	??___fladd+3,f
  7670  040C  082B               	movf	??___fladd+3,w
  7671  040D  00A3               	movwf	___fladd@b+3
  7672  040E  082A               	movf	??___fladd+2,w
  7673  040F  00A2               	movwf	___fladd@b+2
  7674  0410  0829               	movf	??___fladd+1,w
  7675  0411  00A1               	movwf	___fladd@b+1
  7676  0412  0828               	movf	??___fladd,w
  7677  0413  00A0               	movwf	___fladd@b
  7678  0414  3080               	movlw	128
  7679  0415  00A8               	movwf	??___fladd
  7680  0416  0828               	movf	??___fladd,w
  7681  0417  06B0               	xorwf	___fladd@signs,f
  7682  0418  09B3               	comf	___fladd@grs,f
  7683  0419  0AB3               	incf	___fladd@grs,f
  7684  041A  0833               	movf	___fladd@grs,w
  7685  041B  1D03               	btfss	3,2
  7686  041C  2C3A               	goto	l885
  7687  041D  3001               	movlw	1
  7688  041E  07A0               	addwf	___fladd@b,f
  7689  041F  3000               	movlw	0
  7690  0420  1803               	skipnc
  7691  0421  3001               	movlw	1
  7692  0422  07A1               	addwf	___fladd@b+1,f
  7693  0423  3000               	movlw	0
  7694  0424  1803               	skipnc
  7695  0425  3001               	movlw	1
  7696  0426  07A2               	addwf	___fladd@b+2,f
  7697  0427  3000               	movlw	0
  7698  0428  1803               	skipnc
  7699  0429  3001               	movlw	1
  7700  042A  07A3               	addwf	___fladd@b+3,f
  7701  042B  2C3A               	goto	l885
  7702  042C                     l2669:	
  7703  042C  0824               	movf	___fladd@a,w
  7704  042D  02A0               	subwf	___fladd@b,f
  7705  042E  0825               	movf	___fladd@a+1,w
  7706  042F  1C03               	skipc
  7707  0430  0F25               	incfsz	___fladd@a+1,w
  7708  0431  02A1               	subwf	___fladd@b+1,f
  7709  0432  0826               	movf	___fladd@a+2,w
  7710  0433  1C03               	skipc
  7711  0434  0F26               	incfsz	___fladd@a+2,w
  7712  0435  02A2               	subwf	___fladd@b+2,f
  7713  0436  0827               	movf	___fladd@a+3,w
  7714  0437  1C03               	skipc
  7715  0438  0F27               	incfsz	___fladd@a+3,w
  7716  0439  02A3               	subwf	___fladd@b+3,f
  7717  043A                     l885:	
  7718  043A  0823               	movf	___fladd@b+3,w
  7719  043B  0422               	iorwf	___fladd@b+2,w
  7720  043C  0421               	iorwf	___fladd@b+1,w
  7721  043D  0420               	iorwf	___fladd@b,w
  7722  043E  1D03               	skipz
  7723  043F  2C62               	goto	l2691
  7724  0440  0833               	movf	___fladd@grs,w
  7725  0441  1D03               	btfss	3,2
  7726  0442  2C62               	goto	l2691
  7727  0443  3000               	movlw	0
  7728  0444  00A3               	movwf	?___fladd+3
  7729  0445  3000               	movlw	0
  7730  0446  00A2               	movwf	?___fladd+2
  7731  0447  3000               	movlw	0
  7732  0448  00A1               	movwf	?___fladd+1
  7733  0449  3000               	movlw	0
  7734  044A  00A0               	movwf	?___fladd
  7735  044B  0008               	return
  7736  044C                     l2677:	
  7737  044C  3001               	movlw	1
  7738  044D  00A8               	movwf	??___fladd
  7739  044E                     u2395:	
  7740  044E  1003               	clrc
  7741  044F  0DA0               	rlf	___fladd@b,f
  7742  0450  0DA1               	rlf	___fladd@b+1,f
  7743  0451  0DA2               	rlf	___fladd@b+2,f
  7744  0452  0DA3               	rlf	___fladd@b+3,f
  7745  0453  0BA8               	decfsz	??___fladd,f
  7746  0454  2C4E               	goto	u2395
  7747  0455  1BB3               	btfsc	___fladd@grs,7
  7748  0456  1420               	bsf	___fladd@b,0
  7749  0457  1C33               	btfss	___fladd@grs,0
  7750  0458  2C5B               	goto	l2685
  7751  0459  1403               	setc
  7752  045A  2C5C               	goto	L7
  7753  045B                     l2685:	
  7754  045B  1003               	clrc
  7755  045C                     L7:	
  7756  045C  0DB3               	rlf	___fladd@grs,f
  7757  045D  0832               	movf	___fladd@bexp,w
  7758  045E  1903               	btfsc	3,2
  7759  045F  2C62               	goto	l2691
  7760  0460  3001               	movlw	1
  7761  0461  02B2               	subwf	___fladd@bexp,f
  7762  0462                     l2691:	
  7763  0462  1FA2               	btfss	___fladd@b+2,7
  7764  0463  2C4C               	goto	l2677
  7765  0464                     l2693:	
  7766  0464  01B1               	clrf	___fladd@aexp
  7767  0465  1FB3               	btfss	___fladd@grs,7
  7768  0466  2C6F               	goto	l2703
  7769  0467  0833               	movf	___fladd@grs,w
  7770  0468  397F               	andlw	127
  7771  0469  1903               	btfsc	3,2
  7772  046A  1820               	btfsc	___fladd@b,0
  7773  046B  2C6D               	goto	l2699
  7774  046C  2C6F               	goto	l2703
  7775  046D                     l2699:	
  7776  046D  01B1               	clrf	___fladd@aexp
  7777  046E  0AB1               	incf	___fladd@aexp,f
  7778  046F                     l2703:	
  7779  046F  0831               	movf	___fladd@aexp,w
  7780  0470  1903               	btfsc	3,2
  7781  0471  2CA2               	goto	l898
  7782  0472  3001               	movlw	1
  7783  0473  07A0               	addwf	___fladd@b,f
  7784  0474  3000               	movlw	0
  7785  0475  1803               	skipnc
  7786  0476  3001               	movlw	1
  7787  0477  07A1               	addwf	___fladd@b+1,f
  7788  0478  3000               	movlw	0
  7789  0479  1803               	skipnc
  7790  047A  3001               	movlw	1
  7791  047B  07A2               	addwf	___fladd@b+2,f
  7792  047C  3000               	movlw	0
  7793  047D  1803               	skipnc
  7794  047E  3001               	movlw	1
  7795  047F  07A3               	addwf	___fladd@b+3,f
  7796  0480  1C23               	btfss	___fladd@b+3,0
  7797  0481  2CA2               	goto	l898
  7798  0482  0820               	movf	___fladd@b,w
  7799  0483  00A8               	movwf	??___fladd
  7800  0484  0821               	movf	___fladd@b+1,w
  7801  0485  00A9               	movwf	??___fladd+1
  7802  0486  0822               	movf	___fladd@b+2,w
  7803  0487  00AA               	movwf	??___fladd+2
  7804  0488  0823               	movf	___fladd@b+3,w
  7805  0489  00AB               	movwf	??___fladd+3
  7806  048A  3001               	movlw	1
  7807  048B  00AC               	movwf	??___fladd+4
  7808  048C                     u2495:	
  7809  048C  0D2B               	rlf	??___fladd+3,w
  7810  048D  0CAB               	rrf	??___fladd+3,f
  7811  048E  0CAA               	rrf	??___fladd+2,f
  7812  048F  0CA9               	rrf	??___fladd+1,f
  7813  0490  0CA8               	rrf	??___fladd,f
  7814  0491  0BAC               	decfsz	??___fladd+4,f
  7815  0492  2C8C               	goto	u2495
  7816  0493  082B               	movf	??___fladd+3,w
  7817  0494  00A3               	movwf	___fladd@b+3
  7818  0495  082A               	movf	??___fladd+2,w
  7819  0496  00A2               	movwf	___fladd@b+2
  7820  0497  0829               	movf	??___fladd+1,w
  7821  0498  00A1               	movwf	___fladd@b+1
  7822  0499  0828               	movf	??___fladd,w
  7823  049A  00A0               	movwf	___fladd@b
  7824  049B  0A32               	incf	___fladd@bexp,w
  7825  049C  1903               	btfsc	3,2
  7826  049D  2CA2               	goto	l898
  7827  049E  3001               	movlw	1
  7828  049F  00A8               	movwf	??___fladd
  7829  04A0  0828               	movf	??___fladd,w
  7830  04A1  07B2               	addwf	___fladd@bexp,f
  7831  04A2                     l898:	
  7832  04A2  0A32               	incf	___fladd@bexp,w
  7833  04A3  1D03               	btfss	3,2
  7834  04A4  0832               	movf	___fladd@bexp,w
  7835  04A5  1D03               	btfss	3,2
  7836  04A6  2CB2               	goto	l2721
  7837  04A7  3000               	movlw	0
  7838  04A8  00A3               	movwf	___fladd@b+3
  7839  04A9  3000               	movlw	0
  7840  04AA  00A2               	movwf	___fladd@b+2
  7841  04AB  3000               	movlw	0
  7842  04AC  00A1               	movwf	___fladd@b+1
  7843  04AD  3000               	movlw	0
  7844  04AE  00A0               	movwf	___fladd@b
  7845  04AF  0832               	movf	___fladd@bexp,w
  7846  04B0  1903               	btfsc	3,2
  7847  04B1  01B0               	clrf	___fladd@signs
  7848  04B2                     l2721:	
  7849  04B2  1C32               	btfss	___fladd@bexp,0
  7850  04B3  2CB6               	goto	l2725
  7851  04B4  17A2               	bsf	___fladd@b+2,7
  7852  04B5  2CBA               	goto	l906
  7853  04B6                     l2725:	
  7854  04B6  307F               	movlw	127
  7855  04B7  00A8               	movwf	??___fladd
  7856  04B8  0828               	movf	??___fladd,w
  7857  04B9  05A2               	andwf	___fladd@b+2,f
  7858  04BA                     l906:	
  7859  04BA  0832               	movf	___fladd@bexp,w
  7860  04BB  00A8               	movwf	??___fladd
  7861  04BC  1003               	clrc
  7862  04BD  0C28               	rrf	??___fladd,w
  7863  04BE  00A9               	movwf	??___fladd+1
  7864  04BF  0829               	movf	??___fladd+1,w
  7865  04C0  00A3               	movwf	___fladd@b+3
  7866  04C1  1FB0               	btfss	___fladd@signs,7
  7867  04C2  0008               	return
  7868  04C3  17A3               	bsf	___fladd@b+3,7
  7869  04C4  0008               	return
  7870  04C5                     __end_of___fladd:	
  7871                           
  7872                           	psect	text47
  7873  04C5                     __ptext47:	
  7874 ;; *************** function ___fldiv *****************
  7875 ;; Defined at:
  7876 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\sprcdiv.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  a               4   14[BANK0 ] unsigned char 
  7879 ;;  b               4   18[BANK0 ] unsigned char 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  grs             4   34[BANK0 ] unsigned long 
  7882 ;;  rem             4   27[BANK0 ] unsigned long 
  7883 ;;  new_exp         2   32[BANK0 ] int 
  7884 ;;  aexp            1   39[BANK0 ] unsigned char 
  7885 ;;  bexp            1   38[BANK0 ] unsigned char 
  7886 ;;  sign            1   31[BANK0 ] unsigned char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  4   14[BANK0 ] unsigned char 
  7889 ;; Registers used:
  7890 ;;		wreg, status,2, status,0, btemp+1
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7896 ;;      Params:         0       8       0       0       0
  7897 ;;      Locals:         0      13       0       0       0
  7898 ;;      Temps:          0       5       0       0       0
  7899 ;;      Totals:         0      26       0       0       0
  7900 ;;Total ram usage:       26 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    3
  7903 ;; This function calls:
  7904 ;;		Nothing
  7905 ;; This function is called by:
  7906 ;;		_timer0_init
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function ___fldiv
  7912  04C5                     ___fldiv:	
  7913                           
  7914                           ;incstack = 0
  7915                           ; Regs used in ___fldiv: [wreg+status,2+status,0+btemp+1]
  7916  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  7917  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  7918  04C7  0835               	movf	___fldiv@b+3,w
  7919  04C8  3980               	andlw	128
  7920  04C9  00B6               	movwf	??___fldiv
  7921  04CA  0836               	movf	??___fldiv,w
  7922  04CB  00BF               	movwf	___fldiv@sign
  7923  04CC  0835               	movf	___fldiv@b+3,w
  7924  04CD  00B6               	movwf	??___fldiv
  7925  04CE  0736               	addwf	??___fldiv,w
  7926  04CF  00B7               	movwf	??___fldiv+1
  7927  04D0  0837               	movf	??___fldiv+1,w
  7928  04D1  00C6               	movwf	___fldiv@bexp
  7929  04D2  1BB4               	btfsc	___fldiv@b+2,7
  7930  04D3  1446               	bsf	___fldiv@bexp,0
  7931  04D4  0846               	movf	___fldiv@bexp,w
  7932  04D5  1903               	btfsc	3,2
  7933  04D6  2CE5               	goto	l3159
  7934  04D7  0A46               	incf	___fldiv@bexp,w
  7935  04D8  1D03               	btfss	3,2
  7936  04D9  2CE2               	goto	l3155
  7937  04DA  3000               	movlw	0
  7938  04DB  00B5               	movwf	___fldiv@b+3
  7939  04DC  3000               	movlw	0
  7940  04DD  00B4               	movwf	___fldiv@b+2
  7941  04DE  3000               	movlw	0
  7942  04DF  00B3               	movwf	___fldiv@b+1
  7943  04E0  3000               	movlw	0
  7944  04E1  00B2               	movwf	___fldiv@b
  7945  04E2                     l3155:	
  7946  04E2  17B4               	bsf	___fldiv@b+2,7
  7947  04E3  01B5               	clrf	___fldiv@b+3
  7948  04E4  2CED               	goto	l3161
  7949  04E5                     l3159:	
  7950  04E5  3000               	movlw	0
  7951  04E6  00B5               	movwf	___fldiv@b+3
  7952  04E7  3000               	movlw	0
  7953  04E8  00B4               	movwf	___fldiv@b+2
  7954  04E9  3000               	movlw	0
  7955  04EA  00B3               	movwf	___fldiv@b+1
  7956  04EB  3000               	movlw	0
  7957  04EC  00B2               	movwf	___fldiv@b
  7958  04ED                     l3161:	
  7959  04ED  0831               	movf	___fldiv@a+3,w
  7960  04EE  3980               	andlw	128
  7961  04EF  00B6               	movwf	??___fldiv
  7962  04F0  0836               	movf	??___fldiv,w
  7963  04F1  06BF               	xorwf	___fldiv@sign,f
  7964  04F2  0831               	movf	___fldiv@a+3,w
  7965  04F3  00B6               	movwf	??___fldiv
  7966  04F4  0736               	addwf	??___fldiv,w
  7967  04F5  00B7               	movwf	??___fldiv+1
  7968  04F6  0837               	movf	??___fldiv+1,w
  7969  04F7  00C7               	movwf	___fldiv@aexp
  7970  04F8  1BB0               	btfsc	___fldiv@a+2,7
  7971  04F9  1447               	bsf	___fldiv@aexp,0
  7972  04FA  0847               	movf	___fldiv@aexp,w
  7973  04FB  1903               	btfsc	3,2
  7974  04FC  2D0B               	goto	l3179
  7975  04FD  0A47               	incf	___fldiv@aexp,w
  7976  04FE  1D03               	btfss	3,2
  7977  04FF  2D08               	goto	l3175
  7978  0500  3000               	movlw	0
  7979  0501  00B1               	movwf	___fldiv@a+3
  7980  0502  3000               	movlw	0
  7981  0503  00B0               	movwf	___fldiv@a+2
  7982  0504  3000               	movlw	0
  7983  0505  00AF               	movwf	___fldiv@a+1
  7984  0506  3000               	movlw	0
  7985  0507  00AE               	movwf	___fldiv@a
  7986  0508                     l3175:	
  7987  0508  17B0               	bsf	___fldiv@a+2,7
  7988  0509  01B1               	clrf	___fldiv@a+3
  7989  050A  2D13               	goto	l920
  7990  050B                     l3179:	
  7991  050B  3000               	movlw	0
  7992  050C  00B1               	movwf	___fldiv@a+3
  7993  050D  3000               	movlw	0
  7994  050E  00B0               	movwf	___fldiv@a+2
  7995  050F  3000               	movlw	0
  7996  0510  00AF               	movwf	___fldiv@a+1
  7997  0511  3000               	movlw	0
  7998  0512  00AE               	movwf	___fldiv@a
  7999  0513                     l920:	
  8000  0513  0831               	movf	___fldiv@a+3,w
  8001  0514  0430               	iorwf	___fldiv@a+2,w
  8002  0515  042F               	iorwf	___fldiv@a+1,w
  8003  0516  042E               	iorwf	___fldiv@a,w
  8004  0517  1D03               	skipz
  8005  0518  2D32               	goto	l3189
  8006  0519  3000               	movlw	0
  8007  051A  00B5               	movwf	___fldiv@b+3
  8008  051B  3000               	movlw	0
  8009  051C  00B4               	movwf	___fldiv@b+2
  8010  051D  3000               	movlw	0
  8011  051E  00B3               	movwf	___fldiv@b+1
  8012  051F  3000               	movlw	0
  8013  0520  00B2               	movwf	___fldiv@b
  8014  0521  3080               	movlw	128
  8015  0522  04B4               	iorwf	___fldiv@b+2,f
  8016  0523  307F               	movlw	127
  8017  0524  04B5               	iorwf	___fldiv@b+3,f
  8018  0525                     L8:	
  8019  0525  083F               	movf	___fldiv@sign,w
  8020  0526  00B6               	movwf	??___fldiv
  8021  0527  0836               	movf	??___fldiv,w
  8022  0528  04B5               	iorwf	___fldiv@b+3,f
  8023  0529  0835               	movf	___fldiv@b+3,w
  8024  052A  00B1               	movwf	?___fldiv+3
  8025  052B  0834               	movf	___fldiv@b+2,w
  8026  052C  00B0               	movwf	?___fldiv+2
  8027  052D  0833               	movf	___fldiv@b+1,w
  8028  052E  00AF               	movwf	?___fldiv+1
  8029  052F  0832               	movf	___fldiv@b,w
  8030  0530  00AE               	movwf	?___fldiv
  8031  0531  0008               	return
  8032  0532                     l3189:	
  8033  0532  0846               	movf	___fldiv@bexp,w
  8034  0533  1D03               	btfss	3,2
  8035  0534  2D3E               	goto	l3195
  8036  0535  3000               	movlw	0
  8037  0536  00B1               	movwf	?___fldiv+3
  8038  0537  3000               	movlw	0
  8039  0538  00B0               	movwf	?___fldiv+2
  8040  0539  3000               	movlw	0
  8041  053A  00AF               	movwf	?___fldiv+1
  8042  053B  3000               	movlw	0
  8043  053C  00AE               	movwf	?___fldiv
  8044  053D  0008               	return
  8045  053E                     l3195:	
  8046  053E  0846               	movf	___fldiv@bexp,w
  8047  053F  00B6               	movwf	??___fldiv
  8048  0540  01B7               	clrf	??___fldiv+1
  8049  0541  0837               	movf	??___fldiv+1,w
  8050  0542  00B9               	movwf	??___fldiv+3
  8051  0543  0847               	movf	___fldiv@aexp,w
  8052  0544  0236               	subwf	??___fldiv,w
  8053  0545  00B8               	movwf	??___fldiv+2
  8054  0546  1C03               	skipc
  8055  0547  03B9               	decf	??___fldiv+3,f
  8056  0548  0838               	movf	??___fldiv+2,w
  8057  0549  3E7F               	addlw	127
  8058  054A  00C0               	movwf	___fldiv@new_exp
  8059  054B  0839               	movf	??___fldiv+3,w
  8060  054C  1803               	skipnc
  8061  054D  3E01               	addlw	1
  8062  054E  3E00               	addlw	0
  8063  054F  00C1               	movwf	___fldiv@new_exp+1
  8064  0550  0835               	movf	___fldiv@b+3,w
  8065  0551  00BE               	movwf	___fldiv@rem+3
  8066  0552  0834               	movf	___fldiv@b+2,w
  8067  0553  00BD               	movwf	___fldiv@rem+2
  8068  0554  0833               	movf	___fldiv@b+1,w
  8069  0555  00BC               	movwf	___fldiv@rem+1
  8070  0556  0832               	movf	___fldiv@b,w
  8071  0557  00BB               	movwf	___fldiv@rem
  8072  0558  3000               	movlw	0
  8073  0559  00B5               	movwf	___fldiv@b+3
  8074  055A  3000               	movlw	0
  8075  055B  00B4               	movwf	___fldiv@b+2
  8076  055C  3000               	movlw	0
  8077  055D  00B3               	movwf	___fldiv@b+1
  8078  055E  3000               	movlw	0
  8079  055F  00B2               	movwf	___fldiv@b
  8080  0560  3000               	movlw	0
  8081  0561  00C5               	movwf	___fldiv@grs+3
  8082  0562  3000               	movlw	0
  8083  0563  00C4               	movwf	___fldiv@grs+2
  8084  0564  3000               	movlw	0
  8085  0565  00C3               	movwf	___fldiv@grs+1
  8086  0566  3000               	movlw	0
  8087  0567  00C2               	movwf	___fldiv@grs
  8088  0568  01C7               	clrf	___fldiv@aexp
  8089  0569                     l3223:	
  8090  0569  301A               	movlw	26
  8091  056A  0247               	subwf	___fldiv@aexp,w
  8092  056B  1803               	btfsc	3,0
  8093  056C  2DB1               	goto	l3225
  8094  056D  0847               	movf	___fldiv@aexp,w
  8095  056E  1903               	btfsc	3,2
  8096  056F  2D8D               	goto	l3215
  8097  0570  3001               	movlw	1
  8098  0571  00B6               	movwf	??___fldiv
  8099  0572                     u3265:	
  8100  0572  1003               	clrc
  8101  0573  0DBB               	rlf	___fldiv@rem,f
  8102  0574  0DBC               	rlf	___fldiv@rem+1,f
  8103  0575  0DBD               	rlf	___fldiv@rem+2,f
  8104  0576  0DBE               	rlf	___fldiv@rem+3,f
  8105  0577  0BB6               	decfsz	??___fldiv,f
  8106  0578  2D72               	goto	u3265
  8107  0579  3001               	movlw	1
  8108  057A  00B6               	movwf	??___fldiv
  8109  057B                     u3275:	
  8110  057B  1003               	clrc
  8111  057C  0DB2               	rlf	___fldiv@b,f
  8112  057D  0DB3               	rlf	___fldiv@b+1,f
  8113  057E  0DB4               	rlf	___fldiv@b+2,f
  8114  057F  0DB5               	rlf	___fldiv@b+3,f
  8115  0580  0BB6               	decfsz	??___fldiv,f
  8116  0581  2D7B               	goto	u3275
  8117  0582  1BC5               	btfsc	___fldiv@grs+3,7
  8118  0583  1432               	bsf	___fldiv@b,0
  8119  0584  3001               	movlw	1
  8120  0585  00B6               	movwf	??___fldiv
  8121  0586                     u3295:	
  8122  0586  1003               	clrc
  8123  0587  0DC2               	rlf	___fldiv@grs,f
  8124  0588  0DC3               	rlf	___fldiv@grs+1,f
  8125  0589  0DC4               	rlf	___fldiv@grs+2,f
  8126  058A  0DC5               	rlf	___fldiv@grs+3,f
  8127  058B  0BB6               	decfsz	??___fldiv,f
  8128  058C  2D86               	goto	u3295
  8129  058D                     l3215:	
  8130  058D  0831               	movf	___fldiv@a+3,w
  8131  058E  023E               	subwf	___fldiv@rem+3,w
  8132  058F  1D03               	skipz
  8133  0590  2D9B               	goto	u3305
  8134  0591  0830               	movf	___fldiv@a+2,w
  8135  0592  023D               	subwf	___fldiv@rem+2,w
  8136  0593  1D03               	skipz
  8137  0594  2D9B               	goto	u3305
  8138  0595  082F               	movf	___fldiv@a+1,w
  8139  0596  023C               	subwf	___fldiv@rem+1,w
  8140  0597  1D03               	skipz
  8141  0598  2D9B               	goto	u3305
  8142  0599  082E               	movf	___fldiv@a,w
  8143  059A  023B               	subwf	___fldiv@rem,w
  8144  059B                     u3305:	
  8145  059B  1C03               	skipc
  8146  059C  2DAC               	goto	l3221
  8147  059D  1745               	bsf	___fldiv@grs+3,6
  8148  059E  082E               	movf	___fldiv@a,w
  8149  059F  02BB               	subwf	___fldiv@rem,f
  8150  05A0  082F               	movf	___fldiv@a+1,w
  8151  05A1  1C03               	skipc
  8152  05A2  0F2F               	incfsz	___fldiv@a+1,w
  8153  05A3  02BC               	subwf	___fldiv@rem+1,f
  8154  05A4  0830               	movf	___fldiv@a+2,w
  8155  05A5  1C03               	skipc
  8156  05A6  0F30               	incfsz	___fldiv@a+2,w
  8157  05A7  02BD               	subwf	___fldiv@rem+2,f
  8158  05A8  0831               	movf	___fldiv@a+3,w
  8159  05A9  1C03               	skipc
  8160  05AA  0F31               	incfsz	___fldiv@a+3,w
  8161  05AB  02BE               	subwf	___fldiv@rem+3,f
  8162  05AC                     l3221:	
  8163  05AC  3001               	movlw	1
  8164  05AD  00B6               	movwf	??___fldiv
  8165  05AE  0836               	movf	??___fldiv,w
  8166  05AF  07C7               	addwf	___fldiv@aexp,f
  8167  05B0  2D69               	goto	l3223
  8168  05B1                     l3225:	
  8169  05B1  083E               	movf	___fldiv@rem+3,w
  8170  05B2  043D               	iorwf	___fldiv@rem+2,w
  8171  05B3  043C               	iorwf	___fldiv@rem+1,w
  8172  05B4  043B               	iorwf	___fldiv@rem,w
  8173  05B5  1D03               	btfss	3,2
  8174  05B6  1442               	bsf	___fldiv@grs,0
  8175  05B7                     l3239:	
  8176  05B7  1BB4               	btfsc	___fldiv@b+2,7
  8177  05B8  2DD4               	goto	l3241
  8178  05B9  3001               	movlw	1
  8179  05BA  00B6               	movwf	??___fldiv
  8180  05BB                     u3335:	
  8181  05BB  1003               	clrc
  8182  05BC  0DB2               	rlf	___fldiv@b,f
  8183  05BD  0DB3               	rlf	___fldiv@b+1,f
  8184  05BE  0DB4               	rlf	___fldiv@b+2,f
  8185  05BF  0DB5               	rlf	___fldiv@b+3,f
  8186  05C0  0BB6               	decfsz	??___fldiv,f
  8187  05C1  2DBB               	goto	u3335
  8188  05C2  1BC5               	btfsc	___fldiv@grs+3,7
  8189  05C3  1432               	bsf	___fldiv@b,0
  8190  05C4  3001               	movlw	1
  8191  05C5  00B6               	movwf	??___fldiv
  8192  05C6                     u3355:	
  8193  05C6  1003               	clrc
  8194  05C7  0DC2               	rlf	___fldiv@grs,f
  8195  05C8  0DC3               	rlf	___fldiv@grs+1,f
  8196  05C9  0DC4               	rlf	___fldiv@grs+2,f
  8197  05CA  0DC5               	rlf	___fldiv@grs+3,f
  8198  05CB  0BB6               	decfsz	??___fldiv,f
  8199  05CC  2DC6               	goto	u3355
  8200  05CD  30FF               	movlw	255
  8201  05CE  07C0               	addwf	___fldiv@new_exp,f
  8202  05CF  1803               	skipnc
  8203  05D0  0AC1               	incf	___fldiv@new_exp+1,f
  8204  05D1  30FF               	movlw	255
  8205  05D2  07C1               	addwf	___fldiv@new_exp+1,f
  8206  05D3  2DB7               	goto	l3239
  8207  05D4                     l3241:	
  8208  05D4  01C7               	clrf	___fldiv@aexp
  8209  05D5  1FC5               	btfss	___fldiv@grs+3,7
  8210  05D6  2DED               	goto	l3251
  8211  05D7  30FF               	movlw	255
  8212  05D8  0542               	andwf	___fldiv@grs,w
  8213  05D9  00B6               	movwf	??___fldiv
  8214  05DA  30FF               	movlw	255
  8215  05DB  0543               	andwf	___fldiv@grs+1,w
  8216  05DC  00B7               	movwf	??___fldiv+1
  8217  05DD  30FF               	movlw	255
  8218  05DE  0544               	andwf	___fldiv@grs+2,w
  8219  05DF  00B8               	movwf	??___fldiv+2
  8220  05E0  307F               	movlw	127
  8221  05E1  0545               	andwf	___fldiv@grs+3,w
  8222  05E2  00B9               	movwf	??___fldiv+3
  8223  05E3  0839               	movf	??___fldiv+3,w
  8224  05E4  0438               	iorwf	??___fldiv+2,w
  8225  05E5  0437               	iorwf	??___fldiv+1,w
  8226  05E6  0436               	iorwf	??___fldiv,w
  8227  05E7  1903               	skipnz
  8228  05E8  1832               	btfsc	___fldiv@b,0
  8229  05E9  2DEB               	goto	l3247
  8230  05EA  2DED               	goto	l3251
  8231  05EB                     l3247:	
  8232  05EB  01C7               	clrf	___fldiv@aexp
  8233  05EC  0AC7               	incf	___fldiv@aexp,f
  8234  05ED                     l3251:	
  8235  05ED  0847               	movf	___fldiv@aexp,w
  8236  05EE  1903               	btfsc	3,2
  8237  05EF  2E1F               	goto	l3261
  8238  05F0  3001               	movlw	1
  8239  05F1  07B2               	addwf	___fldiv@b,f
  8240  05F2  3000               	movlw	0
  8241  05F3  1803               	skipnc
  8242  05F4  3001               	movlw	1
  8243  05F5  07B3               	addwf	___fldiv@b+1,f
  8244  05F6  3000               	movlw	0
  8245  05F7  1803               	skipnc
  8246  05F8  3001               	movlw	1
  8247  05F9  07B4               	addwf	___fldiv@b+2,f
  8248  05FA  3000               	movlw	0
  8249  05FB  1803               	skipnc
  8250  05FC  3001               	movlw	1
  8251  05FD  07B5               	addwf	___fldiv@b+3,f
  8252  05FE  1C35               	btfss	___fldiv@b+3,0
  8253  05FF  2E1F               	goto	l3261
  8254  0600  0832               	movf	___fldiv@b,w
  8255  0601  00B6               	movwf	??___fldiv
  8256  0602  0833               	movf	___fldiv@b+1,w
  8257  0603  00B7               	movwf	??___fldiv+1
  8258  0604  0834               	movf	___fldiv@b+2,w
  8259  0605  00B8               	movwf	??___fldiv+2
  8260  0606  0835               	movf	___fldiv@b+3,w
  8261  0607  00B9               	movwf	??___fldiv+3
  8262  0608  3001               	movlw	1
  8263  0609  00BA               	movwf	??___fldiv+4
  8264  060A                     u3425:	
  8265  060A  0D39               	rlf	??___fldiv+3,w
  8266  060B  0CB9               	rrf	??___fldiv+3,f
  8267  060C  0CB8               	rrf	??___fldiv+2,f
  8268  060D  0CB7               	rrf	??___fldiv+1,f
  8269  060E  0CB6               	rrf	??___fldiv,f
  8270  060F  0BBA               	decfsz	??___fldiv+4,f
  8271  0610  2E0A               	goto	u3425
  8272  0611  0839               	movf	??___fldiv+3,w
  8273  0612  00B5               	movwf	___fldiv@b+3
  8274  0613  0838               	movf	??___fldiv+2,w
  8275  0614  00B4               	movwf	___fldiv@b+2
  8276  0615  0837               	movf	??___fldiv+1,w
  8277  0616  00B3               	movwf	___fldiv@b+1
  8278  0617  0836               	movf	??___fldiv,w
  8279  0618  00B2               	movwf	___fldiv@b
  8280  0619  3001               	movlw	1
  8281  061A  07C0               	addwf	___fldiv@new_exp,f
  8282  061B  1803               	skipnc
  8283  061C  0AC1               	incf	___fldiv@new_exp+1,f
  8284  061D  3000               	movlw	0
  8285  061E  07C1               	addwf	___fldiv@new_exp+1,f
  8286  061F                     l3261:	
  8287  061F  0841               	movf	___fldiv@new_exp+1,w
  8288  0620  3A80               	xorlw	128
  8289  0621  00FF               	movwf	127
  8290  0622  3080               	movlw	128
  8291  0623  027F               	subwf	127,w
  8292  0624  1D03               	skipz
  8293  0625  2E28               	goto	u3435
  8294  0626  30FF               	movlw	255
  8295  0627  0240               	subwf	___fldiv@new_exp,w
  8296  0628                     u3435:	
  8297  0628  1C03               	skipc
  8298  0629  2E38               	goto	l3265
  8299  062A  30FF               	movlw	255
  8300  062B  1283               	bcf	3,5	;RP0=0, select bank0
  8301  062C  1303               	bcf	3,6	;RP1=0, select bank0
  8302  062D  00C0               	movwf	___fldiv@new_exp
  8303  062E  3000               	movlw	0
  8304  062F  00C1               	movwf	___fldiv@new_exp+1
  8305  0630  3000               	movlw	0
  8306  0631  00B5               	movwf	___fldiv@b+3
  8307  0632  3000               	movlw	0
  8308  0633  00B4               	movwf	___fldiv@b+2
  8309  0634  3000               	movlw	0
  8310  0635  00B3               	movwf	___fldiv@b+1
  8311  0636  3000               	movlw	0
  8312  0637  00B2               	movwf	___fldiv@b
  8313  0638                     l3265:	
  8314  0638  1283               	bcf	3,5	;RP0=0, select bank0
  8315  0639  1303               	bcf	3,6	;RP1=0, select bank0
  8316  063A  0841               	movf	___fldiv@new_exp+1,w
  8317  063B  3A80               	xorlw	128
  8318  063C  00FF               	movwf	127
  8319  063D  3080               	movlw	128
  8320  063E  027F               	subwf	127,w
  8321  063F  1D03               	skipz
  8322  0640  2E43               	goto	u3445
  8323  0641  3001               	movlw	1
  8324  0642  0240               	subwf	___fldiv@new_exp,w
  8325  0643                     u3445:	
  8326  0643  1803               	skipnc
  8327  0644  2E52               	goto	l942
  8328  0645  1283               	bcf	3,5	;RP0=0, select bank0
  8329  0646  1303               	bcf	3,6	;RP1=0, select bank0
  8330  0647  01C0               	clrf	___fldiv@new_exp
  8331  0648  01C1               	clrf	___fldiv@new_exp+1
  8332  0649  3000               	movlw	0
  8333  064A  00B5               	movwf	___fldiv@b+3
  8334  064B  3000               	movlw	0
  8335  064C  00B4               	movwf	___fldiv@b+2
  8336  064D  3000               	movlw	0
  8337  064E  00B3               	movwf	___fldiv@b+1
  8338  064F  3000               	movlw	0
  8339  0650  00B2               	movwf	___fldiv@b
  8340  0651  01BF               	clrf	___fldiv@sign
  8341  0652                     l942:	
  8342  0652  1283               	bcf	3,5	;RP0=0, select bank0
  8343  0653  1303               	bcf	3,6	;RP1=0, select bank0
  8344  0654  0840               	movf	___fldiv@new_exp,w
  8345  0655  00B6               	movwf	??___fldiv
  8346  0656  0836               	movf	??___fldiv,w
  8347  0657  00C6               	movwf	___fldiv@bexp
  8348  0658  1C46               	btfss	___fldiv@bexp,0
  8349  0659  2E5C               	goto	l3277
  8350  065A  17B4               	bsf	___fldiv@b+2,7
  8351  065B  2E60               	goto	l944
  8352  065C                     l3277:	
  8353  065C  307F               	movlw	127
  8354  065D  00B6               	movwf	??___fldiv
  8355  065E  0836               	movf	??___fldiv,w
  8356  065F  05B4               	andwf	___fldiv@b+2,f
  8357  0660                     l944:	
  8358  0660  0846               	movf	___fldiv@bexp,w
  8359  0661  00B6               	movwf	??___fldiv
  8360  0662  1003               	clrc
  8361  0663  0C36               	rrf	??___fldiv,w
  8362  0664  00B7               	movwf	??___fldiv+1
  8363  0665  0837               	movf	??___fldiv+1,w
  8364  0666  00B5               	movwf	___fldiv@b+3
  8365  0667  2D25               	goto	L8
  8366  0668                     __end_of___fldiv:	
  8367                           
  8368                           	psect	text48
  8369  153C                     __ptext48:	
  8370 ;; *************** function _T0_timer_mode_state *****************
  8371 ;; Defined at:
  8372 ;;		line 49 in file "TIMER0.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  s               1    wreg     enum E882
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  s               1    2[BANK0 ] enum E882
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      void 
  8379 ;; Registers used:
  8380 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8386 ;;      Params:         0       0       0       0       0
  8387 ;;      Locals:         0       1       0       0       0
  8388 ;;      Temps:          0       2       0       0       0
  8389 ;;      Totals:         0       3       0       0       0
  8390 ;;Total ram usage:        3 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:    3
  8393 ;; This function calls:
  8394 ;;		Nothing
  8395 ;; This function is called by:
  8396 ;;		_OS_init
  8397 ;;		_timer0_init
  8398 ;; This function uses a non-reentrant model
  8399 ;;
  8400                           
  8401                           
  8402                           ;psect for function _T0_timer_mode_state
  8403  153C                     _T0_timer_mode_state:	
  8404                           
  8405                           ;incstack = 0
  8406                           ; Regs used in _T0_timer_mode_state: [wreg-fsr0h+status,2+status,0]
  8407                           ;T0_timer_mode_state@s stored from wreg
  8408  153C  1283               	bcf	3,5	;RP0=0, select bank0
  8409  153D  1303               	bcf	3,6	;RP1=0, select bank0
  8410  153E  00A2               	movwf	T0_timer_mode_state@s
  8411                           
  8412                           ;TIMER0.c: 51:     switch(s) {
  8413  153F  2D48               	goto	l2919
  8414  1540                     l203:	
  8415                           ;TIMER0.c: 52:         case T0_ON :
  8416                           
  8417                           
  8418                           ;TIMER0.c: 53:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 0);
  8419  1540  1683               	bsf	3,5	;RP0=1, select bank1
  8420  1541  1303               	bcf	3,6	;RP1=0, select bank1
  8421  1542  1281               	bcf	1,5	;volatile
  8422                           
  8423                           ;TIMER0.c: 54:             break;
  8424  1543  0008               	return
  8425  1544                     l205:	
  8426                           ;TIMER0.c: 55:         case T0_OFF :
  8427                           
  8428                           
  8429                           ;TIMER0.c: 56:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 1);
  8430  1544  1683               	bsf	3,5	;RP0=1, select bank1
  8431  1545  1303               	bcf	3,6	;RP1=0, select bank1
  8432  1546  1681               	bsf	1,5	;volatile
  8433                           
  8434                           ;TIMER0.c: 57:             break;
  8435  1547  0008               	return
  8436  1548                     l2919:	
  8437  1548  0822               	movf	T0_timer_mode_state@s,w
  8438  1549  00A0               	movwf	??_T0_timer_mode_state
  8439  154A  01A1               	clrf	??_T0_timer_mode_state+1
  8440                           
  8441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8442                           ; Switch size 1, requested type "simple"
  8443                           ; Number of cases is 1, Range of values is 0 to 0
  8444                           ; switch strategies available:
  8445                           ; Name         Instructions Cycles
  8446                           ; simple_byte            4     3 (average)
  8447                           ; direct_byte           11     8 (fixed)
  8448                           ; jumptable            260     6 (fixed)
  8449                           ;	Chosen strategy is simple_byte
  8450  154B  0821               	movf	??_T0_timer_mode_state+1,w
  8451  154C  3A00               	xorlw	0	; case 0
  8452  154D  1903               	skipnz
  8453  154E  2D50               	goto	l3957
  8454  154F  2D58               	goto	l207
  8455  1550                     l3957:	
  8456                           
  8457                           ; Switch size 1, requested type "simple"
  8458                           ; Number of cases is 2, Range of values is 0 to 1
  8459                           ; switch strategies available:
  8460                           ; Name         Instructions Cycles
  8461                           ; simple_byte            7     4 (average)
  8462                           ; direct_byte           14     8 (fixed)
  8463                           ; jumptable            260     6 (fixed)
  8464                           ;	Chosen strategy is simple_byte
  8465  1550  0820               	movf	??_T0_timer_mode_state,w
  8466  1551  3A00               	xorlw	0	; case 0
  8467  1552  1903               	skipnz
  8468  1553  2D40               	goto	l203
  8469  1554  3A01               	xorlw	1	; case 1
  8470  1555  1903               	skipnz
  8471  1556  2D44               	goto	l205
  8472  1557  2D58               	goto	l207
  8473  1558                     l207:	
  8474  1558  0008               	return
  8475  1559                     __end_of_T0_timer_mode_state:	
  8476                           
  8477                           	psect	text49
  8478  151F                     __ptext49:	
  8479 ;; *************** function _T0_counter_mode_state *****************
  8480 ;; Defined at:
  8481 ;;		line 64 in file "TIMER0.c"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  s               1    wreg     enum E882
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  s               1    2[BANK0 ] enum E882
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8495 ;;      Params:         0       0       0       0       0
  8496 ;;      Locals:         0       1       0       0       0
  8497 ;;      Temps:          0       2       0       0       0
  8498 ;;      Totals:         0       3       0       0       0
  8499 ;;Total ram usage:        3 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:    3
  8502 ;; This function calls:
  8503 ;;		Nothing
  8504 ;; This function is called by:
  8505 ;;		_timer0_init
  8506 ;; This function uses a non-reentrant model
  8507 ;;
  8508                           
  8509                           
  8510                           ;psect for function _T0_counter_mode_state
  8511  151F                     _T0_counter_mode_state:	
  8512                           
  8513                           ;incstack = 0
  8514                           ; Regs used in _T0_counter_mode_state: [wreg-fsr0h+status,2+status,0]
  8515                           ;T0_counter_mode_state@s stored from wreg
  8516  151F  1283               	bcf	3,5	;RP0=0, select bank0
  8517  1520  1303               	bcf	3,6	;RP1=0, select bank0
  8518  1521  00A2               	movwf	T0_counter_mode_state@s
  8519                           
  8520                           ;TIMER0.c: 67:     switch(s) {
  8521  1522  2D2B               	goto	l2997
  8522  1523                     l211:	
  8523                           ;TIMER0.c: 68:         case T0_ON :
  8524                           
  8525                           
  8526                           ;TIMER0.c: 69:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 1);
  8527  1523  1683               	bsf	3,5	;RP0=1, select bank1
  8528  1524  1303               	bcf	3,6	;RP1=0, select bank1
  8529  1525  1681               	bsf	1,5	;volatile
  8530                           
  8531                           ;TIMER0.c: 70:             break;
  8532  1526  0008               	return
  8533  1527                     l213:	
  8534                           ;TIMER0.c: 71:         case T0_OFF :
  8535                           
  8536                           
  8537                           ;TIMER0.c: 72:             (((*((volatile tRegister *)(0x81))).Bits.BIT5) = 0);
  8538  1527  1683               	bsf	3,5	;RP0=1, select bank1
  8539  1528  1303               	bcf	3,6	;RP1=0, select bank1
  8540  1529  1281               	bcf	1,5	;volatile
  8541                           
  8542                           ;TIMER0.c: 73:             break;
  8543  152A  0008               	return
  8544  152B                     l2997:	
  8545  152B  0822               	movf	T0_counter_mode_state@s,w
  8546  152C  00A0               	movwf	??_T0_counter_mode_state
  8547  152D  01A1               	clrf	??_T0_counter_mode_state+1
  8548                           
  8549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8550                           ; Switch size 1, requested type "simple"
  8551                           ; Number of cases is 1, Range of values is 0 to 0
  8552                           ; switch strategies available:
  8553                           ; Name         Instructions Cycles
  8554                           ; simple_byte            4     3 (average)
  8555                           ; direct_byte           11     8 (fixed)
  8556                           ; jumptable            260     6 (fixed)
  8557                           ;	Chosen strategy is simple_byte
  8558  152E  0821               	movf	??_T0_counter_mode_state+1,w
  8559  152F  3A00               	xorlw	0	; case 0
  8560  1530  1903               	skipnz
  8561  1531  2D33               	goto	l3959
  8562  1532  2D3B               	goto	l215
  8563  1533                     l3959:	
  8564                           
  8565                           ; Switch size 1, requested type "simple"
  8566                           ; Number of cases is 2, Range of values is 0 to 1
  8567                           ; switch strategies available:
  8568                           ; Name         Instructions Cycles
  8569                           ; simple_byte            7     4 (average)
  8570                           ; direct_byte           14     8 (fixed)
  8571                           ; jumptable            260     6 (fixed)
  8572                           ;	Chosen strategy is simple_byte
  8573  1533  0820               	movf	??_T0_counter_mode_state,w
  8574  1534  3A00               	xorlw	0	; case 0
  8575  1535  1903               	skipnz
  8576  1536  2D23               	goto	l211
  8577  1537  3A01               	xorlw	1	; case 1
  8578  1538  1903               	skipnz
  8579  1539  2D27               	goto	l213
  8580  153A  2D3B               	goto	l215
  8581  153B                     l215:	
  8582  153B  0008               	return
  8583  153C                     __end_of_T0_counter_mode_state:	
  8584                           
  8585                           	psect	text50
  8586  15F5                     __ptext50:	
  8587 ;; *************** function _MO_init *****************
  8588 ;; Defined at:
  8589 ;;		line 53 in file "MOTOR.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;		None
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;		None
  8594 ;; Return value:  Size  Location     Type
  8595 ;;                  1    wreg      void 
  8596 ;; Registers used:
  8597 ;;		wreg, status,2
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8603 ;;      Params:         0       0       0       0       0
  8604 ;;      Locals:         0       0       0       0       0
  8605 ;;      Temps:          0       1       0       0       0
  8606 ;;      Totals:         0       1       0       0       0
  8607 ;;Total ram usage:        1 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; Hardware stack levels required when called:    3
  8610 ;; This function calls:
  8611 ;;		Nothing
  8612 ;; This function is called by:
  8613 ;;		_main
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           
  8618                           ;psect for function _MO_init
  8619  15F5                     _MO_init:	
  8620                           
  8621                           ;MOTOR.c: 57:     ((((((*((volatile tRegister *)(0x87))).Reg))) = (((((*((volatile tRegi
      +                          ster *)(0x87))).Reg)) & (~(1 << ((2))))) | (((0)) << ((2))))));
  8622                           
  8623                           ;incstack = 0
  8624                           ; Regs used in _MO_init: [wreg+status,2]
  8625  15F5  1683               	bsf	3,5	;RP0=1, select bank1
  8626  15F6  1303               	bcf	3,6	;RP1=0, select bank1
  8627  15F7  0807               	movf	7,w	;volatile
  8628  15F8  39FB               	andlw	251
  8629  15F9  1283               	bcf	3,5	;RP0=0, select bank0
  8630  15FA  1303               	bcf	3,6	;RP1=0, select bank0
  8631  15FB  00A0               	movwf	??_MO_init
  8632  15FC  0820               	movf	??_MO_init,w
  8633  15FD  1683               	bsf	3,5	;RP0=1, select bank1
  8634  15FE  1303               	bcf	3,6	;RP1=0, select bank1
  8635  15FF  0087               	movwf	7	;volatile
  8636                           
  8637                           ;MOTOR.c: 59:     ((((((*((volatile tRegister *)(0x07))).Reg))) = (((((*((volatile tRegi
      +                          ster *)(0x07))).Reg)) & (~(1 << ((2))))) | ((0) << ((2))))));
  8638  1600  1283               	bcf	3,5	;RP0=0, select bank0
  8639  1601  1303               	bcf	3,6	;RP1=0, select bank0
  8640  1602  0807               	movf	7,w	;volatile
  8641  1603  39FB               	andlw	251
  8642  1604  00A0               	movwf	??_MO_init
  8643  1605  0820               	movf	??_MO_init,w
  8644  1606  0087               	movwf	7	;volatile
  8645                           
  8646                           ;MOTOR.c: 63:     MO_targetAngel = MO_AngelVal[(3)];
  8647  1607  1683               	bsf	3,5	;RP0=1, select bank1
  8648  1608  1303               	bcf	3,6	;RP1=0, select bank1
  8649  1609  083B               	movf	((_MO_AngelVal+1)^(0+128)+6),w
  8650  160A  00CF               	movwf	(_MO_targetAngel+1)^(0+128)
  8651  160B  083A               	movf	(_MO_AngelVal^(0+128)+6),w
  8652  160C  00CE               	movwf	_MO_targetAngel^(0+128)
  8653                           
  8654                           ;MOTOR.c: 64:     MO_currentAngel = MO_AngelVal[(3)];
  8655  160D  083B               	movf	((_MO_AngelVal+1)^(0+128)+6),w
  8656  160E  00D1               	movwf	(_MO_currentAngel+1)^(0+128)
  8657  160F  083A               	movf	(_MO_AngelVal^(0+128)+6),w
  8658  1610  00D0               	movwf	_MO_currentAngel^(0+128)
  8659                           
  8660                           ;MOTOR.c: 68:     MO_isStable = (1);
  8661  1611  01FA               	clrf	_MO_isStable
  8662  1612  0AFA               	incf	_MO_isStable,f
  8663                           
  8664                           ;MOTOR.c: 74:     MO_SingleAngelTime = 55;
  8665  1613  3037               	movlw	55
  8666  1614  00CC               	movwf	_MO_SingleAngelTime^(0+128)
  8667  1615  3000               	movlw	0
  8668  1616  00CD               	movwf	(_MO_SingleAngelTime^(0+128)+1)
  8669  1617  0008               	return
  8670  1618                     __end_of_MO_init:	
  8671                           
  8672                           	psect	text51
  8673  13B1                     __ptext51:	
  8674 ;; *************** function _INDICATOR_init *****************
  8675 ;; Defined at:
  8676 ;;		line 66 in file "MAIN_VACCUM.c"
  8677 ;; Parameters:    Size  Location     Type
  8678 ;;		None
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;		None
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  1    wreg      void 
  8683 ;; Registers used:
  8684 ;;		wreg, status,2
  8685 ;; Tracked objects:
  8686 ;;		On entry : 0/0
  8687 ;;		On exit  : 0/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8690 ;;      Params:         0       0       0       0       0
  8691 ;;      Locals:         0       0       0       0       0
  8692 ;;      Temps:          0       1       0       0       0
  8693 ;;      Totals:         0       1       0       0       0
  8694 ;;Total ram usage:        1 bytes
  8695 ;; Hardware stack levels used:    1
  8696 ;; Hardware stack levels required when called:    3
  8697 ;; This function calls:
  8698 ;;		Nothing
  8699 ;; This function is called by:
  8700 ;;		_main
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           
  8705                           ;psect for function _INDICATOR_init
  8706  13B1                     _INDICATOR_init:	
  8707                           
  8708                           ;MAIN_VACCUM.c: 70:     ((((((*((volatile tRegister *)(0x87))).Reg))) = (((((*((volatile
      +                           tRegister *)(0x87))).Reg)) & (~(1 << ((1))))) | (((0)) << ((1))))));
  8709                           
  8710                           ;incstack = 0
  8711                           ; Regs used in _INDICATOR_init: [wreg+status,2]
  8712  13B1  1683               	bsf	3,5	;RP0=1, select bank1
  8713  13B2  1303               	bcf	3,6	;RP1=0, select bank1
  8714  13B3  0807               	movf	7,w	;volatile
  8715  13B4  39FD               	andlw	253
  8716  13B5  1283               	bcf	3,5	;RP0=0, select bank0
  8717  13B6  1303               	bcf	3,6	;RP1=0, select bank0
  8718  13B7  00A0               	movwf	??_INDICATOR_init
  8719  13B8  0820               	movf	??_INDICATOR_init,w
  8720  13B9  1683               	bsf	3,5	;RP0=1, select bank1
  8721  13BA  1303               	bcf	3,6	;RP1=0, select bank1
  8722  13BB  0087               	movwf	7	;volatile
  8723                           
  8724                           ;MAIN_VACCUM.c: 71:     ((((((*((volatile tRegister *)(0x07))).Reg))) = (((((*((volatile
      +                           tRegister *)(0x07))).Reg)) & (~(1 << ((1))))) | ((0) << ((1))))));
  8725  13BC  1283               	bcf	3,5	;RP0=0, select bank0
  8726  13BD  1303               	bcf	3,6	;RP1=0, select bank0
  8727  13BE  0807               	movf	7,w	;volatile
  8728  13BF  39FD               	andlw	253
  8729  13C0  00A0               	movwf	??_INDICATOR_init
  8730  13C1  0820               	movf	??_INDICATOR_init,w
  8731  13C2  0087               	movwf	7	;volatile
  8732  13C3  0008               	return
  8733  13C4                     __end_of_INDICATOR_init:	
  8734                           
  8735                           	psect	text52
  8736  146E                     __ptext52:	
  8737 ;; *************** function _DSP_init *****************
  8738 ;; Defined at:
  8739 ;;		line 30 in file "DISPLAY.c"
  8740 ;; Parameters:    Size  Location     Type
  8741 ;;		None
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;		None
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8753 ;;      Params:         0       0       0       0       0
  8754 ;;      Locals:         0       0       0       0       0
  8755 ;;      Temps:          0       0       0       0       0
  8756 ;;      Totals:         0       0       0       0       0
  8757 ;;Total ram usage:        0 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    6
  8760 ;; This function calls:
  8761 ;;		_LED_init
  8762 ;;		_SSD_init
  8763 ;; This function is called by:
  8764 ;;		_main
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           
  8769                           ;psect for function _DSP_init
  8770  146E                     _DSP_init:	
  8771                           
  8772                           ;DISPLAY.c: 34:     SSD_init(SSD_LOW);
  8773                           
  8774                           ;incstack = 0
  8775                           ; Regs used in _DSP_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8776  146E  3000               	movlw	0
  8777  146F  120A  118A  2668  160A  118A  	fcall	_SSD_init
  8778                           
  8779                           ;DISPLAY.c: 35:     SSD_init(SSD_MID);
  8780  1474  3001               	movlw	1
  8781  1475  120A  118A  2668  160A  118A  	fcall	_SSD_init
  8782                           
  8783                           ;DISPLAY.c: 36:     SSD_init(SSD_HIGH);
  8784  147A  3002               	movlw	2
  8785  147B  120A  118A  2668  160A  118A  	fcall	_SSD_init
  8786                           
  8787                           ;DISPLAY.c: 40:     LED_init(LED_DUST);
  8788  1480  3000               	movlw	0
  8789  1481  120A  158A  23BF   	fcall	_LED_init
  8790  1484  0008               	return
  8791  1485                     __end_of_DSP_init:	
  8792                           
  8793                           	psect	text53
  8794  0668                     __ptext53:	
  8795 ;; *************** function _SSD_init *****************
  8796 ;; Defined at:
  8797 ;;		line 43 in file "SSD.c"
  8798 ;; Parameters:    Size  Location     Type
  8799 ;;  ssd             1    wreg     enum E881
  8800 ;; Auto vars:     Size  Location     Type
  8801 ;;  ssd             1   51[BANK0 ] enum E881
  8802 ;; Return value:  Size  Location     Type
  8803 ;;                  1    wreg      void 
  8804 ;; Registers used:
  8805 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8806 ;; Tracked objects:
  8807 ;;		On entry : 0/0
  8808 ;;		On exit  : 0/0
  8809 ;;		Unchanged: 0/0
  8810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8811 ;;      Params:         0       0       0       0       0
  8812 ;;      Locals:         0       3       0       0       0
  8813 ;;      Temps:          0      12       0       0       0
  8814 ;;      Totals:         0      15       0       0       0
  8815 ;;Total ram usage:       15 bytes
  8816 ;; Hardware stack levels used:    1
  8817 ;; Hardware stack levels required when called:    5
  8818 ;; This function calls:
  8819 ;;		_SSD_display
  8820 ;;		_SSD_schematic_init
  8821 ;;		___bmul
  8822 ;; This function is called by:
  8823 ;;		_DSP_init
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function _SSD_init
  8829  0668                     _SSD_init:	
  8830                           
  8831                           ;incstack = 0
  8832                           ; Regs used in _SSD_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8833                           ;SSD_init@ssd stored from wreg
  8834  0668  1283               	bcf	3,5	;RP0=0, select bank0
  8835  0669  1303               	bcf	3,6	;RP1=0, select bank0
  8836  066A  00D3               	movwf	SSD_init@ssd
  8837                           
  8838                           ;SSD.c: 47:     ((*(ssd_data[ssd].data_direction_reg)) = ((((0))) ? (~(0)) : ((0))));
  8839  066B  120A  158A  2534  120A  118A  	fcall	_SSD_schematic_init
  8840  0670  300B               	movlw	11
  8841  0671  1283               	bcf	3,5	;RP0=0, select bank0
  8842  0672  1303               	bcf	3,6	;RP1=0, select bank0
  8843  0673  00C5               	movwf	??_SSD_init
  8844  0674  0845               	movf	??_SSD_init,w
  8845  0675  00A0               	movwf	___bmul@multiplicand
  8846  0676  0853               	movf	SSD_init@ssd,w
  8847  0677  160A  118A  239E  120A  118A  	fcall	___bmul
  8848  067C  3EB1               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  8849  067D  0084               	movwf	4
  8850  067E  1783               	bsf	3,7	;select IRP bank3
  8851  067F  0800               	movf	0,w
  8852  0680  1283               	bcf	3,5	;RP0=0, select bank0
  8853  0681  1303               	bcf	3,6	;RP1=0, select bank0
  8854  0682  00C6               	movwf	??_SSD_init+1
  8855  0683  0A84               	incf	4,f
  8856  0684  0800               	movf	0,w
  8857  0685  00C7               	movwf	??_SSD_init+2
  8858  0686  0846               	movf	??_SSD_init+1,w
  8859  0687  0084               	movwf	4
  8860  0688  1783               	bsf	3,7
  8861  0689  1C47               	btfss	??_SSD_init+2,0
  8862  068A  1383               	bcf	3,7
  8863  068B  0180               	clrf	0
  8864                           
  8865                           ;SSD.c: 50:     SSD_display(ssd , 0x00);
  8866  068C  01A4               	clrf	SSD_display@data
  8867  068D  0853               	movf	SSD_init@ssd,w
  8868  068E  160A  118A  2576  120A  118A  	fcall	_SSD_display
  8869                           
  8870                           ;SSD.c: 53:     ((*(ssd_data[ssd].ctrl_direction_reg)) = ((*(ssd_data[ssd].ctrl_directio
      +                          n_reg) & (~(1 << ssd_data[ssd].ctrl_pin))) | (((0)) << ssd_data[ssd].ctrl_pin)));
  8871  0693  3000               	movlw	0
  8872  0694  1283               	bcf	3,5	;RP0=0, select bank0
  8873  0695  1303               	bcf	3,6	;RP1=0, select bank0
  8874  0696  00C5               	movwf	??_SSD_init
  8875  0697  300B               	movlw	11
  8876  0698  00C6               	movwf	??_SSD_init+1
  8877  0699  0846               	movf	??_SSD_init+1,w
  8878  069A  00A0               	movwf	___bmul@multiplicand
  8879  069B  0853               	movf	SSD_init@ssd,w
  8880  069C  160A  118A  239E  120A  118A  	fcall	___bmul
  8881  06A1  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  8882  06A2  0084               	movwf	4
  8883  06A3  1783               	bsf	3,7	;select IRP bank3
  8884  06A4  0A00               	incf	0,w
  8885  06A5  1283               	bcf	3,5	;RP0=0, select bank0
  8886  06A6  1303               	bcf	3,6	;RP1=0, select bank0
  8887  06A7  2EAA               	goto	u3724
  8888  06A8                     u3725:	
  8889  06A8  1003               	clrc
  8890  06A9  0DC5               	rlf	??_SSD_init,f
  8891  06AA                     u3724:	
  8892  06AA  3EFF               	addlw	-1
  8893  06AB  1D03               	skipz
  8894  06AC  2EA8               	goto	u3725
  8895  06AD  300B               	movlw	11
  8896  06AE  00C7               	movwf	??_SSD_init+2
  8897  06AF  0847               	movf	??_SSD_init+2,w
  8898  06B0  00A0               	movwf	___bmul@multiplicand
  8899  06B1  0853               	movf	SSD_init@ssd,w
  8900  06B2  160A  118A  239E  120A  118A  	fcall	___bmul
  8901  06B7  3EB5               	addlw	(low ((_ssd_data| (0+256)+4)))& (0+255)
  8902  06B8  0084               	movwf	4
  8903  06B9  1783               	bsf	3,7	;select IRP bank3
  8904  06BA  0800               	movf	0,w
  8905  06BB  1283               	bcf	3,5	;RP0=0, select bank0
  8906  06BC  1303               	bcf	3,6	;RP1=0, select bank0
  8907  06BD  00C8               	movwf	??_SSD_init+3
  8908  06BE  0A84               	incf	4,f
  8909  06BF  0800               	movf	0,w
  8910  06C0  00C9               	movwf	??_SSD_init+4
  8911  06C1  0848               	movf	??_SSD_init+3,w
  8912  06C2  0084               	movwf	4
  8913  06C3  1783               	bsf	3,7
  8914  06C4  1C49               	btfss	??_SSD_init+4,0
  8915  06C5  1383               	bcf	3,7
  8916  06C6  0800               	movf	0,w
  8917  06C7  00CA               	movwf	??_SSD_init+5
  8918  06C8  3001               	movlw	1
  8919  06C9  00CB               	movwf	??_SSD_init+6
  8920  06CA  300B               	movlw	11
  8921  06CB  00CC               	movwf	??_SSD_init+7
  8922  06CC  084C               	movf	??_SSD_init+7,w
  8923  06CD  00A0               	movwf	___bmul@multiplicand
  8924  06CE  0853               	movf	SSD_init@ssd,w
  8925  06CF  160A  118A  239E  120A  118A  	fcall	___bmul
  8926  06D4  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  8927  06D5  0084               	movwf	4
  8928  06D6  1783               	bsf	3,7	;select IRP bank3
  8929  06D7  0A00               	incf	0,w
  8930  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  8931  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  8932  06DA  2EDD               	goto	u3734
  8933  06DB                     u3735:	
  8934  06DB  1003               	clrc
  8935  06DC  0DCB               	rlf	??_SSD_init+6,f
  8936  06DD                     u3734:	
  8937  06DD  3EFF               	addlw	-1
  8938  06DE  1D03               	skipz
  8939  06DF  2EDB               	goto	u3735
  8940  06E0  084B               	movf	??_SSD_init+6,w
  8941  06E1  3AFF               	xorlw	255
  8942  06E2  054A               	andwf	??_SSD_init+5,w
  8943  06E3  0445               	iorwf	??_SSD_init,w
  8944  06E4  00CD               	movwf	??_SSD_init+8
  8945  06E5  300B               	movlw	11
  8946  06E6  00CE               	movwf	??_SSD_init+9
  8947  06E7  084E               	movf	??_SSD_init+9,w
  8948  06E8  00A0               	movwf	___bmul@multiplicand
  8949  06E9  0853               	movf	SSD_init@ssd,w
  8950  06EA  160A  118A  239E  120A  118A  	fcall	___bmul
  8951  06EF  3EB5               	addlw	(low ((_ssd_data| (0+256)+4)))& (0+255)
  8952  06F0  0084               	movwf	4
  8953  06F1  1783               	bsf	3,7	;select IRP bank3
  8954  06F2  0800               	movf	0,w
  8955  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  8956  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  8957  06F5  00CF               	movwf	??_SSD_init+10
  8958  06F6  0A84               	incf	4,f
  8959  06F7  0800               	movf	0,w
  8960  06F8  00D0               	movwf	??_SSD_init+11
  8961  06F9  084F               	movf	??_SSD_init+10,w
  8962  06FA  0084               	movwf	4
  8963  06FB  1783               	bsf	3,7
  8964  06FC  1C50               	btfss	??_SSD_init+11,0
  8965  06FD  1383               	bcf	3,7
  8966  06FE  084D               	movf	??_SSD_init+8,w
  8967  06FF  0080               	movwf	0
  8968                           
  8969                           ;SSD.c: 54:     (((*(ssd_data[ssd].ctrl_value_reg)) = ((*(ssd_data[ssd].ctrl_value_reg) 
      +                          & (~(1 << ssd_data[ssd].ctrl_pin))) | (((0)) << ssd_data[ssd].ctrl_pin))));
  8970  0700  3000               	movlw	0
  8971  0701  00C5               	movwf	??_SSD_init
  8972  0702  300B               	movlw	11
  8973  0703  00C6               	movwf	??_SSD_init+1
  8974  0704  0846               	movf	??_SSD_init+1,w
  8975  0705  00A0               	movwf	___bmul@multiplicand
  8976  0706  0853               	movf	SSD_init@ssd,w
  8977  0707  160A  118A  239E  120A  118A  	fcall	___bmul
  8978  070C  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  8979  070D  0084               	movwf	4
  8980  070E  1783               	bsf	3,7	;select IRP bank3
  8981  070F  0A00               	incf	0,w
  8982  0710  1283               	bcf	3,5	;RP0=0, select bank0
  8983  0711  1303               	bcf	3,6	;RP1=0, select bank0
  8984  0712  2F15               	goto	u3744
  8985  0713                     u3745:	
  8986  0713  1003               	clrc
  8987  0714  0DC5               	rlf	??_SSD_init,f
  8988  0715                     u3744:	
  8989  0715  3EFF               	addlw	-1
  8990  0716  1D03               	skipz
  8991  0717  2F13               	goto	u3745
  8992  0718  300B               	movlw	11
  8993  0719  00C7               	movwf	??_SSD_init+2
  8994  071A  0847               	movf	??_SSD_init+2,w
  8995  071B  00A0               	movwf	___bmul@multiplicand
  8996  071C  0853               	movf	SSD_init@ssd,w
  8997  071D  160A  118A  239E  120A  118A  	fcall	___bmul
  8998  0722  3EB7               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  8999  0723  0084               	movwf	4
  9000  0724  1783               	bsf	3,7	;select IRP bank3
  9001  0725  0800               	movf	0,w
  9002  0726  1283               	bcf	3,5	;RP0=0, select bank0
  9003  0727  1303               	bcf	3,6	;RP1=0, select bank0
  9004  0728  00C8               	movwf	??_SSD_init+3
  9005  0729  0A84               	incf	4,f
  9006  072A  0800               	movf	0,w
  9007  072B  00C9               	movwf	??_SSD_init+4
  9008  072C  0848               	movf	??_SSD_init+3,w
  9009  072D  0084               	movwf	4
  9010  072E  1783               	bsf	3,7
  9011  072F  1C49               	btfss	??_SSD_init+4,0
  9012  0730  1383               	bcf	3,7
  9013  0731  0800               	movf	0,w
  9014  0732  00CA               	movwf	??_SSD_init+5
  9015  0733  3001               	movlw	1
  9016  0734  00CB               	movwf	??_SSD_init+6
  9017  0735  300B               	movlw	11
  9018  0736  00CC               	movwf	??_SSD_init+7
  9019  0737  084C               	movf	??_SSD_init+7,w
  9020  0738  00A0               	movwf	___bmul@multiplicand
  9021  0739  0853               	movf	SSD_init@ssd,w
  9022  073A  160A  118A  239E  120A  118A  	fcall	___bmul
  9023  073F  3EB9               	addlw	(low ((_ssd_data| (0+256)+8)))& (0+255)
  9024  0740  0084               	movwf	4
  9025  0741  1783               	bsf	3,7	;select IRP bank3
  9026  0742  0A00               	incf	0,w
  9027  0743  1283               	bcf	3,5	;RP0=0, select bank0
  9028  0744  1303               	bcf	3,6	;RP1=0, select bank0
  9029  0745  2F48               	goto	u3754
  9030  0746                     u3755:	
  9031  0746  1003               	clrc
  9032  0747  0DCB               	rlf	??_SSD_init+6,f
  9033  0748                     u3754:	
  9034  0748  3EFF               	addlw	-1
  9035  0749  1D03               	skipz
  9036  074A  2F46               	goto	u3755
  9037  074B  084B               	movf	??_SSD_init+6,w
  9038  074C  3AFF               	xorlw	255
  9039  074D  054A               	andwf	??_SSD_init+5,w
  9040  074E  0445               	iorwf	??_SSD_init,w
  9041  074F  00CD               	movwf	??_SSD_init+8
  9042  0750  300B               	movlw	11
  9043  0751  00CE               	movwf	??_SSD_init+9
  9044  0752  084E               	movf	??_SSD_init+9,w
  9045  0753  00A0               	movwf	___bmul@multiplicand
  9046  0754  0853               	movf	SSD_init@ssd,w
  9047  0755  160A  118A  239E   	fcall	___bmul
  9048  0758  3EB7               	addlw	(low ((_ssd_data| (0+256)+6)))& (0+255)
  9049  0759  0084               	movwf	4
  9050  075A  1783               	bsf	3,7	;select IRP bank3
  9051  075B  0800               	movf	0,w
  9052  075C  1283               	bcf	3,5	;RP0=0, select bank0
  9053  075D  1303               	bcf	3,6	;RP1=0, select bank0
  9054  075E  00CF               	movwf	??_SSD_init+10
  9055  075F  0A84               	incf	4,f
  9056  0760  0800               	movf	0,w
  9057  0761  00D0               	movwf	??_SSD_init+11
  9058  0762  084F               	movf	??_SSD_init+10,w
  9059  0763  0084               	movwf	4
  9060  0764  1783               	bsf	3,7
  9061  0765  1C50               	btfss	??_SSD_init+11,0
  9062  0766  1383               	bcf	3,7
  9063  0767  084D               	movf	??_SSD_init+8,w
  9064  0768  0080               	movwf	0
  9065  0769  0008               	return
  9066  076A                     __end_of_SSD_init:	
  9067                           
  9068                           	psect	text54
  9069  0D34                     __ptext54:	
  9070 ;; *************** function _SSD_schematic_init *****************
  9071 ;; Defined at:
  9072 ;;		line 104 in file "SSD.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;		None
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;  936            11   26[BANK0 ] struct .
  9077 ;;  934            11   15[BANK0 ] struct .
  9078 ;;  932            11    4[BANK0 ] struct .
  9079 ;; Return value:  Size  Location     Type
  9080 ;;                  1    wreg      void 
  9081 ;; Registers used:
  9082 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9083 ;; Tracked objects:
  9084 ;;		On entry : 0/0
  9085 ;;		On exit  : 0/0
  9086 ;;		Unchanged: 0/0
  9087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9088 ;;      Params:         0       0       0       0       0
  9089 ;;      Locals:         0      33       0       0       0
  9090 ;;      Temps:          0       4       0       0       0
  9091 ;;      Totals:         0      37       0       0       0
  9092 ;;Total ram usage:       37 bytes
  9093 ;; Hardware stack levels used:    1
  9094 ;; Hardware stack levels required when called:    3
  9095 ;; This function calls:
  9096 ;;		Nothing
  9097 ;; This function is called by:
  9098 ;;		_SSD_init
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           
  9103                           ;psect for function _SSD_schematic_init
  9104  0D34                     _SSD_schematic_init:	
  9105                           
  9106                           ;SSD.c: 107:      ssd_data[0] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((6)),0x00,SSD_NULL};;SSD.c: 108:      ssd_data[
      +                          1] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&(((*((volatile tRegister *)
      +                          (0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&(((*((volatile tRegister *)(0
      +                          x06))).Reg)),((5)),0x00,SSD_NULL};;SSD.c: 109:      ssd_data[2] = (tSSD_INFO){&(((*((vol
      +                          atile tRegister *)(0x88))).Reg)),&(((*((volatile tRegister *)(0x08))).Reg)),&(((*((volat
      +                          ile tRegister *)(0x86))).Reg)),&(((*((volatile tRegister *)(0x06))).Reg)),((4)),0x00,SSD
      +                          _NULL};
  9107                           
  9108                           ;incstack = 0
  9109                           ; Regs used in _SSD_schematic_init: [wreg-fsr0h+status,2+status,0]
  9110  0D34  3024               	movlw	SSD_schematic_init@932& (0+255)
  9111  0D35  0084               	movwf	4
  9112  0D36  30A0               	movlw	low SSD_schematic_init@F931
  9113  0D37  1283               	bcf	3,5	;RP0=0, select bank0
  9114  0D38  1303               	bcf	3,6	;RP1=0, select bank0
  9115  0D39  00A0               	movwf	??_SSD_schematic_init
  9116  0D3A  0804               	movf	4,w
  9117  0D3B  00A1               	movwf	??_SSD_schematic_init+1
  9118  0D3C  300B               	movlw	11
  9119  0D3D  00A2               	movwf	??_SSD_schematic_init+2
  9120  0D3E                     u2810:	
  9121  0D3E  0820               	movf	??_SSD_schematic_init,w
  9122  0D3F  0084               	movwf	4
  9123  0D40  1383               	bcf	3,7	;select IRP bank1
  9124  0D41  0800               	movf	0,w
  9125  0D42  00A3               	movwf	??_SSD_schematic_init+3
  9126  0D43  0AA0               	incf	??_SSD_schematic_init,f
  9127  0D44  0821               	movf	??_SSD_schematic_init+1,w
  9128  0D45  0084               	movwf	4
  9129  0D46  0823               	movf	??_SSD_schematic_init+3,w
  9130  0D47  0080               	movwf	0
  9131  0D48  0AA1               	incf	??_SSD_schematic_init+1,f
  9132  0D49  0BA2               	decfsz	??_SSD_schematic_init+2,f
  9133  0D4A  2D3E               	goto	u2810
  9134  0D4B  30B1               	movlw	_ssd_data& (0+255)
  9135  0D4C  0084               	movwf	4
  9136  0D4D  3024               	movlw	low SSD_schematic_init@932
  9137  0D4E  00A0               	movwf	??_SSD_schematic_init
  9138  0D4F  0804               	movf	4,w
  9139  0D50  00A1               	movwf	??_SSD_schematic_init+1
  9140  0D51  300B               	movlw	11
  9141  0D52  00A2               	movwf	??_SSD_schematic_init+2
  9142  0D53                     u2820:	
  9143  0D53  0820               	movf	??_SSD_schematic_init,w
  9144  0D54  0084               	movwf	4
  9145  0D55  1383               	bcf	3,7	;select IRP bank0
  9146  0D56  0800               	movf	0,w
  9147  0D57  00A3               	movwf	??_SSD_schematic_init+3
  9148  0D58  0AA0               	incf	??_SSD_schematic_init,f
  9149  0D59  0821               	movf	??_SSD_schematic_init+1,w
  9150  0D5A  0084               	movwf	4
  9151  0D5B  1783               	bsf	3,7	;select IRP bank3
  9152  0D5C  0823               	movf	??_SSD_schematic_init+3,w
  9153  0D5D  0080               	movwf	0
  9154  0D5E  0AA1               	incf	??_SSD_schematic_init+1,f
  9155  0D5F  0BA2               	decfsz	??_SSD_schematic_init+2,f
  9156  0D60  2D53               	goto	u2820
  9157                           
  9158                           ;SSD.c: 108:      ssd_data[1] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((5)),0x00,SSD_NULL};
  9159  0D61  302F               	movlw	SSD_schematic_init@934& (0+255)
  9160  0D62  0084               	movwf	4
  9161  0D63  30DD               	movlw	low SSD_schematic_init@F933
  9162  0D64  00A0               	movwf	??_SSD_schematic_init
  9163  0D65  0804               	movf	4,w
  9164  0D66  00A1               	movwf	??_SSD_schematic_init+1
  9165  0D67  300B               	movlw	11
  9166  0D68  00A2               	movwf	??_SSD_schematic_init+2
  9167  0D69                     u2830:	
  9168  0D69  0820               	movf	??_SSD_schematic_init,w
  9169  0D6A  0084               	movwf	4
  9170  0D6B  1783               	bsf	3,7	;select IRP bank3
  9171  0D6C  0800               	movf	0,w
  9172  0D6D  00A3               	movwf	??_SSD_schematic_init+3
  9173  0D6E  0AA0               	incf	??_SSD_schematic_init,f
  9174  0D6F  0821               	movf	??_SSD_schematic_init+1,w
  9175  0D70  0084               	movwf	4
  9176  0D71  1383               	bcf	3,7	;select IRP bank0
  9177  0D72  0823               	movf	??_SSD_schematic_init+3,w
  9178  0D73  0080               	movwf	0
  9179  0D74  0AA1               	incf	??_SSD_schematic_init+1,f
  9180  0D75  0BA2               	decfsz	??_SSD_schematic_init+2,f
  9181  0D76  2D69               	goto	u2830
  9182  0D77  300B               	movlw	11
  9183  0D78  3EB1               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  9184  0D79  0084               	movwf	4
  9185  0D7A  302F               	movlw	low SSD_schematic_init@934
  9186  0D7B  00A0               	movwf	??_SSD_schematic_init
  9187  0D7C  0804               	movf	4,w
  9188  0D7D  00A1               	movwf	??_SSD_schematic_init+1
  9189  0D7E  300B               	movlw	11
  9190  0D7F  00A2               	movwf	??_SSD_schematic_init+2
  9191  0D80                     u2840:	
  9192  0D80  0820               	movf	??_SSD_schematic_init,w
  9193  0D81  0084               	movwf	4
  9194  0D82  1383               	bcf	3,7	;select IRP bank0
  9195  0D83  0800               	movf	0,w
  9196  0D84  00A3               	movwf	??_SSD_schematic_init+3
  9197  0D85  0AA0               	incf	??_SSD_schematic_init,f
  9198  0D86  0821               	movf	??_SSD_schematic_init+1,w
  9199  0D87  0084               	movwf	4
  9200  0D88  0823               	movf	??_SSD_schematic_init+3,w
  9201  0D89  1783               	bsf	3,7	;select IRP bank3
  9202  0D8A  0080               	movwf	0
  9203  0D8B  0AA1               	incf	??_SSD_schematic_init+1,f
  9204  0D8C  0BA2               	decfsz	??_SSD_schematic_init+2,f
  9205  0D8D  2D80               	goto	u2840
  9206                           
  9207                           ;SSD.c: 109:      ssd_data[2] = (tSSD_INFO){&(((*((volatile tRegister *)(0x88))).Reg)),&
      +                          (((*((volatile tRegister *)(0x08))).Reg)),&(((*((volatile tRegister *)(0x86))).Reg)),&((
      +                          (*((volatile tRegister *)(0x06))).Reg)),((4)),0x00,SSD_NULL};
  9208  0D8E  303A               	movlw	SSD_schematic_init@936& (0+255)
  9209  0D8F  0084               	movwf	4
  9210  0D90  30D2               	movlw	low SSD_schematic_init@F935
  9211  0D91  00A0               	movwf	??_SSD_schematic_init
  9212  0D92  0804               	movf	4,w
  9213  0D93  00A1               	movwf	??_SSD_schematic_init+1
  9214  0D94  300B               	movlw	11
  9215  0D95  00A2               	movwf	??_SSD_schematic_init+2
  9216  0D96                     u2850:	
  9217  0D96  0820               	movf	??_SSD_schematic_init,w
  9218  0D97  0084               	movwf	4
  9219  0D98  1783               	bsf	3,7	;select IRP bank3
  9220  0D99  0800               	movf	0,w
  9221  0D9A  00A3               	movwf	??_SSD_schematic_init+3
  9222  0D9B  0AA0               	incf	??_SSD_schematic_init,f
  9223  0D9C  0821               	movf	??_SSD_schematic_init+1,w
  9224  0D9D  0084               	movwf	4
  9225  0D9E  1383               	bcf	3,7	;select IRP bank0
  9226  0D9F  0823               	movf	??_SSD_schematic_init+3,w
  9227  0DA0  0080               	movwf	0
  9228  0DA1  0AA1               	incf	??_SSD_schematic_init+1,f
  9229  0DA2  0BA2               	decfsz	??_SSD_schematic_init+2,f
  9230  0DA3  2D96               	goto	u2850
  9231  0DA4  3016               	movlw	22
  9232  0DA5  3EB1               	addlw	(low (_ssd_data| (0+256)))& (0+255)
  9233  0DA6  0084               	movwf	4
  9234  0DA7  303A               	movlw	low SSD_schematic_init@936
  9235  0DA8  00A0               	movwf	??_SSD_schematic_init
  9236  0DA9  0804               	movf	4,w
  9237  0DAA  00A1               	movwf	??_SSD_schematic_init+1
  9238  0DAB  300B               	movlw	11
  9239  0DAC  00A2               	movwf	??_SSD_schematic_init+2
  9240  0DAD                     u2860:	
  9241  0DAD  0820               	movf	??_SSD_schematic_init,w
  9242  0DAE  0084               	movwf	4
  9243  0DAF  1383               	bcf	3,7	;select IRP bank0
  9244  0DB0  0800               	movf	0,w
  9245  0DB1  00A3               	movwf	??_SSD_schematic_init+3
  9246  0DB2  0AA0               	incf	??_SSD_schematic_init,f
  9247  0DB3  0821               	movf	??_SSD_schematic_init+1,w
  9248  0DB4  0084               	movwf	4
  9249  0DB5  0823               	movf	??_SSD_schematic_init+3,w
  9250  0DB6  1783               	bsf	3,7	;select IRP bank3
  9251  0DB7  0080               	movwf	0
  9252  0DB8  0AA1               	incf	??_SSD_schematic_init+1,f
  9253  0DB9  0BA2               	decfsz	??_SSD_schematic_init+2,f
  9254  0DBA  2DAD               	goto	u2860
  9255  0DBB  0008               	return
  9256  0DBC                     __end_of_SSD_schematic_init:	
  9257                           
  9258                           	psect	text55
  9259  1576                     __ptext55:	
  9260 ;; *************** function _SSD_display *****************
  9261 ;; Defined at:
  9262 ;;		line 115 in file "SSD.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  ssd             1    wreg     enum E881
  9265 ;;  data            1    4[BANK0 ] unsigned char 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  ssd             1    9[BANK0 ] enum E881
  9268 ;; Return value:  Size  Location     Type
  9269 ;;                  1    wreg      void 
  9270 ;; Registers used:
  9271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9277 ;;      Params:         0       1       0       0       0
  9278 ;;      Locals:         0       1       0       0       0
  9279 ;;      Temps:          0       4       0       0       0
  9280 ;;      Totals:         0       6       0       0       0
  9281 ;;Total ram usage:        6 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; Hardware stack levels required when called:    4
  9284 ;; This function calls:
  9285 ;;		___bmul
  9286 ;; This function is called by:
  9287 ;;		_SSD_init
  9288 ;;		_SSD_update
  9289 ;; This function uses a non-reentrant model
  9290 ;;
  9291                           
  9292                           
  9293                           ;psect for function _SSD_display
  9294  1576                     _SSD_display:	
  9295                           
  9296                           ;incstack = 0
  9297                           ; Regs used in _SSD_display: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9298                           ;SSD_display@ssd stored from wreg
  9299  1576  1283               	bcf	3,5	;RP0=0, select bank0
  9300  1577  1303               	bcf	3,6	;RP1=0, select bank0
  9301  1578  00A9               	movwf	SSD_display@ssd
  9302                           
  9303                           ;SSD.c: 116:     ((*(ssd_data[ssd].data_value_reg)) = (data));
  9304  1579  0824               	movf	SSD_display@data,w
  9305  157A  00A5               	movwf	??_SSD_display
  9306  157B  300B               	movlw	11
  9307  157C  00A6               	movwf	??_SSD_display+1
  9308  157D  0826               	movf	??_SSD_display+1,w
  9309  157E  00A0               	movwf	___bmul@multiplicand
  9310  157F  0829               	movf	SSD_display@ssd,w
  9311  1580  160A  118A  239E   	fcall	___bmul
  9312  1583  3EB3               	addlw	(low ((_ssd_data| (0+256)+2)))& (0+255)
  9313  1584  0084               	movwf	4
  9314  1585  1783               	bsf	3,7	;select IRP bank3
  9315  1586  0800               	movf	0,w
  9316  1587  1283               	bcf	3,5	;RP0=0, select bank0
  9317  1588  1303               	bcf	3,6	;RP1=0, select bank0
  9318  1589  00A7               	movwf	??_SSD_display+2
  9319  158A  0A84               	incf	4,f
  9320  158B  0800               	movf	0,w
  9321  158C  00A8               	movwf	??_SSD_display+3
  9322  158D  0827               	movf	??_SSD_display+2,w
  9323  158E  0084               	movwf	4
  9324  158F  1783               	bsf	3,7
  9325  1590  1C28               	btfss	??_SSD_display+3,0
  9326  1591  1383               	bcf	3,7
  9327  1592  0825               	movf	??_SSD_display,w
  9328  1593  0080               	movwf	0
  9329  1594  0008               	return
  9330  1595                     __end_of_SSD_display:	
  9331                           
  9332                           	psect	text56
  9333  0BBF                     __ptext56:	
  9334 ;; *************** function _LED_init *****************
  9335 ;; Defined at:
  9336 ;;		line 42 in file "LED.c"
  9337 ;; Parameters:    Size  Location     Type
  9338 ;;  led             1    wreg     enum E2
  9339 ;; Auto vars:     Size  Location     Type
  9340 ;;  led             1   30[BANK0 ] enum E2
  9341 ;; Return value:  Size  Location     Type
  9342 ;;                  1    wreg      void 
  9343 ;; Registers used:
  9344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9345 ;; Tracked objects:
  9346 ;;		On entry : 0/0
  9347 ;;		On exit  : 0/0
  9348 ;;		Unchanged: 0/0
  9349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9350 ;;      Params:         0       0       0       0       0
  9351 ;;      Locals:         0       1       0       0       0
  9352 ;;      Temps:          0      12       0       0       0
  9353 ;;      Totals:         0      13       0       0       0
  9354 ;;Total ram usage:       13 bytes
  9355 ;; Hardware stack levels used:    1
  9356 ;; Hardware stack levels required when called:    5
  9357 ;; This function calls:
  9358 ;;		_LED_create
  9359 ;;		_LED_show
  9360 ;;		___bmul
  9361 ;; This function is called by:
  9362 ;;		_DSP_init
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _LED_init
  9368  0BBF                     _LED_init:	
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _LED_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9372                           ;LED_init@led stored from wreg
  9373  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
  9374  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
  9375  0BC1  00BE               	movwf	LED_init@led
  9376                           
  9377                           ;LED.c: 44:     LED_create();
  9378  0BC2  160A  118A  268D  120A  158A  	fcall	_LED_create
  9379                           
  9380                           ;LED.c: 48:     (((*LedDB[led].dirReg) = ((*LedDB[led].dirReg & (~(1 << LedDB[led].pin))
      +                          ) | (((0)) << LedDB[led].pin))));
  9381  0BC7  3000               	movlw	0
  9382  0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  9383  0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  9384  0BCA  00B2               	movwf	??_LED_init
  9385  0BCB  3006               	movlw	6
  9386  0BCC  00B3               	movwf	??_LED_init+1
  9387  0BCD  0833               	movf	??_LED_init+1,w
  9388  0BCE  00A0               	movwf	___bmul@multiplicand
  9389  0BCF  083E               	movf	LED_init@led,w
  9390  0BD0  160A  118A  239E  120A  158A  	fcall	___bmul
  9391  0BD5  3EC8               	addlw	(low ((_LedDB| 0+4)))& (0+255)
  9392  0BD6  0084               	movwf	4
  9393  0BD7  1383               	bcf	3,7	;select IRP bank1
  9394  0BD8  0A00               	incf	0,w
  9395  0BD9  1283               	bcf	3,5	;RP0=0, select bank0
  9396  0BDA  1303               	bcf	3,6	;RP1=0, select bank0
  9397  0BDB  2BDE               	goto	u3794
  9398  0BDC                     u3795:	
  9399  0BDC  1003               	clrc
  9400  0BDD  0DB2               	rlf	??_LED_init,f
  9401  0BDE                     u3794:	
  9402  0BDE  3EFF               	addlw	-1
  9403  0BDF  1D03               	skipz
  9404  0BE0  2BDC               	goto	u3795
  9405  0BE1  3006               	movlw	6
  9406  0BE2  00B4               	movwf	??_LED_init+2
  9407  0BE3  0834               	movf	??_LED_init+2,w
  9408  0BE4  00A0               	movwf	___bmul@multiplicand
  9409  0BE5  083E               	movf	LED_init@led,w
  9410  0BE6  160A  118A  239E  120A  158A  	fcall	___bmul
  9411  0BEB  3EC4               	addlw	(low (_LedDB| 0))& (0+255)
  9412  0BEC  0084               	movwf	4
  9413  0BED  1383               	bcf	3,7	;select IRP bank1
  9414  0BEE  0800               	movf	0,w
  9415  0BEF  1283               	bcf	3,5	;RP0=0, select bank0
  9416  0BF0  1303               	bcf	3,6	;RP1=0, select bank0
  9417  0BF1  00B5               	movwf	??_LED_init+3
  9418  0BF2  0A84               	incf	4,f
  9419  0BF3  0800               	movf	0,w
  9420  0BF4  00B6               	movwf	??_LED_init+4
  9421  0BF5  0835               	movf	??_LED_init+3,w
  9422  0BF6  0084               	movwf	4
  9423  0BF7  1783               	bsf	3,7
  9424  0BF8  1C36               	btfss	??_LED_init+4,0
  9425  0BF9  1383               	bcf	3,7
  9426  0BFA  0800               	movf	0,w
  9427  0BFB  00B7               	movwf	??_LED_init+5
  9428  0BFC  3001               	movlw	1
  9429  0BFD  00B8               	movwf	??_LED_init+6
  9430  0BFE  3006               	movlw	6
  9431  0BFF  00B9               	movwf	??_LED_init+7
  9432  0C00  0839               	movf	??_LED_init+7,w
  9433  0C01  00A0               	movwf	___bmul@multiplicand
  9434  0C02  083E               	movf	LED_init@led,w
  9435  0C03  160A  118A  239E  120A  158A  	fcall	___bmul
  9436  0C08  3EC8               	addlw	(low ((_LedDB| 0+4)))& (0+255)
  9437  0C09  0084               	movwf	4
  9438  0C0A  1383               	bcf	3,7	;select IRP bank1
  9439  0C0B  0A00               	incf	0,w
  9440  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  9441  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  9442  0C0E  2C11               	goto	u3804
  9443  0C0F                     u3805:	
  9444  0C0F  1003               	clrc
  9445  0C10  0DB8               	rlf	??_LED_init+6,f
  9446  0C11                     u3804:	
  9447  0C11  3EFF               	addlw	-1
  9448  0C12  1D03               	skipz
  9449  0C13  2C0F               	goto	u3805
  9450  0C14  0838               	movf	??_LED_init+6,w
  9451  0C15  3AFF               	xorlw	255
  9452  0C16  0537               	andwf	??_LED_init+5,w
  9453  0C17  0432               	iorwf	??_LED_init,w
  9454  0C18  00BA               	movwf	??_LED_init+8
  9455  0C19  3006               	movlw	6
  9456  0C1A  00BB               	movwf	??_LED_init+9
  9457  0C1B  083B               	movf	??_LED_init+9,w
  9458  0C1C  00A0               	movwf	___bmul@multiplicand
  9459  0C1D  083E               	movf	LED_init@led,w
  9460  0C1E  160A  118A  239E  120A  158A  	fcall	___bmul
  9461  0C23  3EC4               	addlw	(low (_LedDB| 0))& (0+255)
  9462  0C24  0084               	movwf	4
  9463  0C25  1383               	bcf	3,7	;select IRP bank1
  9464  0C26  0800               	movf	0,w
  9465  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  9466  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  9467  0C29  00BC               	movwf	??_LED_init+10
  9468  0C2A  0A84               	incf	4,f
  9469  0C2B  0800               	movf	0,w
  9470  0C2C  00BD               	movwf	??_LED_init+11
  9471  0C2D  083C               	movf	??_LED_init+10,w
  9472  0C2E  0084               	movwf	4
  9473  0C2F  1783               	bsf	3,7
  9474  0C30  1C3D               	btfss	??_LED_init+11,0
  9475  0C31  1383               	bcf	3,7
  9476  0C32  083A               	movf	??_LED_init+8,w
  9477  0C33  0080               	movwf	0
  9478                           
  9479                           ;LED.c: 52:     LED_show(led);
  9480  0C34  083E               	movf	LED_init@led,w
  9481  0C35  120A  158A  2439   	fcall	_LED_show
  9482  0C38  0008               	return
  9483  0C39                     __end_of_LED_init:	
  9484                           
  9485                           	psect	text57
  9486  0C39                     __ptext57:	
  9487 ;; *************** function _LED_show *****************
  9488 ;; Defined at:
  9489 ;;		line 67 in file "LED.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  led             1    wreg     enum E2
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  led             1   17[BANK0 ] enum E2
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  1    wreg      void 
  9496 ;; Registers used:
  9497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9503 ;;      Params:         0       0       0       0       0
  9504 ;;      Locals:         0       1       0       0       0
  9505 ;;      Temps:          0      13       0       0       0
  9506 ;;      Totals:         0      14       0       0       0
  9507 ;;Total ram usage:       14 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    4
  9510 ;; This function calls:
  9511 ;;		___bmul
  9512 ;; This function is called by:
  9513 ;;		_LED_init
  9514 ;;		_LED_update
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _LED_show
  9520  0C39                     _LED_show:	
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _LED_show: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9524                           ;LED_show@led stored from wreg
  9525  0C39  1283               	bcf	3,5	;RP0=0, select bank0
  9526  0C3A  1303               	bcf	3,6	;RP1=0, select bank0
  9527  0C3B  00B1               	movwf	LED_show@led
  9528                           
  9529                           ;LED.c: 69:     (((*LedDB[led].dataReg) = ((*LedDB[led].dataReg & (~(1 << LedDB[led].pin
      +                          ))) | (LedDB[led].state << LedDB[led].pin))));
  9530  0C3C  3006               	movlw	6
  9531  0C3D  00A4               	movwf	??_LED_show
  9532  0C3E  0824               	movf	??_LED_show,w
  9533  0C3F  00A0               	movwf	___bmul@multiplicand
  9534  0C40  0831               	movf	LED_show@led,w
  9535  0C41  160A  118A  239E  120A  158A  	fcall	___bmul
  9536  0C46  3EC9               	addlw	(low ((_LedDB| 0+5)))& (0+255)
  9537  0C47  0084               	movwf	4
  9538  0C48  1383               	bcf	3,7	;select IRP bank1
  9539  0C49  0800               	movf	0,w
  9540  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  9541  0C4B  1303               	bcf	3,6	;RP1=0, select bank0
  9542  0C4C  00A5               	movwf	??_LED_show+1
  9543  0C4D  3006               	movlw	6
  9544  0C4E  00A6               	movwf	??_LED_show+2
  9545  0C4F  0826               	movf	??_LED_show+2,w
  9546  0C50  00A0               	movwf	___bmul@multiplicand
  9547  0C51  0831               	movf	LED_show@led,w
  9548  0C52  160A  118A  239E  120A  158A  	fcall	___bmul
  9549  0C57  3EC8               	addlw	(low ((_LedDB| 0+4)))& (0+255)
  9550  0C58  0084               	movwf	4
  9551  0C59  1383               	bcf	3,7	;select IRP bank1
  9552  0C5A  0A00               	incf	0,w
  9553  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  9554  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  9555  0C5D  2C60               	goto	u2734
  9556  0C5E                     u2735:	
  9557  0C5E  1003               	clrc
  9558  0C5F  0DA5               	rlf	??_LED_show+1,f
  9559  0C60                     u2734:	
  9560  0C60  3EFF               	addlw	-1
  9561  0C61  1D03               	skipz
  9562  0C62  2C5E               	goto	u2735
  9563  0C63  3006               	movlw	6
  9564  0C64  00A7               	movwf	??_LED_show+3
  9565  0C65  0827               	movf	??_LED_show+3,w
  9566  0C66  00A0               	movwf	___bmul@multiplicand
  9567  0C67  0831               	movf	LED_show@led,w
  9568  0C68  160A  118A  239E  120A  158A  	fcall	___bmul
  9569  0C6D  3EC6               	addlw	(low ((_LedDB| 0+2)))& (0+255)
  9570  0C6E  0084               	movwf	4
  9571  0C6F  1383               	bcf	3,7	;select IRP bank1
  9572  0C70  0800               	movf	0,w
  9573  0C71  1283               	bcf	3,5	;RP0=0, select bank0
  9574  0C72  1303               	bcf	3,6	;RP1=0, select bank0
  9575  0C73  00A8               	movwf	??_LED_show+4
  9576  0C74  0A84               	incf	4,f
  9577  0C75  0800               	movf	0,w
  9578  0C76  00A9               	movwf	??_LED_show+5
  9579  0C77  0828               	movf	??_LED_show+4,w
  9580  0C78  0084               	movwf	4
  9581  0C79  1783               	bsf	3,7
  9582  0C7A  1C29               	btfss	??_LED_show+5,0
  9583  0C7B  1383               	bcf	3,7
  9584  0C7C  0800               	movf	0,w
  9585  0C7D  00AA               	movwf	??_LED_show+6
  9586  0C7E  3001               	movlw	1
  9587  0C7F  00AB               	movwf	??_LED_show+7
  9588  0C80  3006               	movlw	6
  9589  0C81  00AC               	movwf	??_LED_show+8
  9590  0C82  082C               	movf	??_LED_show+8,w
  9591  0C83  00A0               	movwf	___bmul@multiplicand
  9592  0C84  0831               	movf	LED_show@led,w
  9593  0C85  160A  118A  239E  120A  158A  	fcall	___bmul
  9594  0C8A  3EC8               	addlw	(low ((_LedDB| 0+4)))& (0+255)
  9595  0C8B  0084               	movwf	4
  9596  0C8C  1383               	bcf	3,7	;select IRP bank1
  9597  0C8D  0A00               	incf	0,w
  9598  0C8E  1283               	bcf	3,5	;RP0=0, select bank0
  9599  0C8F  1303               	bcf	3,6	;RP1=0, select bank0
  9600  0C90  2C93               	goto	u2744
  9601  0C91                     u2745:	
  9602  0C91  1003               	clrc
  9603  0C92  0DAB               	rlf	??_LED_show+7,f
  9604  0C93                     u2744:	
  9605  0C93  3EFF               	addlw	-1
  9606  0C94  1D03               	skipz
  9607  0C95  2C91               	goto	u2745
  9608  0C96  082B               	movf	??_LED_show+7,w
  9609  0C97  3AFF               	xorlw	255
  9610  0C98  052A               	andwf	??_LED_show+6,w
  9611  0C99  0425               	iorwf	??_LED_show+1,w
  9612  0C9A  00AD               	movwf	??_LED_show+9
  9613  0C9B  3006               	movlw	6
  9614  0C9C  00AE               	movwf	??_LED_show+10
  9615  0C9D  082E               	movf	??_LED_show+10,w
  9616  0C9E  00A0               	movwf	___bmul@multiplicand
  9617  0C9F  0831               	movf	LED_show@led,w
  9618  0CA0  160A  118A  239E   	fcall	___bmul
  9619  0CA3  3EC6               	addlw	(low ((_LedDB| 0+2)))& (0+255)
  9620  0CA4  0084               	movwf	4
  9621  0CA5  1383               	bcf	3,7	;select IRP bank1
  9622  0CA6  0800               	movf	0,w
  9623  0CA7  1283               	bcf	3,5	;RP0=0, select bank0
  9624  0CA8  1303               	bcf	3,6	;RP1=0, select bank0
  9625  0CA9  00AF               	movwf	??_LED_show+11
  9626  0CAA  0A84               	incf	4,f
  9627  0CAB  0800               	movf	0,w
  9628  0CAC  00B0               	movwf	??_LED_show+12
  9629  0CAD  082F               	movf	??_LED_show+11,w
  9630  0CAE  0084               	movwf	4
  9631  0CAF  1783               	bsf	3,7
  9632  0CB0  1C30               	btfss	??_LED_show+12,0
  9633  0CB1  1383               	bcf	3,7
  9634  0CB2  082D               	movf	??_LED_show+9,w
  9635  0CB3  0080               	movwf	0
  9636  0CB4  0008               	return
  9637  0CB5                     __end_of_LED_show:	
  9638                           
  9639                           	psect	text58
  9640  139E                     __ptext58:	
  9641 ;; *************** function ___bmul *****************
  9642 ;; Defined at:
  9643 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  multiplier      1    wreg     unsigned char 
  9646 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  9647 ;; Auto vars:     Size  Location     Type
  9648 ;;  multiplier      1    3[BANK0 ] unsigned char 
  9649 ;;  product         1    2[BANK0 ] unsigned char 
  9650 ;; Return value:  Size  Location     Type
  9651 ;;                  1    wreg      unsigned char 
  9652 ;; Registers used:
  9653 ;;		wreg, status,2, status,0
  9654 ;; Tracked objects:
  9655 ;;		On entry : 0/0
  9656 ;;		On exit  : 0/0
  9657 ;;		Unchanged: 0/0
  9658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9659 ;;      Params:         0       1       0       0       0
  9660 ;;      Locals:         0       2       0       0       0
  9661 ;;      Temps:          0       1       0       0       0
  9662 ;;      Totals:         0       4       0       0       0
  9663 ;;Total ram usage:        4 bytes
  9664 ;; Hardware stack levels used:    1
  9665 ;; Hardware stack levels required when called:    3
  9666 ;; This function calls:
  9667 ;;		Nothing
  9668 ;; This function is called by:
  9669 ;;		_SSD_init
  9670 ;;		_SSD_setVal
  9671 ;;		_SSD_update
  9672 ;;		_SSD_display
  9673 ;;		_SSD_on
  9674 ;;		_SSD_off
  9675 ;;		_switch_init
  9676 ;;		_switch_getState
  9677 ;;		_switch_update
  9678 ;;		_SW_getPressedTime
  9679 ;;		_DSP_update
  9680 ;;		_LED_init
  9681 ;;		_LED_setState
  9682 ;;		_LED_show
  9683 ;;		_SSD_setSymbol
  9684 ;;		_SSD_getSymbol
  9685 ;;		_switch_setState
  9686 ;;		_LED_getState
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           
  9691                           ;psect for function ___bmul
  9692  139E                     ___bmul:	
  9693                           
  9694                           ;incstack = 0
  9695                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9696                           ;___bmul@multiplier stored from wreg
  9697  139E  1283               	bcf	3,5	;RP0=0, select bank0
  9698  139F  1303               	bcf	3,6	;RP1=0, select bank0
  9699  13A0  00A3               	movwf	___bmul@multiplier
  9700  13A1  01A2               	clrf	___bmul@product
  9701  13A2                     l2489:	
  9702  13A2  1C23               	btfss	___bmul@multiplier,0
  9703  13A3  2BA8               	goto	l2493
  9704  13A4  0820               	movf	___bmul@multiplicand,w
  9705  13A5  00A1               	movwf	??___bmul
  9706  13A6  0821               	movf	??___bmul,w
  9707  13A7  07A2               	addwf	___bmul@product,f
  9708  13A8                     l2493:	
  9709  13A8  1003               	clrc
  9710  13A9  0DA0               	rlf	___bmul@multiplicand,f
  9711  13AA  1003               	clrc
  9712  13AB  0CA3               	rrf	___bmul@multiplier,f
  9713  13AC  0823               	movf	___bmul@multiplier,w
  9714  13AD  1D03               	btfss	3,2
  9715  13AE  2BA2               	goto	l2489
  9716  13AF  0822               	movf	___bmul@product,w
  9717  13B0  0008               	return
  9718  13B1                     __end_of___bmul:	
  9719                           
  9720                           	psect	text59
  9721  168D                     __ptext59:	
  9722 ;; *************** function _LED_create *****************
  9723 ;; Defined at:
  9724 ;;		line 89 in file "LED.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;		None
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;  910             6    0[BANK0 ] struct led
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      void 
  9731 ;; Registers used:
  9732 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9738 ;;      Params:         0       0       0       0       0
  9739 ;;      Locals:         0       6       0       0       0
  9740 ;;      Temps:          0       0       0       0       0
  9741 ;;      Totals:         0       6       0       0       0
  9742 ;;Total ram usage:        6 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    3
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_LED_init
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           
  9753                           ;psect for function _LED_create
  9754  168D                     _LED_create:	
  9755                           
  9756                           ;LED.c: 91:     LedDB[(0)] = (tLedObj) { &((*((volatile tRegister *)(0x86))).Reg) , &((*
      +                          ((volatile tRegister *)(0x06))).Reg) , (3) , LED_OFF };
  9757                           
  9758                           ;incstack = 0
  9759                           ; Regs used in _LED_create: [wreg-fsr0h+status,2+status,0]
  9760  168D  3020               	movlw	LED_create@910& (0+255)
  9761  168E  0084               	movwf	4
  9762  168F  1683               	bsf	3,5	;RP0=1, select bank1
  9763  1690  1303               	bcf	3,6	;RP1=0, select bank1
  9764  1691  083C               	movf	LED_create@F909^(0+128),w
  9765  1692  1383               	bcf	3,7	;select IRP bank0
  9766  1693  0080               	movwf	0
  9767  1694  0A84               	incf	4,f
  9768  1695  083D               	movf	(LED_create@F909^(0+128)+1),w
  9769  1696  0080               	movwf	0
  9770  1697  0A84               	incf	4,f
  9771  1698  083E               	movf	(LED_create@F909^(0+128)+2),w
  9772  1699  0080               	movwf	0
  9773  169A  0A84               	incf	4,f
  9774  169B  083F               	movf	(LED_create@F909^(0+128)+3),w
  9775  169C  0080               	movwf	0
  9776  169D  0A84               	incf	4,f
  9777  169E  0840               	movf	(LED_create@F909^(0+128)+4),w
  9778  169F  0080               	movwf	0
  9779  16A0  0A84               	incf	4,f
  9780  16A1  0841               	movf	(LED_create@F909^(0+128)+5),w
  9781  16A2  0080               	movwf	0
  9782  16A3  30C4               	movlw	_LedDB& (0+255)
  9783  16A4  0084               	movwf	4
  9784  16A5  1283               	bcf	3,5	;RP0=0, select bank0
  9785  16A6  1303               	bcf	3,6	;RP1=0, select bank0
  9786  16A7  0820               	movf	LED_create@910,w
  9787  16A8  0080               	movwf	0
  9788  16A9  0A84               	incf	4,f
  9789  16AA  0821               	movf	LED_create@910+1,w
  9790  16AB  0080               	movwf	0
  9791  16AC  0A84               	incf	4,f
  9792  16AD  0822               	movf	LED_create@910+2,w
  9793  16AE  0080               	movwf	0
  9794  16AF  0A84               	incf	4,f
  9795  16B0  0823               	movf	LED_create@910+3,w
  9796  16B1  0080               	movwf	0
  9797  16B2  0A84               	incf	4,f
  9798  16B3  0824               	movf	LED_create@910+4,w
  9799  16B4  0080               	movwf	0
  9800  16B5  0A84               	incf	4,f
  9801  16B6  0825               	movf	LED_create@910+5,w
  9802  16B7  0080               	movwf	0
  9803  16B8  0008               	return
  9804  16B9                     __end_of_LED_create:	
  9805                           
  9806                           	psect	text60
  9807  17C2                     __ptext60:	
  9808 ;; *************** function _OS_ISR *****************
  9809 ;; Defined at:
  9810 ;;		line 83 in file "MAIN_VACCUM.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;		None
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;		None
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  1    wreg      void 
  9817 ;; Registers used:
  9818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9824 ;;      Params:         0       0       0       0       0
  9825 ;;      Locals:         0       0       0       0       0
  9826 ;;      Temps:          6       0       0       0       0
  9827 ;;      Totals:         6       0       0       0       0
  9828 ;;Total ram usage:        6 bytes
  9829 ;; Hardware stack levels used:    1
  9830 ;; Hardware stack levels required when called:    2
  9831 ;; This function calls:
  9832 ;;		_MO_fire
  9833 ;;		i1_timer0_reload
  9834 ;; This function is called by:
  9835 ;;		Interrupt level 1
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           
  9840                           ;psect for function _OS_ISR
  9841  17C2                     _OS_ISR:	
  9842                           
  9843                           ;MAIN_VACCUM.c: 86:     if((((*((volatile tRegister *)(0x0B))).Bits.BIT2))){
  9844  17C2  1D0B               	btfss	11,2	;volatile
  9845  17C3  2FEB               	goto	i1l3571
  9846                           
  9847                           ;MAIN_VACCUM.c: 88:        (((((((*((volatile tRegister *)(0x07))).Reg))) = (((((*((vola
      +                          tile tRegister *)(0x07))).Reg)) & (~(1 << ((1))))) | (!(((((*((volatile tRegister *)(0x0
      +                          7))).Reg)) >> ((1))) & (1)) << ((1)))))));
  9848  17C4  1283               	bcf	3,5	;RP0=0, select bank0
  9849  17C5  1303               	bcf	3,6	;RP1=0, select bank0
  9850  17C6  0807               	movf	7,w	;volatile
  9851  17C7  00F4               	movwf	??_OS_ISR
  9852  17C8  3001               	movlw	1
  9853  17C9                     u383_25:	
  9854  17C9  1003               	clrc
  9855  17CA  0CF4               	rrf	??_OS_ISR,f
  9856  17CB  3EFF               	addlw	-1
  9857  17CC  1D03               	skipz
  9858  17CD  2FC9               	goto	u383_25
  9859  17CE  1874               	btfsc	??_OS_ISR,0
  9860  17CF  2FD2               	goto	u384_20
  9861  17D0  3001               	movlw	1
  9862  17D1  2FD3               	goto	u385_20
  9863  17D2                     u384_20:	
  9864  17D2  3000               	movlw	0
  9865  17D3                     u385_20:	
  9866  17D3  00F5               	movwf	??_OS_ISR+1
  9867  17D4  3001               	movlw	1
  9868  17D5                     u386_25:	
  9869  17D5  1003               	clrc
  9870  17D6  0DF5               	rlf	??_OS_ISR+1,f
  9871  17D7  3EFF               	addlw	-1
  9872  17D8  1D03               	skipz
  9873  17D9  2FD5               	goto	u386_25
  9874  17DA  0807               	movf	7,w	;volatile
  9875  17DB  39FD               	andlw	253
  9876  17DC  0475               	iorwf	??_OS_ISR+1,w
  9877  17DD  00F6               	movwf	??_OS_ISR+2
  9878  17DE  0876               	movf	??_OS_ISR+2,w
  9879  17DF  0087               	movwf	7	;volatile
  9880                           
  9881                           ;MAIN_VACCUM.c: 89:         timer0_reload((99));
  9882  17E0  3063               	movlw	99
  9883  17E1  160A  118A  2322  160A  118A  	fcall	i1_timer0_reload
  9884                           
  9885                           ;MAIN_VACCUM.c: 90:         (((*((volatile tRegister *)(0x0B))).Bits.BIT2)) = (0);
  9886  17E6  110B               	bcf	11,2	;volatile
  9887                           
  9888                           ;MAIN_VACCUM.c: 91:         Schedular_State = (1);
  9889  17E7  1683               	bsf	3,5	;RP0=1, select bank1
  9890  17E8  1303               	bcf	3,6	;RP1=0, select bank1
  9891  17E9  01DE               	clrf	_Schedular_State^(0+128)
  9892  17EA  0ADE               	incf	_Schedular_State^(0+128),f
  9893  17EB                     i1l3571:	
  9894                           
  9895                           ;MAIN_VACCUM.c: 94:     if(((*((volatile tRegister *)(0x0C))).Bits.BIT0)){
  9896  17EB  1283               	bcf	3,5	;RP0=0, select bank0
  9897  17EC  1303               	bcf	3,6	;RP1=0, select bank0
  9898  17ED  1C0C               	btfss	12,0	;volatile
  9899  17EE  2FF7               	goto	i1l61
  9900                           
  9901                           ;MAIN_VACCUM.c: 95:        MO_fire();
  9902  17EF  160A  118A  249D  160A  118A  	fcall	_MO_fire
  9903                           
  9904                           ;MAIN_VACCUM.c: 96:        ((*((volatile tRegister *)(0x0C))).Bits.BIT0) = (0);
  9905  17F4  1283               	bcf	3,5	;RP0=0, select bank0
  9906  17F5  1303               	bcf	3,6	;RP1=0, select bank0
  9907  17F6  100C               	bcf	12,0	;volatile
  9908  17F7                     i1l61:	
  9909  17F7  0879               	movf	??_OS_ISR+5,w
  9910  17F8  008A               	movwf	10
  9911  17F9  0878               	movf	??_OS_ISR+4,w
  9912  17FA  0084               	movwf	4
  9913  17FB  0E77               	swapf	(??_OS_ISR+3)^(0+4294967168),w
  9914  17FC  0083               	movwf	3
  9915  17FD  0EFE               	swapf	126,f
  9916  17FE  0E7E               	swapf	126,w
  9917  17FF  0009               	retfie
  9918  1800                     __end_of_OS_ISR:	
  9919                           
  9920                           	psect	intentry
  9921  0004                     __pintentry:	
  9922                           ;incstack = 0
  9923 ;; hardware stack exceeded
  9924                           ; Regs used in _OS_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9925                           
  9926  0004                     interrupt_function:	
  9927  007E                     saved_w	set	btemp
  9928  0004  00FE               	movwf	btemp
  9929  0005  0E03               	swapf	3,w
  9930  0006  00F7               	movwf	??_OS_ISR+3
  9931  0007  0804               	movf	4,w
  9932  0008  00F8               	movwf	??_OS_ISR+4
  9933  0009  080A               	movf	10,w
  9934  000A  00F9               	movwf	??_OS_ISR+5
  9935  000B  160A  118A  2FC2   	ljmp	_OS_ISR
  9936                           
  9937                           	psect	text61
  9938  1322                     __ptext61:	
  9939 ;; *************** function i1_timer0_reload *****************
  9940 ;; Defined at:
  9941 ;;		line 41 in file "TIMER0.c"
  9942 ;; Parameters:    Size  Location     Type
  9943 ;;  val             1    wreg     unsigned char 
  9944 ;; Auto vars:     Size  Location     Type
  9945 ;;  val             1    1[COMMON] unsigned char 
  9946 ;; Return value:  Size  Location     Type
  9947 ;;                  1    wreg      void 
  9948 ;; Registers used:
  9949 ;;		wreg
  9950 ;; Tracked objects:
  9951 ;;		On entry : 0/0
  9952 ;;		On exit  : 0/0
  9953 ;;		Unchanged: 0/0
  9954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9955 ;;      Params:         0       0       0       0       0
  9956 ;;      Locals:         1       0       0       0       0
  9957 ;;      Temps:          1       0       0       0       0
  9958 ;;      Totals:         2       0       0       0       0
  9959 ;;Total ram usage:        2 bytes
  9960 ;; Hardware stack levels used:    1
  9961 ;; This function calls:
  9962 ;;		Nothing
  9963 ;; This function is called by:
  9964 ;;		_OS_ISR
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           
  9969                           ;psect for function i1_timer0_reload
  9970  1322                     i1_timer0_reload:	
  9971                           
  9972                           ;incstack = 0
  9973                           ; Regs used in i1_timer0_reload: [wreg]
  9974                           ;i1timer0_reload@val stored from wreg
  9975  1322  00F1               	movwf	i1timer0_reload@val
  9976                           
  9977                           ;TIMER0.c: 43:     ((*((volatile tRegister *)(0x01))).Reg) = val;
  9978  1323  0871               	movf	i1timer0_reload@val,w
  9979  1324  00F0               	movwf	??i1_timer0_reload
  9980  1325  0870               	movf	??i1_timer0_reload,w
  9981  1326  1283               	bcf	3,5	;RP0=0, select bank0
  9982  1327  1303               	bcf	3,6	;RP1=0, select bank0
  9983  1328  0081               	movwf	1	;volatile
  9984  1329  0008               	return
  9985  132A                     __end_ofi1_timer0_reload:	
  9986                           
  9987                           	psect	text62
  9988  149D                     __ptext62:	
  9989 ;; *************** function _MO_fire *****************
  9990 ;; Defined at:
  9991 ;;		line 98 in file "MOTOR.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10005 ;;      Params:         0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0
 10007 ;;      Temps:          1       0       0       0       0
 10008 ;;      Totals:         1       0       0       0       0
 10009 ;;Total ram usage:        1 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    1
 10012 ;; This function calls:
 10013 ;;		i1_TMR1_setState
 10014 ;; This function is called by:
 10015 ;;		_OS_ISR
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           
 10020                           ;psect for function _MO_fire
 10021  149D                     _MO_fire:	
 10022                           
 10023                           ;MOTOR.c: 109:     ((((((*((volatile tRegister *)(0x07))).Reg))) = (((((*((volatile tReg
      +                          ister *)(0x07))).Reg)) & (~(1 << ((2))))) | ((1) << ((2))))));
 10024                           
 10025                           ;incstack = 0
 10026 ;; hardware stack exceeded
 10027                           ; Regs used in _MO_fire: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10028  149D  1283               	bcf	3,5	;RP0=0, select bank0
 10029  149E  1303               	bcf	3,6	;RP1=0, select bank0
 10030  149F  0807               	movf	7,w	;volatile
 10031  14A0  39FB               	andlw	251
 10032  14A1  3804               	iorlw	4
 10033  14A2  00F3               	movwf	??_MO_fire
 10034  14A3  0873               	movf	??_MO_fire,w
 10035  14A4  0087               	movwf	7	;volatile
 10036                           
 10037                           ;MOTOR.c: 110:     _delay((unsigned long)((100)*(8000000/4000000.0)));
 10038  14A5  3042               	movlw	66
 10039  14A6  00F3               	movwf	??_MO_fire
 10040  14A7                     u389_27:	
 10041  14A7  0BF3               	decfsz	??_MO_fire,f
 10042  14A8  2CA7               	goto	u389_27
 10043  14A9  0000               	nop
 10044                           
 10045                           ;MOTOR.c: 111:     ((((((*((volatile tRegister *)(0x07))).Reg))) = (((((*((volatile tReg
      +                          ister *)(0x07))).Reg)) & (~(1 << ((2))))) | ((0) << ((2))))));
 10046  14AA  1283               	bcf	3,5	;RP0=0, select bank0
 10047  14AB  1303               	bcf	3,6	;RP1=0, select bank0
 10048  14AC  0807               	movf	7,w	;volatile
 10049  14AD  39FB               	andlw	251
 10050  14AE  00F3               	movwf	??_MO_fire
 10051  14AF  0873               	movf	??_MO_fire,w
 10052  14B0  0087               	movwf	7	;volatile
 10053                           
 10054                           ;MOTOR.c: 112:     TMR1_setState(TMR1_OFF_STATE);
 10055  14B1  3001               	movlw	1
 10056  14B2  160A  118A  24E9   	fcall	i1_TMR1_setState
 10057  14B5  0008               	return
 10058  14B6                     __end_of_MO_fire:	
 10059                           
 10060                           	psect	text63
 10061  14E9                     __ptext63:	
 10062 ;; *************** function i1_TMR1_setState *****************
 10063 ;; Defined at:
 10064 ;;		line 86 in file "TIMER1.c"
 10065 ;; Parameters:    Size  Location     Type
 10066 ;;  s               1    wreg     enum E882
 10067 ;; Auto vars:     Size  Location     Type
 10068 ;;  s               1    2[COMMON] enum E882
 10069 ;; Return value:  Size  Location     Type
 10070 ;;                  1    wreg      void 
 10071 ;; Registers used:
 10072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10073 ;; Tracked objects:
 10074 ;;		On entry : 0/0
 10075 ;;		On exit  : 0/0
 10076 ;;		Unchanged: 0/0
 10077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10078 ;;      Params:         0       0       0       0       0
 10079 ;;      Locals:         1       0       0       0       0
 10080 ;;      Temps:          2       0       0       0       0
 10081 ;;      Totals:         3       0       0       0       0
 10082 ;;Total ram usage:        3 bytes
 10083 ;; Hardware stack levels used:    1
 10084 ;; This function calls:
 10085 ;;		Nothing
 10086 ;; This function is called by:
 10087 ;;		_MO_fire
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           
 10092                           ;psect for function i1_TMR1_setState
 10093  14E9                     i1_TMR1_setState:	
 10094                           
 10095                           ;incstack = 0
 10096 ;; hardware stack exceeded
 10097                           ; Regs used in i1_TMR1_setState: [wreg-fsr0h+status,2+status,0]
 10098                           ;i1TMR1_setState@s stored from wreg
 10099  14E9  00F2               	movwf	i1TMR1_setState@s
 10100                           
 10101                           ;TIMER1.c: 88:     switch(s) {
 10102  14EA  2CF3               	goto	i1l3501
 10103  14EB                     i1l481:	
 10104                           ;TIMER1.c: 90:         case TMR1_ON_STATE:
 10105                           
 10106                           
 10107                           ;TIMER1.c: 91:             ((*((volatile tRegister *)(0x10))).Bits.BIT0 = 1);
 10108  14EB  1283               	bcf	3,5	;RP0=0, select bank0
 10109  14EC  1303               	bcf	3,6	;RP1=0, select bank0
 10110  14ED  1410               	bsf	16,0	;volatile
 10111                           
 10112                           ;TIMER1.c: 92:             break;
 10113  14EE  0008               	return
 10114  14EF                     i1l483:	
 10115                           ;TIMER1.c: 94:         case TMR1_OFF_STATE :
 10116                           
 10117                           
 10118                           ;TIMER1.c: 95:             ((*((volatile tRegister *)(0x10))).Bits.BIT0 = 0);
 10119  14EF  1283               	bcf	3,5	;RP0=0, select bank0
 10120  14F0  1303               	bcf	3,6	;RP1=0, select bank0
 10121  14F1  1010               	bcf	16,0	;volatile
 10122                           
 10123                           ;TIMER1.c: 96:             break;
 10124  14F2  0008               	return
 10125  14F3                     i1l3501:	
 10126  14F3  0872               	movf	i1TMR1_setState@s,w
 10127  14F4  00F0               	movwf	??i1_TMR1_setState
 10128  14F5  01F1               	clrf	??i1_TMR1_setState+1
 10129                           
 10130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10131                           ; Switch size 1, requested type "simple"
 10132                           ; Number of cases is 1, Range of values is 0 to 0
 10133                           ; switch strategies available:
 10134                           ; Name         Instructions Cycles
 10135                           ; simple_byte            4     3 (average)
 10136                           ; direct_byte           11     8 (fixed)
 10137                           ; jumptable            260     6 (fixed)
 10138                           ;	Chosen strategy is simple_byte
 10139  14F6  0871               	movf	??i1_TMR1_setState+1,w
 10140  14F7  3A00               	xorlw	0	; case 0
 10141  14F8  1903               	skipnz
 10142  14F9  2CFB               	goto	i1l3961
 10143  14FA  2D03               	goto	i1l485
 10144  14FB                     i1l3961:	
 10145                           
 10146                           ; Switch size 1, requested type "simple"
 10147                           ; Number of cases is 2, Range of values is 0 to 1
 10148                           ; switch strategies available:
 10149                           ; Name         Instructions Cycles
 10150                           ; simple_byte            7     4 (average)
 10151                           ; direct_byte           14     8 (fixed)
 10152                           ; jumptable            260     6 (fixed)
 10153                           ;	Chosen strategy is simple_byte
 10154  14FB  0870               	movf	??i1_TMR1_setState,w
 10155  14FC  3A00               	xorlw	0	; case 0
 10156  14FD  1903               	skipnz
 10157  14FE  2CEB               	goto	i1l481
 10158  14FF  3A01               	xorlw	1	; case 1
 10159  1500  1903               	skipnz
 10160  1501  2CEF               	goto	i1l483
 10161  1502  2D03               	goto	i1l485
 10162  1503                     i1l485:	
 10163  1503  0008               	return
 10164  1504                     __end_ofi1_TMR1_setState:	
 10165  007E                     btemp	set	126	;btemp
 10166  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        69
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     80      80
    BANK1            80     11      74
    BANK3            96      0      88
    BANK2            96      0      11

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    F910.dataReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F910.dirReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F909.dataReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F909.dirReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S558led$dataReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    LedDB.dataReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S558led$dirReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    LedDB.dirReg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    VC_getSpeed@ps	PTR enum E2 size(1) Largest target is 1
		 -> DSP_speed(COMMON[1]), 

    S308$data_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    switches_data.data_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S308$ctrl_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    switches_data.ctrl_reg	PTR volatile unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F936.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F935.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F934.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F933.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F932.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F932.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F932.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F932.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F931.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F931.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F931.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    F931.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S151$ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.ctrl_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S151$ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.ctrl_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S151$data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.data_value_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    S151$data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 

    ssd_data.data_direction_reg	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _OS_ISR in COMMON

    _OS_ISR->_MO_fire
    _MO_fire->i1_TMR1_setState

Critical Paths under _main in BANK0

    _sw_init->_switch_init
    _switch_init->___bmul
    _OS_schedular->_DSP_update
    _switch_update->___bmul
    _VC_update->_sw_dust_handler
    _sw_plus_handler->_switch_getState
    _sw_minus_handler->_switch_getState
    _sw_dust_handler->_switch_getState
    _SW_getPressedTime->___bmul
    _SSD_update->_SSD_off
    _SSD_update->_SSD_on
    _SSD_on->___bmul
    _SSD_off->___bmul
    _MO_fire_update->_TMR1_reload
    _TMR1_reload->___wmul
    _DSP_update->_LED_update
    _switch_getState->___bmul
    _SSD_setVal->___bmul
    _LED_update->_LED_show
    _LED_setState->___bmul
    _OS_init->_timer0_init
    _timer0_init->_round
    _round->___flsub
    _trunc->___fltol
    _frexp->___fleq
    ___fltol->___fldiv
    ___flsub->_trunc
    ___fldiv->___xxtofl
    _DSP_init->_SSD_init
    _SSD_init->_SSD_schematic_init
    _SSD_display->___bmul
    _LED_init->_LED_show
    _LED_show->___bmul

Critical Paths under _OS_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _OS_init->_timer0_init

Critical Paths under _OS_ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _OS_ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _OS_ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   59958
                           _DSP_init
                     _INDICATOR_init
                            _MO_init
                            _OS_init
                       _OS_schedular
                            _VC_init
                            _sw_init
 ---------------------------------------------------------------------------------
 (1) _sw_init                                              0     0      0    2287
                        _switch_init
 ---------------------------------------------------------------------------------
 (2) _switch_init                                         14    14      0    2287
                                              4 BANK0     14    14      0
                             ___bmul
            _switches_Schematic_init
 ---------------------------------------------------------------------------------
 (3) _switches_Schematic_init                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _VC_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OS_schedular                                         0     0      0   39302
                         _DSP_update
                          _MO_update
                         _SSD_update
                          _VC_update
                      _switch_update
 ---------------------------------------------------------------------------------
 (2) _switch_update                                        9     9      0    2796
                                              4 BANK0      9     9      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _VC_update                                            3     3      0    8487
                                              9 BANK0      3     3      0
                  _MO_setTargetAngel
                    _sw_dust_handler
                   _sw_minus_handler
                    _sw_plus_handler
 ---------------------------------------------------------------------------------
 (3) _sw_plus_handler                                      0     0      0    2111
                   _VC_SpeedIncrease
                    _switch_getState
 ---------------------------------------------------------------------------------
 (4) _VC_SpeedIncrease                                     5     5      0      24
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _sw_minus_handler                                     0     0      0    2111
                   _VC_SpeedDecrease
                    _switch_getState
 ---------------------------------------------------------------------------------
 (3) _sw_dust_handler                                      1     1      0    4175
                                              8 BANK0      1     1      0
                  _SW_getPressedTime
                   _VC_SpeedDecrease
                    _switch_getState
 ---------------------------------------------------------------------------------
 (4) _VC_SpeedDecrease                                     4     4      0      24
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _SW_getPressedTime                                    2     2      0    2064
                                              4 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _MO_setTargetAngel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SSD_update                                           5     5      0    8943
                                             17 BANK0      5     5      0
                        _SSD_display
                            _SSD_off
                             _SSD_on
                             ___bmul
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _SSD_on                                              13    13      0    2130
                                              4 BANK0     13    13      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _SSD_off                                             13    13      0    2130
                                              4 BANK0     13    13      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _MO_update                                            1     1      0    8104
                                              9 BANK0      1     1      0
                     _MO_fire_update
                      _MO_reduceHARM
                      _MO_softSwitch
 ---------------------------------------------------------------------------------
 (3) _MO_softSwitch                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MO_reduceHARM                                        1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MO_fire_update                                       0     0      0    8104
                          _TMR1_init
                        _TMR1_reload
                      _TMR1_setState
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    7744
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _TMR1_setState                                        3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _TMR1_reload                                          3     1      2     120
                                              6 BANK0      3     1      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _TMR1_init                                            5     3      2     218
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _DSP_update                                           4     4      0   10972
                                             20 BANK0      4     4      0
                       _LED_setState
                         _LED_update
                         _SSD_setVal
                        _VC_getSpeed
                             ___bmul
                    _switch_getState
 ---------------------------------------------------------------------------------
 (4) _switch_getState                                      4     4      0    2087
                                              4 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _VC_getSpeed                                          2     2      0      55
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _SSD_setVal                                           4     3      1    2314
                                              4 BANK0      4     3      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _LED_update                                           2     2      0    2220
                                             18 BANK0      2     2      0
                           _LED_show
 ---------------------------------------------------------------------------------
 (3) _LED_setState                                         4     3      1    2162
                                              4 BANK0      4     3      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _OS_init                                              0     0      0    9449
                _T0_timer_mode_state
                        _timer0_init
                      _timer0_reload
 ---------------------------------------------------------------------------------
 (2) _timer0_init                                         13    11      2    9405
                                             78 BANK0      2     0      2
                                              0 BANK1     11    11      0
              _T0_counter_mode_state
                _T0_timer_mode_state
                            ___fldiv
                            ___fltol
                           ___xxtofl
                              _round
                _timer0_ovf_setState
                      _timer0_reload
                    _timer0_set_mode
              _timer0_set_prescaller
 ---------------------------------------------------------------------------------
 (3) _timer0_set_prescaller                                3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _timer0_set_mode                                      3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _timer0_reload                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _timer0_ovf_setState                                  3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _round                                                8     4      4    6859
                                             70 BANK0      8     4      4
                            ___fladd
                            ___fldiv (ARG)
                            ___flsub
                              _trunc
 ---------------------------------------------------------------------------------
 (4) _trunc                                               11     7      4    1898
                                             51 BANK0     11     7      4
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _frexp                                                7     2      5     728
                                             12 BANK0      7     2      5
                             ___fleq
 ---------------------------------------------------------------------------------
 (6) ___fleq                                              12     4      8     368
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4     474
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             11     7      4     381
                                             40 BANK0     11     7      4
                            ___fldiv (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    2485
                                             62 BANK0      8     0      8
                            ___fladd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    2288
                                              0 BANK0     20    12      8
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             26    18      8    1273
                                             14 BANK0     26    18      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _T0_timer_mode_state                                  3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _T0_counter_mode_state                                3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _MO_init                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _INDICATOR_init                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DSP_init                                             0     0      0    8920
                           _LED_init
                           _SSD_init
 ---------------------------------------------------------------------------------
 (2) _SSD_init                                            15    15      0    4593
                                             37 BANK0     15    15      0
                        _SSD_display
                 _SSD_schematic_init
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _SSD_schematic_init                                  37    37      0      69
                                              0 BANK0     37    37      0
 ---------------------------------------------------------------------------------
 (3) _SSD_display                                          6     5      1    2238
                                              4 BANK0      6     5      1
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _LED_init                                            13    13      0    4327
                                             18 BANK0     13    13      0
                         _LED_create
                           _LED_show
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _LED_show                                            14    14      0    2152
                                              4 BANK0     14    14      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2042
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _LED_create                                           6     6      0      23
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _OS_ISR                                               6     6      0      44
                                              4 COMMON     6     6      0
                            _MO_fire
                    i1_timer0_reload
 ---------------------------------------------------------------------------------
 (8) i1_timer0_reload                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (8) _MO_fire                                              1     1      0      22
                                              3 COMMON     1     1      0
                    i1_TMR1_setState
 ---------------------------------------------------------------------------------
 (9) i1_TMR1_setState                                      3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DSP_init
     _LED_init
       _LED_create
       _LED_show
         ___bmul
       ___bmul
     _SSD_init
       _SSD_display
         ___bmul
       _SSD_schematic_init
       ___bmul
   _INDICATOR_init
   _MO_init
   _OS_init
     _T0_timer_mode_state
     _timer0_init
       _T0_counter_mode_state
       _T0_timer_mode_state
       ___fldiv
         ___xxtofl (ARG)
       ___fltol
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _round
         ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flsub (ARG)
           ___fladd
           _trunc (ARG)
             ___fltol
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
               ___fleq
         _trunc (ARG)
           ___fltol
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
             ___fleq
       _timer0_ovf_setState
       _timer0_reload
       _timer0_set_mode
       _timer0_set_prescaller
     _timer0_reload
   _OS_schedular
     _DSP_update
       _LED_setState
         ___bmul
       _LED_update
         _LED_show
           ___bmul
       _SSD_setVal
         ___bmul
       _VC_getSpeed
       ___bmul
       _switch_getState
         ___bmul
     _MO_update
       _MO_fire_update
         _TMR1_init
         _TMR1_reload
           ___wmul (ARG)
         _TMR1_setState
         ___wmul
       _MO_reduceHARM
       _MO_softSwitch
     _SSD_update
       _SSD_display
         ___bmul
       _SSD_off
         ___bmul
       _SSD_on
         ___bmul
       ___bmul
       ___lwmod
     _VC_update
       _MO_setTargetAngel
       _sw_dust_handler
         _SW_getPressedTime
           ___bmul
         _VC_SpeedDecrease
         _switch_getState
           ___bmul
       _sw_minus_handler
         _VC_SpeedDecrease
         _switch_getState
           ___bmul
       _sw_plus_handler
         _VC_SpeedIncrease
         _switch_getState
           ___bmul
     _switch_update
       ___bmul
   _VC_init
   _sw_init
     _switch_init
       ___bmul
       _switches_Schematic_init

 _OS_ISR (ROOT)
   _MO_fire
     i1_TMR1_setState
   i1_timer0_reload

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      58       9       91.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       B      11       11.5%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      B      4A       7       92.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0     10B      12        0.0%
ABS                  0      0     10B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Aug 22 20:59:51 2019

                    ___fldiv@aexp 0047                      ___fldiv@bexp 0046                                 pc 0002  
                    ___fldiv@sign 003F          __size_of_sw_dust_handler 0038                    ___bmul@product 0022  
                     __CFG_CP$OFF 0000        __end_of_SSD_schematic_init 0DBC                  ??_INDICATOR_init 0020  
                              fsr 0004               ___wmul@multiplicand 0022                   ??_TMR1_setState 0020  
          MO_setTargetAngel@angel 0021                        _SSD_setVal 1401                               l211 1523  
                             l203 1540                               l213 1527                               l205 1544  
                             l230 0D06                               l222 0CB9                               l215 153B  
                             l207 1558                               l240 1575                               l224 0CC4  
                             l232 0D33                               l225 0CCF                               l226 0CDA  
                             l227 0CE5                               l244 14D3                               l236 155D  
                             l228 0CF0                               l229 0CFB                               l246 14D6  
                             l238 1561                               l248 14E8                               l436 1716  
                             l462 0985                               l471 09B3                               l464 0987  
                             l481 14BA                               l467 0999                               l483 14BC  
                             l571 080C                               l740 0884                               l741 089E  
                             l469 099F                               l485 14CE                               l920 0513  
                             l906 04BA                               l764 0AC7                               l942 0652  
                             l870 035F                               l944 0660                               l864 02E8  
                             l868 0381                               l885 043A                               l898 04A2  
                             l998 0DDB                      __CFG_CPD$OFF 0000                        _SSD_update 09B4  
                             fsr0 0004                               indf 0000                       ?_LED_create 0070  
                    __CFG_FOSC$HS 0000                       _SSD_display 1576                       _MO_isStable 007A  
         __end_ofi1_timer0_reload 132A                       ?_LED_update 0070                      __CFG_LVP$OFF 0000  
                    ___fltol@exp1 0052                              l1011 0E31                              l1012 0E3B  
                            l1004 0E1B                              l3031 1762                              l3113 1680  
                            l3043 1773                              l3035 176A                              l3221 05AC  
                            l3133 173D                              l3037 175D                              l3215 058D  
                            l3223 0569                              l2503 0A83                              l3127 1721  
                            l3241 05D4                              l3225 05B1                              l3161 04ED  
                            l3065 15A4                              l3129 172F                              l3137 1748  
                            l3401 028B                              l3251 05ED                              l3155 04E2  
                            l2523 0AB3                              l2507 0A8C                              l3091 1704  
                            l3261 061F                              l2533 0AD6                              l2525 0AC3  
                            l3247 05EB                              l3239 05B7                              l3175 0508  
                            l3159 04E5                              l2703 046F                              l2623 036A  
                            l2615 032E                              l2551 02B3                              l3327 09C5  
                            l3415 0834                              l3423 084F                              l3351 0068  
                            l3265 0638                              l2721 04B2                              l2641 038F  
                            l2625 036C                              l2633 037B                              l3417 083A  
                            l3425 0845                              l3195 053E                              l3179 050B  
                            l2651 03B2                              l2555 02B6                              l2483 08B0  
                            l3291 0F4A                              l3419 0840                              l3371 0123  
                            l2493 13A8                              l3277 065C                              l3189 0532  
                            l2725 04B6                              l2557 02BE                              l3293 0F5E  
                            l3285 0F3C                              l2805 15C1                              l3429 0863  
                            l3357 0069                              l2575 02DD                              l2743 0DEA  
                            l2903 0924                              l3287 0F43                              l2823 14BE  
                            l2489 13A2                              l2649 03B0                              l2585 02F2  
                            l2737 0DD3                              l2833 095D                              l3377 015D  
                            l2691 0462                              l2659 03C2                              l2579 02E0  
                            l2771 0E58                              l2747 0DEE                              l2851 09A3  
                            l2835 0960                              l2843 096F                              l3395 0256  
                            l3387 01EC                              l3555 16D7                              l2685 045B  
                            l2677 044C                              l2669 042C                              l2693 0464  
                            l2757 0E2F                              l2749 0E00                              l2781 08D4  
                            l2837 0964                              l2919 1548                              l2759 0E20  
                            l2839 0968                              l2847 0989                              l3487 0ED7  
                            l2961 0D11         ??_switches_Schematic_init 0020                              l2699 046D  
                            l2973 1565                              l3941 14C6                              l2877 0804  
                            l3951 0D19                              l3943 0977                              l2985 14D8  
                            l3953 156D                              l3945 0991                              l3955 14E0  
                            l3947 09AB                              l3939 0857                              l2997 152B  
                            l3957 1550                              l3949 0F56                              l3959 1533  
                            u2015 0A95                              u2200 034E                              u2210 034F  
                            u2045 0AB4                              u2075 0ACC                              u2341 03ED  
                            u2333 03D4                              u2325 03B6                              u2245 0370  
                            u3045 16FB                              u3125 1724                              u2350 0401  
                            u2342 03EE                              u2351 0402                              u2343 03F3  
                            u2352 0407                              u2344 03F4                              u3305 059B  
                            u2353 0408                              u2345 03F9                              u3065 170D  
                            u3145 1735                              u2346 03FA                              u2195 0342  
                            u3155 173E                              u3335 05BB                              u2615 0E13  
                            u3425 060A                              u3265 0572                              u2810 0D3E  
                            u3514 00C6                              u3435 0628                              u3355 05C6  
                            u3275 057B                              u2395 044E                              u2635 0E28  
                            u3515 00C4                              u2820 0D53                              u3700 07E5  
                            u3445 0643                              u2734 0C60                              u2830 0D69  
                            u3710 07E6                              u2735 0C5E                              u3295 0586  
                            u2495 048C                              u2744 0C93                              u2840 0D80  
                            u2904 0B9D                              u2745 0C91                              u2905 0B9B  
                            u2850 0D96                              u2675 0E43                              u2595 0DF7  
                            u3804 0C11                              u2860 0DAD                              u3724 06AA  
                            u3805 0C0F                              u3725 06A8                              u2765 080D  
                            u3734 06DD                              u3735 06DB                              u1975 08AC  
                            u2775 0814                              u3744 0715                              u3745 0713  
                            u3754 0748                              u2874 0AFD                              u3755 0746  
                            u2875 0AFB                              u2884 0B30                              u3764 0E80  
                            i1l61 17F7                              u2885 0B2E                              u3765 0E7E  
                            u2894 0B6A                              u3774 0EB3                              u2895 0B68  
                            u3775 0EB1                              u3794 0BDE                              u3795 0BDC  
     __end_of_timer0_ovf_setState 14E9                      __CFG_WRT$OFF 0000                   LED_update@index 0033  
                            _main 16B9                              btemp 007E            ?_T0_counter_mode_state 0070  
         __size_of_MO_fire_update 003D                       ?_DSP_update 0070                     __CFG_BOREN$ON 0000  
                 __end_of_MO_fire 14B6                   __end_of_SSD_off 0B52                   __end_of_MO_init 1618  
                            start 000E                   __end_of_VC_init 07FC           MO_softSwitch@ss_counter 00D7  
                 ___fldiv@new_exp 0040                   __end_of_OS_init 13EC                    SSD_display@ssd 0029  
               ___bmul@multiplier 0023                       _switch_init 0E61         __size_of_VC_SpeedDecrease 0013  
                     _VC_getSpeed 133A    __size_of_timer0_set_prescaller 007F     __end_of_timer0_set_prescaller 0D34  
                __end_of_LED_init 0C39                     ___fltol@sign1 0051                   __end_of___fladd 04C5  
                           ?_main 0070                  __end_of_LED_show 0CB5                   __end_of___fldiv 0668  
                   __CFG_WDTE$OFF 0000                   __end_of___flsub 15F5                   __end_of___fltol 0AE5  
          __size_of_MO_reduceHARM 002B                  __end_of_DSP_init 1485                   __end_of___lwmod 174D  
                           i1l481 14EB                             i1l483 14EF                             i1l485 1503  
         __end_ofi1_TMR1_setState 1504                             _LedDB 00C4                switch_getState@ret 0027  
       __size_of_VC_SpeedIncrease 001F                     __CFG_PWRTE$ON 0000                   _timer0_set_mode 1559  
            timer0_ovf_setState@o 0022                             _frexp 08B2                             _errno 00CA  
              __size_of_TMR1_init 005B                             _round 0A13                             _trunc 0904  
                           pclath 000A                  __end_of_SSD_init 076A                   __end_of_sw_init 137B  
                           status 0003                             wtemp0 007E                   SSD_display@data 0024  
                 __initialization 0011                __size_of_MO_update 001B               __size_of_LED_create 002C  
                    __end_of_main 16E5   __end_of_switches_Schematic_init 1662                  i1TMR1_setState@s 0072  
                _timer0_init$1518 00E1                  _timer0_init$1519 00E5               __size_of_LED_update 001F  
                   ?_LED_setState 0024                __size_of_VC_update 0045            __size_of_MO_softSwitch 0034  
                          ??_main 0070                   _switch_getState 1416                       ?_SSD_setVal 0024  
                     ?_SSD_update 0070                 ??_sw_dust_handler 0028               __size_of_DSP_update 008F  
                     LED_init@led 003E               DSP_update@led_state 0036                            ?_frexp 002C  
                ?i1_timer0_reload 0070                            ?_round 0066                         ??_MO_fire 0073  
                       ??_SSD_off 0024                            ?_trunc 0053                         ??_MO_init 0020  
             sw_dust_handler@step 00C3                            i1l3501 14F3                            i1l3571 17EB  
                          i1l3961 14FB                         ??_VC_init 0020                         ??_OS_init 0070  
           __size_of_OS_schedular 0018                            u383_25 17C9                            u384_20 17D2  
                          u385_20 17D3                            u386_25 17D5                            u389_27 14A7  
                     LED_show@led 0031                            _TMR1IE 0460                            _OS_ISR 17C2  
                   _MO_reduceHARM 1662                  __end_of___xxtofl 0E61                            _SSD_on 0B52  
          __size_of_switch_update 0244                            ___bmul 139E                            ___fleq 0868  
                       ??___fladd 0028                            ___wmul 0800                         ??___fldiv 0036  
                       ??___flsub 0066                         ??___fltol 004C                    ??_LED_setState 0025  
                    ?_timer0_init 006E                 __end_of_TMR1_init 09B4                         ??___lwmod 0024  
         __end_of_timer0_set_mode 1576      __size_of_T0_timer_mode_state 001D                      ?_TMR1_reload 0026  
                ?i1_TMR1_setState 0070                            saved_w 007E                      _OS_schedular 1485  
                  LED_create@F909 00BC          __end_of_sw_minus_handler 1442                 __end_of_MO_update 151F  
                          round@f 006A                            round@x 0066                         ??_sw_init 0032  
                          trunc@i 0058                            trunc@x 0053                     _MO_softSwitch 16E5  
                    ___xxtofl@arg 002A                      ___xxtofl@exp 0029                      ___xxtofl@val 0020  
                      ___fleq@ff1 0020                        ___fleq@ff2 0024                 __end_of_VC_update 0868  
                  ?_MO_reduceHARM 0070           __end_of__initialization 004E                    _MO_fire_update 1785  
                       ?_LED_init 0070               __size_of_SSD_setVal 0015                        ___fltol@f1 0048  
                       ?_LED_show 0070               __size_of_SSD_update 005F                         ?_DSP_init 0070  
             ___bmul@multiplicand 0020                    __pcstackCOMMON 0070           __end_of_switch_getState 142C  
                    __pidataBANK1 1618                      __pidataBANK2 134F                      __pidataBANK3 1458  
        __size_of_sw_plus_handler 0016                  _VC_SpeedDecrease 13C4                     __end_of_frexp 0904  
               _MO_setTargetAngel 138C                     __end_of_round 0A78                     __end_of_trunc 0959  
              ?_MO_setTargetAngel 0070                         ?_SSD_init 0070                   _T0_OneCountTime 00D2  
                _VC_SpeedIncrease 15B4                      ??_LED_create 0020                     _switch_update 0052  
                   _switches_data 0190                      ?_SSD_display 0024               ??_MO_setTargetAngel 0020  
           __end_of_timer0_reload 1332                _SSD_schematic_init 0D34                      ??_LED_update 0032  
                         ??_frexp 0031                    ?_MO_softSwitch 0070                           ??_round 006A  
                         ??_trunc 0057           ??_T0_counter_mode_state 0020            __end_of_MO_fire_update 17C2  
                      __pbssBANK1 00C4                        __pbssBANK3 0190               ?_SSD_schematic_init 0070  
                         ?_OS_ISR 0070                      ??_DSP_update 0034                           ?_SSD_on 0070  
                      ??_LED_init 0032                        ??_LED_show 0024                        ??_DSP_init 0054  
           switch_update@sw_index 002C                        __pmaintext 16B9         __end_of_MO_setTargetAngel 139E  
                         ?___bmul 0020                           ?___fleq 0020                __end_of_LED_create 16B9  
                    ?_switch_init 0070                           ?___wmul 0020                        __pintentry 0004  
                    ?_VC_getSpeed 0070                __end_of_LED_update 15B4              ??_SSD_schematic_init 0020  
                ?_timer0_set_mode 0070                     _T0_PreScaller 00D4                        ??_SSD_init 0045  
           __end_of_TMR1_setState 14CF                    ?_switch_update 0070                         ?___xxtofl 0020  
              __end_of_DSP_update 07F9                   _Schedular_State 00DE                   ??_MO_reduceHARM 0020  
            T0_timer_mode_state@s 0022                           _MO_fire 149D                           _SSD_off 0AE5  
                         _MO_init 15F5               VC_update@vc_counter 00DB              __end_of_LED_setState 1401  
                 ?_MO_fire_update 0070                           _VC_init 07F9                           _OS_init 13D7  
           LED_update@LED_counter 00D9                   __size_of_OS_ISR 003E              _VC_SpeedDecrease$501 0022  
                 __size_of_SSD_on 006D      __size_of_timer0_ovf_setState 001A                   _sw_dust_handler 174D  
                ?_switch_getState 0070                   __size_of___bmul 0013                   __size_of___fleq 004A  
                         ___fladd 0296                           ___fldiv 04C5                           ___flsub 15D3  
                         ___fltol 0A78                   __size_of___wmul 0023                         SSD_on@ssd 0030  
                         ___lwmod 1719              __size_of_timer0_init 00DE                           __ptext1 136A  
                         __ptext2 0E61                           __ptext3 163C                           __ptext4 07F9  
                         __ptext5 1485                           __ptext6 0052                           __ptext7 0823  
                         __ptext8 1442                           __ptext9 15B4                      ??_SSD_setVal 0025  
                  _MO_targetAngel 00CE             _timer0_set_prescaller 0CB5                      ??_SSD_update 0031  
  switch_update@sw_update_counter 00DC                 ??_sw_plus_handler 0028                        ??___xxtofl 0024  
        ?_switches_Schematic_init 0070              __size_of_TMR1_reload 000B                   ??_MO_softSwitch 0020  
         __size_of_INDICATOR_init 0013                           _sw_init 136A                           clrloop0 1333  
            end_of_initialization 004E               _T0_timer_mode_state 153C                         _DSP_speed 007D  
              __end_of_SSD_setVal 1416                __end_of_SSD_update 0A13        __size_of_MO_setTargetAngel 0012  
            MO_reduceHARM@RH_flag 00C2              ?_T0_timer_mode_state 0070                   ??_switch_update 0024  
                       _TMR1_init 0959                       ___fladd@grs 0033                     ___xxtofl@sign 0028  
                     ___fldiv@grs 0042                       ___fldiv@rem 003B                 ?_sw_minus_handler 0070  
                 _DSP_update$1966 0037              __size_of_SSD_display 001F          __end_of_VC_SpeedDecrease 13D7  
              ??_sw_minus_handler 0028                         _MO_update 1504           __end_of_sw_dust_handler 1785  
        __size_ofi1_timer0_reload 0008                    __end_of_OS_ISR 1800                         _VC_update 0823  
                  __end_of_SSD_on 0BBF          __end_of_VC_SpeedIncrease 15D3                 __size_of_LED_init 007A  
               __size_of_LED_show 007C                  timer0_reload@val 0021                 __size_of_DSP_init 0017  
                  __end_of___bmul 13B1                    __end_of___fleq 08B2                 _SW_getPressedTime 135A  
                  __end_of___wmul 0823             ??_T0_timer_mode_state 0020                 switch_getState@sw 0026  
            __size_of_switch_init 00C1            ?_timer0_set_prescaller 0070      SSD_update@ssd_update_counter 00DD  
            __size_of_VC_getSpeed 000A                ?_SW_getPressedTime 0070                        ?_TMR1_init 0020  
                timer0_set_mode@m 0022               start_initialization 0011             __size_of_LED_setState 0015  
               __size_of_SSD_init 0102               ??_SW_getPressedTime 0024                 LED_setState@state 0024  
        __size_ofi1_TMR1_setState 001B                        ?_MO_update 0070                        frexp@value 002C  
  __size_of_T0_counter_mode_state 001D     __end_of_T0_counter_mode_state 153C                          ??_OS_ISR 0074  
                        ??_SSD_on 0024                        ?_VC_update 0070                          ??___bmul 0021  
                        ??___fleq 0028                _MO_SingleAngelTime 00CC         __end_of_SW_getPressedTime 136A  
                        ??___wmul 0024                        init_fetch0 137B                     SSD_setVal@val 0024  
                   SSD_setVal@ssd 0027                       __pdataBANK1 00A0                       __pdataBANK2 0110  
                     __pdataBANK3 01D2                      _LED_setState 13EC                     LED_create@910 0020  
                       ___fladd@a 0024                         ___fladd@b 0020                         ___fldiv@a 002E  
                       ___fldiv@b 0032                       __pbssCOMMON 007A         switch_update@sample_index 002B  
                       ___flsub@a 005E                         ___flsub@b 0062                         ___latbits 0002  
                ??_MO_fire_update 0029                     __pcstackBANK0 0020                     __pcstackBANK1 00DF  
             _timer0_ovf_setState 14CF                    _INDICATOR_init 13B1                   SSD_update@index 0035  
               __size_of___xxtofl 00A5                       SSD_init@ssd 0053                          ?_MO_fire 0070  
                        ?_SSD_off 0070                          ?_MO_init 0070                          ?_VC_init 0070  
             SW_getPressedTime@sw 0025                          ?_OS_init 0070                  ?_sw_dust_handler 0070  
                 _MO_currentAngel 00D0              ?_timer0_ovf_setState 0070                   _sw_plus_handler 1442  
                        ?___fladd 0020                          ?___fldiv 002E                          ?___flsub 005E  
                        ?___fltol 0048            __size_of_timer0_reload 0008                          ?___lwmod 0020  
               ??i1_timer0_reload 0070       __size_of_SSD_schematic_init 0088                       ??_TMR1_init 0022  
          __end_of_INDICATOR_init 13C4          __size_of_timer0_set_mode 001D                          ?_sw_init 0070  
                  __size_of_frexp 0052                    __size_of_round 0065                    __size_of_trunc 0055  
            _VC_SpeedIncrease$499 0023                       ??_MO_update 0029             __end_of_MO_reduceHARM 168D  
               interrupt_function 0004                    ___wmul@product 0024                i1timer0_reload@val 0071  
                       clear_ram0 1332                          _LED_init 0BBF  __size_of_switches_Schematic_init 0026  
                        _LED_show 0C39                       ??_VC_update 0029            __size_of_TMR1_setState 0019  
                        _DSP_init 146E             ??_timer0_ovf_setState 0020                 ??i1_TMR1_setState 0070  
                      TMR1_init@m 0020                        TMR1_init@p 0024                        TMR1_init@s 0021  
      __size_of_SW_getPressedTime 0010                     ??_timer0_init 00DF                     ??_TMR1_reload 0028  
               ___wmul@multiplier 0020                          _SSD_init 0668                   _SSD_update$1965 0034  
           DSP_update@DSP_counter 00DA          __size_of_switch_getState 0016                   ?_INDICATOR_init 0070  
                   ?_OS_schedular 0070           MO_reduceHARM@RH_counter 00D6                     _timer0_reload 132A  
           __end_of_MO_softSwitch 1719                 ?_VC_SpeedDecrease 0070                  __size_of_MO_fire 0019  
                __size_of_SSD_off 006D                  __size_of_MO_init 0023                  __size_of_VC_init 0003  
                __size_of_OS_init 0015           __end_of_sw_plus_handler 1458                ??_VC_SpeedDecrease 0020  
                       frexp@eptr 0030                 ?_VC_SpeedIncrease 0070         __size_of_sw_minus_handler 0016  
         ??_timer0_set_prescaller 0020                ??_VC_SpeedIncrease 0020                  __size_of___fladd 022F  
                __size_of___fldiv 01A3                  __size_of___flsub 0022                  __size_of___fltol 006D  
                __size_of___lwmod 0034                  switch_init@index 0030                        SSD_off@ssd 0030  
             __end_of_timer0_init 1000                    ??_OS_schedular 0038             __end_of_switch_update 0296  
                   _TMR1_setState 14B6                          ___xxtofl 0DBC                       _current_ssd 007C  
                   ??_SSD_display 0025                    TMR1_reload@val 0026                    ?_timer0_reload 0070  
                        __ptext10 142C                          __ptext11 174D                          __ptext20 16E5  
                        __ptext12 13C4                          __ptext21 1662                          __ptext13 135A  
                        __ptext30 1401                          __ptext22 1785                          __ptext14 138C  
                        __ptext31 1595                          __ptext23 0800                          __ptext15 09B4  
                        __ptext40 0904                          __ptext32 13EC                          __ptext24 14B6  
                        __ptext16 1719                          __ptext41 08B2                          __ptext33 13D7  
                        __ptext25 1344                          __ptext17 0B52                          __ptext50 15F5  
                        __ptext42 0868                          __ptext34 0F22                          __ptext26 0959  
                        __ptext18 0AE5                          __ptext51 13B1                          __ptext43 0DBC  
                        __ptext35 0CB5                          __ptext27 076A                          __ptext19 1504  
                        __ptext60 17C2                          __ptext52 146E                          __ptext44 0A78  
                        __ptext36 1559                          __ptext28 1416                          __ptext61 1322  
                        __ptext53 0668                          __ptext45 15D3                          __ptext37 132A  
                        __ptext29 133A                          __ptext62 149D                          __ptext54 0D34  
                        __ptext46 0296                          __ptext38 14CF                          __ptext63 14E9  
                        __ptext55 1576                          __ptext47 04C5                          __ptext39 0A13  
                        __ptext56 0BBF                          __ptext48 153C                          __ptext57 0C39  
                        __ptext49 151F                          __ptext58 139E                          __ptext59 168D  
             __end_of_TMR1_reload 134F                  __size_of_sw_init 0011                    TMR1_setState@s 0022  
                      trunc@expon 005C                     switch_init@sw 0031                     __size_of_main 002C  
               ??_timer0_set_mode 0020                 VC_update@sw_index 002B       __end_of_T0_timer_mode_state 1559  
                   ??_switch_init 0024                          _ssd_data 01B1                     ??_VC_getSpeed 0020  
                   VC_getSpeed@ps 0021                    ?_TMR1_setState 0070                   LED_setState@led 0027  
                      _LED_create 168D                          init_ram0 137F                      timer0_init@m 006E  
                    timer0_init@o 006F                      timer0_init@p 00E9                        _LED_update 1595  
               ??_switch_getState 0024                          intlevel1 0000               __end_of_SSD_display 1595  
                ___lwmod@dividend 0022           _switches_Schematic_init 163C                   i1_timer0_reload 1322  
                ?_sw_plus_handler 0070                        _DSP_update 076A             _T0_counter_mode_state 151F  
                     _timer0_init 0F22               MO_update@MO_counter 00D8                       _MO_AngelVal 00B4  
             __end_of_switch_init 0F22                       _TMR1_reload 1344               __end_of_VC_getSpeed 1344  
                 ___lwmod@divisor 0020                   ??_timer0_reload 0020                   ___lwmod@counter 0025  
                _VC_current_speed 007B            timer0_set_prescaller@p 0022                       _ssd_decoder 0110  
                   ___fladd@signs 0030                   i1_TMR1_setState 14E9            SSD_schematic_init@F931 00A0  
          SSD_schematic_init@F933 01DD            SSD_schematic_init@F935 01D2                      ___fladd@aexp 0031  
                    ___fladd@bexp 0032             SSD_schematic_init@932 0024             SSD_schematic_init@934 002F  
           SSD_schematic_init@936 003A            T0_counter_mode_state@s 0022                _DSP_speed_patterns 00AB  
            __end_of_OS_schedular 149D                  _sw_minus_handler 142C  
